/*
 *------------------------------------------------------------------------------
 * SalesOrdMngt.java,v 1.0 2007/10/12 09:38:11 chj Exp $
 *
 * PROJ : 한솔CSN 프로젝트
 * Copyright 2006-2007 LG CNS All rights reserved
 *------------------------------------------------------------------------------
 *                  변         경         사         항
 *------------------------------------------------------------------------------
 *   DATE       AUTHOR                      DESCRIPTION
 * -----------  ------  ---------------------------------------------------------
 * 2007/10/12   chj         최초 프로그램 작성
 *----------------------------------------------------------------------------
 */
package hsni.om.om02.salesOrdMngt.pbc;


import hsni.az.comm.IChecker;
import hsni.om.comm.OmConstants;
import hsni.om.comm.pbc.IConvUnitUtil;
import hsni.om.om02.custCdMpng.pbc.ICustCdMpng;
import hsni.om.om02.planVanningMngt.pbc.IPlanVanningMngt;
import hsni.om.om02.salesOrdMngt.wsc.SalesOrdMngtWSC;
import hsni.om.om03.ordDivMngt.pbc.IOrdDivMngt;
import hsni.om.om03.workRouteMngt.pbc.IWorkRouteMngt;
import hsni.om.om04.stepEachRsltMngt.pbc.IStepEachRsltMngt;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import laf.core.exception.LBizException;
import laf.core.exception.LException;
import laf.core.exception.LSysException;
import laf.core.log.LLog;
import laf.support.collection.LCollectionUtility;
import laf.support.collection.LData;
import laf.support.collection.LMultiData;
import lafx.bridge.gauce.dao.LCommonDao;
import lafx.bridge.gauce.dao.LCompoundDao;
import lafx.bridge.gauce.util.LGauceConverter;
import pbf.fw.support.daoUtil.application.dao.LBridgeDao;
import pbf.comm.security.UserData;
import pbf.comm.transfer.gauce.util.ValidationUtil;
import pbf.fw.foundation.pbc.PbcUtil;
import pbf.fw.support.daoUtil.CommGauDaoUtil;
import pbf.fw.support.daoUtil.CompDaoUtil;
import pbf.fw.support.daoUtil.CompGauDaoUtil;
import pbf.fw.support.util.ConstantUtil;
import pbf.fw.support.util.DateUtil;
import pbf.fw.support.util.EventMsgUtil;
import pbf.fw.support.util.GauceUtil;
import pbf.fw.support.util.StringUtil;
import pbf.fw.support.util.WeightUtil;
import pbf.fw.support.util.MathUtil;

import com.gauce.GauceDataRow;

/**
 * <PRE>
 * 내부 기본 판매오더 등록 정보의 조회/추가/수정/삭제/ 업무를 처리하는 Biz 클래스.
 *
 * Database Tables :
 * </PRE>
 * @author    chj
 */
public class SalesOrdMngt implements ISalesOrdMngt{
    private String ART_YN = "Y";
    /**
     * 고객오더오류목록조회 
     * @param inputData
     * @throws LException
     */
    
    public LMultiData retrieveCustOrdErrList(LData inputData) throws LException {
        try {
            LCommonDao dao = new LCommonDao();
            LMultiData dataHander = new LMultiData();

            dataHander.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveCustOrdErrList", inputData));

            return dataHander;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustOrdErrList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 고객오더목록조회
     * @param inputData
     * @throws LException
     */
    public LMultiData retrieveCustOrdList(LData inputData) throws LException {
        try {
            LCommonDao dao = new LCommonDao();
            LMultiData dataHander = new LMultiData();

            dataHander.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveCustOrdList", inputData));

            return dataHander;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustOrdList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 고객오더 매핑 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveSalesOrdMpng(LData inputData) throws LException {

        LData       coOrder         = null;
        LMultiData  coItem          = null;

        try{
            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao(
                                                        "select/om/om01/coRegDomestic/retrieveCoRegDomesticList", inputData);
            coOrder = commonDao.executeQueryForSingle();

            laf.application.dao.LCommonDao dao = new laf.application.dao.LCommonDao();
            coItem  = dao.executeQuery("select/om/om01/coRegDomestic/retrieveItemList", inputData);

            String workSctnCd = coOrder.getString("workSctnCd");

            if("I".equals(workSctnCd)) {
                createSalesOrd(coOrder, coItem);
            } else if("U".equals(workSctnCd)) {
                updateSalesOrdAuto(coOrder, coItem);
            } else if("D".equals(workSctnCd)) {
                cancelSO(coOrder);
            } else if("Z".equals(workSctnCd)) {
                LData lData = processHansolpaperExpOrdCmpt(coOrder, coItem);

                LLog.debug.println("@@@@@@@@@@@\n\n"+lData);
            }

            return null;
        } catch (LBizException ex) {
            ex.printStackTrace();
            throw ex;
        } catch (Exception se) {
            se.printStackTrace();
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustOrdMpng()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }

    /**
     * 내부 기본 판매오더 등록 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    
    public LMultiData retrieveSalesOrdMngtList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdMngtList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveSalesOrdMngtList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
    
    /**
     * 내부 기본 판매오더 등록 실적 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveIsdBasisCopyTgtOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{
            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveIsdBasisCopyTgtOrd", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveIsdBasisCopyTgtOrdDetail", inputData));
            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveIsdBasisCopyTgtOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
    /**
     * 내부 기본 판매오더 등록 가용재고 체크 조회하는 메소드.
     * 가용재고조회 EAI 웹서비스 통신
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveWrhsAvailStock(LData inputData) throws LException {
        try{
            //return dao.executeQuery("select/om/om02/salesOrd/retrieveAvailStock", inputData);
            LMultiData rtnMulti = new LMultiData();

            LLog.debug.println("@@@@@@@@@\n\nretrieveAvailStockWSC start ");
            LLog.debug.println("@@@@@@@@@inputData========== " + inputData);

            String workPlCd = inputData.getString("workPlCd");
            if(workPlCd == null || workPlCd.equals("")) workPlCd = "";

            String custCd   = inputData.getString("custCd");
            if(custCd   == null || custCd.equals(""))   custCd   = "";

            String itemCd   = inputData.getString("itemCd");
            if(itemCd   == null || itemCd.equals(""))   itemCd   = "";

            String batCd    = inputData.getString("batCd");
            if(batCd    == null || batCd.equals(""))    inputData.setString("batCd", "");

            if ( workPlCd.length() == 0 || custCd.length() == 0 || itemCd.length() == 0 ) {
                throw new Exception("가용재고조회 not null 필드중에 null 데이터가 있습니다.");
            }

            if(inputData.containsKey("prdtReqNo")) {
                if(inputData.getString("prdtReqNo") == null || inputData.getString("prdtReqNo").equals(""))
                    inputData.setString("prdtReqNo", "%");
            }
            else {
                inputData.setString("prdtReqNo", "%");
            }

            if(inputData.containsKey("itemGradeCd")) {
                if(inputData.getString("itemGradeCd") == null || inputData.getString("itemGradeCd").equals(""))
                    inputData.setString("itemGradeCd", "%");
            }
            else {
                inputData.setString("itemGradeCd", "%");
            }

            inputData.setString("lottable01", "%");
            inputData.setString("lottable02", "%");
            inputData.setString("lottable03", "%");
            inputData.setString("lottable04", "%");
            inputData.setString("lottable05", "%");
            inputData.setString("lottable06", "%");
            inputData.setString("lottable07", "%");
            inputData.setString("lottable08", "%");
            inputData.setString("lottable09", "%");
            inputData.setString("lottable10", "%");

            if(custCd.equals(OmConstants.CUST_CO_CD_HP)
               || ("Y".equals(ART_YN) && custCd.equals(OmConstants.CUST_CO_CD_AT))
            ){
                inputData.setString("lottable03", inputData.getString("prdtReqNo"));
            }else if(custCd.equals(OmConstants.CUST_CO_CD_NC)){
                inputData.setString("lottable03", inputData.getString("prdtReqNo"));
                if(inputData.containsKey("pculCd")){
                    if(inputData.getString("pculCd") == null || inputData.getString("pculCd").trim().equals("")){
                        inputData.setString("pculCd", "%");
                    }
                }else{
                    inputData.setString("pculCd", "%");
                }
                if(inputData.containsKey("mnCd")){
                    if(inputData.getString("mnCd") == null || inputData.getString("mnCd").trim().equals("")){
                        inputData.setString("mnCd", "%");
                    }
                }else{
                    inputData.setString("mnCd", "%");
                }
                inputData.setString("lottable07", inputData.getString("pculCd").trim() + "-" + inputData.getString("mnCd"));
            }else if(custCd.equals(OmConstants.CUST_CO_CD_RP)){
                if(inputData.containsKey("plantCd")){
                    if(inputData.getString("plantCd") == null || inputData.getString("plantCd").equals(""))
                        inputData.setString("plantCd", "%");
                }else
                    inputData.setString("plantCd", "%");
                inputData.setString("lottable02", inputData.getString("plantCd"));

            }

            SalesOrdMngtWSC wsc = new SalesOrdMngtWSC();
            LData outData = wsc.retrieveAvailStock(inputData);
            if(!outData.getString("returnType").equals("S"))
                throw new LBizException("가용재고 조회중 오류가 발생했습니다.:" + outData.getString("returnMessage"));

            LData input = new LData();
            double availStock = 0.0;
            String unitCd = "";
            String basisUnitAttr = "";
            LLog.debug.println("availStock List\n" + outData);
            input.setString("custCd", inputData.getString("custCd"));
            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao(
                "select/ma/ma01/ptnInfoMngt/retrieveAvailStockConfStd",                 input);
            LData resultSingle = commonDao.executeQueryForSingle();

//              /*
//               * 가용재고 = 현재고 - 할당재고 - Picking재고 - 보류재고 - 출고예정재고
//                 ASN수량 (해당 고객의 ASN 재고 포함여부가 'Y'인 경우에만 더한다)
//
//                                 현재고수량     - cntr_stock_qty
//                                 할당재고수량 - alloc_stock_qty
//                  picking재고수량 - picking_stcok_qty
//                                 보류재고수량  - dly_stock_qty
//                                 출고예정재고수량  - gi_prar_stock_qty
//                  asn수량 - asn_qty
//               */

            availStock = outData.getDouble("cntrStockQty") - outData.getDouble("allocStockQty") - outData.getDouble("pickingStockQty") - outData.getDouble("dlyStockQty") - outData.getDouble("giPrarStockQty");

            if ( "Y".equals( resultSingle.getString("asnStockIncYn")) ) {
                availStock += outData.getDouble("asnQty");
            }

            LData paramData = new LData();
            paramData.setString("clasCd", "BASIC_UNIT_CD");
            paramData.setString("comnCd", outData.getString("unitCd"));

            LData commCd = commonDao.executeQueryForSingle("select/ma/ma01/comnCdMngt/retrieveComnFltr", paramData);

            if(outData.getString("unitCd") != null && !outData.getString("unitCd").equals("")) {
                unitCd = outData.getString("unitCd");
            }
            if(commCd != null && commCd.getString("fltrConts1") != null && !commCd.getString("fltrConts1").equals("")) {
                basisUnitAttr = commCd.getString("fltrConts1");
            }

            input = null;
            input = new LData();
            input.setDouble("availStock", availStock);
            input.setString("unitCd", unitCd);
            input.setString("basisUnitAttr", basisUnitAttr);

            LLog.debug.println("\n\n@@@@@@@@@ availStock "+availStock);

            rtnMulti.addLData(input);
            LLog.debug.println("retrieveAvailStockWSC end \n\n@@@@@@@@@");

            return rtnMulti;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveAvailStock()" + "=>" + se.getMessage());
            throw new LSysException("가용재고 조회중 오류가 발생했습니다.", se);
        }
    }

   /*
    * 내부 기본 판매오더 등록 가용재고 체크 조회하는 메소드.
    * 가용재고조회 WM DB Link
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
   public LMultiData retrieveAvailStock(LData inputData) throws LException {

        try{

            LMultiData rtnMulti = new LMultiData();

            LLog.debug.println("@@@@@@@@@\n\nretrieveAvailStock start ");
            LLog.debug.println("@@@@@@@@@inputData " + inputData);

            String workPlCd = inputData.getString("workPlCd");
            if(workPlCd == null || workPlCd.equals("")) {
                throw new Exception("가용재고조회시 작업장은 필수 항목입니다.");
            }

            String custCd   = inputData.getString("custCd");
            if(custCd   == null || custCd.equals("")) {
                throw new Exception("가용재고조회시 고객코드는 필수 항목입니다.");
            }

            String itemCd   = inputData.getString("itemCd");
            if(itemCd   == null || itemCd.equals("")) {
                throw new Exception("가용재고조회시 아이템코드는 필수 항목입니다.");
            }

            String batNo    = inputData.getString("batCd");
            if(batNo    == null || batNo.equals(""))  {
                inputData.setString("batNo", "");
            } else {
                inputData.setString("batNo", inputData.getString("batCd"));
            }


            if(inputData.getString("prdtReqNo")   == null || "".equals(inputData.getString("prdtReqNo")))
                inputData.setString("prdtReqNo"  , "");

            if(inputData.getString("itemGradeCd") == null || "".equals(inputData.getString("itemGradeCd")))
                inputData.setString("itemGradeCd", "");

            inputData.setString("lottable01", "");
            inputData.setString("lottable02", "");
            inputData.setString("lottable03", "");
            inputData.setString("lottable04", "");
            inputData.setString("lottable05", "");
            inputData.setString("lottable06", "");
            inputData.setString("lottable07", "");
            inputData.setString("lottable08", "");
            inputData.setString("lottable09", "");
            inputData.setString("lottable10", "");

//          if(custCd.equals(OmConstants.CUST_CO_CD_HP)){
//              inputData.setString("lottable03", inputData.getString("prdtReqNo"));
//          }else if(custCd.equals(OmConstants.CUST_CO_CD_NC)){
            if(custCd.equals(OmConstants.CUST_CO_CD_NC)){
//              inputData.setString("lottable03", inputData.getString("prdtReqNo"));
                if(inputData.getString("pculCd")  == null || "".equals(inputData.getString("pculCd").trim())){
                    inputData.setString("pculCd", "%");
                }
                if(inputData.getString("mnCd")    == null || "".equals(inputData.getString("mnCd").trim())){
                    inputData.setString("mnCd"  , "%");
                }

                if("%".equals(inputData.getString("pculCd")) && "%".equals(inputData.getString("mnCd"))) {
                    inputData.setString("lottable07", "%");
                } else {
                    inputData.setString("lottable07", inputData.getString("pculCd").trim() + "-" + inputData.getString("mnCd"));
                }
            }else if(custCd.equals(OmConstants.CUST_CO_CD_RP)){
                if(inputData.getString("plantCd") == null || "".equals(inputData.getString("plantCd")))
                    inputData.setString("plantCd", "");
                inputData.setString("lottable02" , inputData.getString("plantCd"));
            }else if(custCd.equals(OmConstants.CUST_CO_CD_EV) || custCd.equals(OmConstants.CUST_CO_CD_SS)){
                inputData.setString("lottable03" , "");
            }else if(custCd.equals(OmConstants.CUST_CO_CD_SD)){
                inputData.setString("lotable1" , inputData.getString("lotNo"));
            }else if(custCd.equals(OmConstants.CUST_CO_CD_MR)){
                if(inputData.getString("lotable5")    == null || "".equals(inputData.getString("lotable5").trim())){
                    inputData.setString("lotable5" , "");
                }else{
                    inputData.setString("lotable5" , inputData.getString("lotable5"));
                }
            }

            laf.application.dao.LCommonDao dao1 = new laf.application.dao.LCommonDao(
                                    "select/ma/ma01/workPlInfoMngt/retrieveWmWorkPlCd", inputData);
            LData workData = dao1.executeQueryForSingle();
            if(workData.getString("wmWorkPlCd") == null || "".equals(workData.getString("wmWorkPlCd"))) {
                throw new Exception("가용재고조회시 작업장이 창고관리 대상이 아닙니다..");
            }
            inputData.setString("wmWorkPlCd", workData.getString("wmWorkPlCd"));

//          laf.application.dao.LCommonDao dao2 = new laf.application.dao.LCommonDao(
//                                  "select/om/om02/salesOrd/retrieveWrhsAvailStock", inputData, "wms");
//          LData outData  = dao2.executeQueryForSingle();

            LBridgeDao dao = new LBridgeDao();

            LData rptCustCdInfo = new LData();
            rptCustCdInfo.setString("rptCustCd", custCd);

            LData wlYnInfo = dao1.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnCdWlYn", rptCustCdInfo);
            if("Y".equals(wlYnInfo.getString("wlYn"))) {
                dao.setSpec("LEPSILON");
                dao.setQueryString("select/om/om02/salesOrd/retrieveWrhsAvailStockLepsilon");
            }else{
                LLog.debug.println("OmConstants.INH_YN  **************"+OmConstants.INH_YN);
                if("Y".equals(OmConstants.INH_YN)){
                    inputData.setString("inhYn", "Y");
                    dao.setSpec("HSNI");
                }else{
                    inputData.setString("inhYn", "N");
                    dao.setSpec("WMS");
                }
                dao.setQueryString("select/om/om02/salesOrd/retrieveWrhsAvailStock");
            }

//            if(custCd.equals(OmConstants.CUST_CO_CD_NS) || custCd.equals(OmConstants.CUST_CO_CD_CB)){
//              dao.setSpec("LEPSILON");
//              dao.setQueryString("select/om/om02/salesOrd/retrieveWrhsAvailStockLepsilon");
//            }else{
//                dao.setSpec("WMS");
//                dao.setQueryString("select/om/om02/salesOrd/retrieveWrhsAvailStock");
//            }

            dao.setParameter(inputData);
            LMultiData result = dao.executeQuery();
            LData outData = result.getLData(0);

            LData input = new LData();
            double availStock    = 0.0;
            String unitCd        = "";
            String basisUnitAttr = "";
            LLog.debug.println("availStock : " + outData);

            input.setString("custCd", inputData.getString("custCd"));
            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao(
                                    "select/ma/ma01/ptnInfoMngt/retrieveAvailStockConfStd", input);
            LData resultSingle = commonDao.executeQueryForSingle();

            /*
             * 가용재고 =
             * 현재고 - 할당재고 - Picking재고 - 보류재고 - 출고예정재고
             * ASN수량 (해당 고객의 ASN 재고 포함여부가 'Y'인 경우에만 더한다)
             * 현재고수량           : cntr_stock_qty
             * 할당재고수량     : alloc_stock_qty
             * picking재고수량  : picking_stcok_qty
             * 보류재고수량     : dly_stock_qty
             * 출고예정재고수량 : gi_prar_stock_qty
             * asn수량          : asn_qty
             */
            //Double.parseDouble(lData.getString("giQty"))
//          availStock = Double.parseDouble(outData.getString("cntrStockQty"))    -
//                       Double.parseDouble(outData.getString("allocStockQty"))   -
//                       Double.parseDouble(outData.getString("pickingStockQty")) -
//                       Double.parseDouble(outData.getString("dlyStockQty"))     -
//                       Double.parseDouble(outData.getString("giPrarStockQty"));
//
//          if( "Y".equals(resultSingle.getString("asnStockIncYn")) ) {
//              availStock += Double.parseDouble(outData.getString("asnQty"));
//          }

//          /** BigDecimal로 계산하기 - sample 예제 */
//          BigDecimal bd1 = new BigDecimal("0.7");
//          BigDecimal bd2 = new BigDecimal("0.3");
//
//          BigDecimal bigResult = bd1.subtract(bd2);
//          System.out.println(bigResult);

            double cntrStockQty = Double.parseDouble(outData.getString("cntrStockQty"));
            double allocStockQty = Double.parseDouble(outData.getString("allocStockQty"));

            double pickingStockQty = Double.parseDouble(outData.getString("pickingStockQty"));
            double dlyStockQty = Double.parseDouble(outData.getString("dlyStockQty"));
            double giPrarStockQty = Double.parseDouble(outData.getString("giPrarStockQty"));

            BigDecimal cntrStockQtyBig = new BigDecimal(cntrStockQty);
            BigDecimal allocStockQtyBig = new BigDecimal(allocStockQty);
            BigDecimal pickingStockQtyBig = new BigDecimal(pickingStockQty);
            BigDecimal dlyStockQtyBig = new BigDecimal(dlyStockQty);
            BigDecimal giPrarStockQtyBig = new BigDecimal(giPrarStockQty);

            cntrStockQtyBig = cntrStockQtyBig.subtract(allocStockQtyBig);
            cntrStockQtyBig = cntrStockQtyBig.subtract(pickingStockQtyBig);
            cntrStockQtyBig = cntrStockQtyBig.subtract(dlyStockQtyBig);
            cntrStockQtyBig = cntrStockQtyBig.subtract(giPrarStockQtyBig);

            if( "Y".equals(resultSingle.getString("asnStockIncYn")) ) {
                double asnQty = Double.parseDouble(outData.getString("asnQty"));
                BigDecimal asnQtyBig = new BigDecimal(asnQty);
                cntrStockQtyBig = cntrStockQtyBig.add(asnQtyBig);
            }

            availStock = cntrStockQtyBig.doubleValue();

            LLog.debug.println("availStock***** : " + availStock);

            LData paramData = new LData();
            paramData.setString("clasCd", "BASIC_UNIT_CD");
            paramData.setString("comnCd", outData.getString("unitCd"));

            LData commCd = commonDao.executeQueryForSingle("select/ma/ma01/comnCdMngt/retrieveComnFltr", paramData);

            if(outData.getString("unitCd") != null && !outData.getString("unitCd").equals("")) {
                unitCd = outData.getString("unitCd");
            }
            if(commCd != null && commCd.getString("fltrConts1") != null && !commCd.getString("fltrConts1").equals("")) {
                basisUnitAttr = commCd.getString("fltrConts1");
            }

            input = new LData();
            input.setDouble("availStock"   , availStock);
            input.setString("unitCd"       , unitCd);
            input.setString("basisUnitAttr", basisUnitAttr);

            LLog.debug.println("\n\n@@@@@@@@@ availStock1 "+availStock);

            if(input.getString("basisUnitAttr").equals("QTY_UNIT_CD")){
                // 허용규칙 : 고객오더량이 가용재고량 보다 0.01이내로 많을 경우에도 오더를 자동분배
                // 소수점 6짜리에서 반올림 처리
                // 53   - 48.6 = 4.399999999999999 (S000448911) ?
                // 13.2 -    8 = 5.199999999999999 (S000453017) ?
                // 적용 고객오더유형 : DOOR , DLOR
                if( (custCd.equals(OmConstants.CUST_CO_CD_HP)
                        || ("Y".equals(ART_YN) && custCd.equals(OmConstants.CUST_CO_CD_AT)) )
                    && input.getString("custOrdTypeCd") != null
                    && ("DOOR".equals(input.getString("custOrdTypeCd")) || "DLOR".equals(input.getString("custOrdTypeCd"))) ){

                    if(availStock > 0){
                        //availStock = availStock + 0.0000001;
                        // 소수 6째자리에서 반올림
                        availStock = new BigDecimal(availStock+"").setScale(5, BigDecimal.ROUND_HALF_UP).doubleValue();

                        input.setDouble("availStock"   , availStock);
                        LLog.debug.println("\n\n@@@@@@@@@ availStock333 "+availStock);
                    }
                }
            }

            if(input.getString("basisUnitAttr").equals("WGT_UNIT_CD")){
                // 허용규칙 : 고객오더량이 가용재고량 보다 1KG이내로 많을 경우에도 오더를 자동분배
                // 적용 고객오더유형 : DOOR , DLOR
                if( (custCd.equals(OmConstants.CUST_CO_CD_HP)
                        || ("Y".equals(ART_YN) && custCd.equals(OmConstants.CUST_CO_CD_AT)) )
                    && input.getString("custOrdTypeCd") != null
                    && ("DOOR".equals(input.getString("custOrdTypeCd")) || "DLOR".equals(input.getString("custOrdTypeCd"))) ){

                    if(availStock > 0){
                        availStock = availStock + 1;
                        input.setDouble("availStock"   , availStock);
                    }
                }
            }

            LLog.debug.println("\n\n@@@@@@@@@ availStock2 "+availStock);
            rtnMulti.addLData(input);
            LLog.debug.println("retrieveAvailStock end \n\n@@@@@@@@@");

            return rtnMulti;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveAvailStock()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
   }

    /**
     * 내부 기본 판매오더 등록 오더유형 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveCustCtrtOrdType(LData inputData) throws LException {
        laf.application.dao.LCommonDao dao = new laf.application.dao.LCommonDao();
        try{
            LMultiData result = dao.executeQuery("select/sm/sm04/ctrtMngt/retrieveCustCtrtOrdType", inputData);

            LData temp = null;
            LMultiData retData = new LMultiData();

            if(result != null && result.getDataCount() > 0) {
                for(int i=0; i < result.getDataCount(); i++) {
                    temp = result.getLData(i);
                    if(OmConstants.JSP_ID_CREATE_ISD_BASIS_SALES_ORD.equals(inputData.getString("jspId")) ) {//내부기본판매오더등록
                        /*
                         *  국내내수판매반품출고운송입고
                         *  국내수출판매정상운송
                         *  국내수출판매정상운송입고
                         *  국내수출판매정상출고운송입고
                         *  국내내수판매정상운송
                         *  국내내수판매정상출고
                         *  국내내수판매정상출고운송
                         *  국내내수판매정상출고운송입고
                         *  국내수입조달정상출고운송
                         *  국내수입조달정상운송
                         *  국내수출판매반품운송
                         *  국내내수판매반품운송
                         *  2015-10-22 국내수입조달출고 유형추가요청
                         */
                        if(temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_RETURN_INPUT)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_EXP_SELL_TRANS)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_EXP_SELL_TRANS_INPUT)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_EXP_SELL_TRANS_OUTPUT)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_SELL_TRNAS )
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_SELL_OUTPUT)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_SELL_OUTPUT_TRANS)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_SELL_INPUT)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_IMP_SUPPLY_OUTPUT_TRAN)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_IMP_SUPPLY_TRAN)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_EXP_REJECT_TRAN)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_DOM_SELL_REJECT_TRAN)
                        || temp.getString("code").equals("3078")
                        ) {
                            retData.addLData(temp);
                        }
                    } else if(OmConstants.JSP_ID_TPL_OCEAN_EXP_SALES_ORD_FWD.equals(inputData.getString("jspId"))) { //TPL 해상수출판매오더포워딩관리
                        if(temp.getString("code").equals(OmConstants.ORD_TYPE_CD_EXP_SELL_FWD)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_EXP_SELL_TRANS_FWD)
                        ) {
                            retData.addLData(temp);
                        }

                    } else if(OmConstants.JSP_ID_OCEAN_IMP_SALES_ORD_FWD.equals(inputData.getString("jspId"))) { //해상수입판매오더포워딩관리
                        if(temp.getString("code").equals(OmConstants.ORD_TYPE_CD_IMP_SUPPLY_FWD)
                        || temp.getString("code").equals(OmConstants.ORD_TYPE_CD_IMP_SUPPLY_FWD_TRANS)
                        ) {
                            retData.addLData(temp);
                        }
                    } else if(OmConstants.JSP_ID_AIR_IMP_SALES_ORD_FWD.equals(inputData.getString("jspId"))) { //항공수입판매오더포워딩관리
                        if(temp.getString("code").equals(OmConstants.ORD_TYPE_CD_IMP_SUPPLY_FWD)
                                ) {
                                    retData.addLData(temp);
                                }

                   } else if(OmConstants.JSP_ID_AIR_EXP_SALES_ORD_FWD.equals(inputData.getString("jspId"))) { //항공수출판매오더포워딩관리
                        if(temp.getString("code").equals(OmConstants.ORD_TYPE_CD_EXP_SELL_FWD)
                                ) {
                                    retData.addLData(temp);
                                }
                   } else {
                        retData.addLData(temp);
                    }
                }
            }
            return retData;

        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustCtrtIsdOrdType()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
    /**
     * 내부 기본 판매오더 등록 아이템팝업 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveItemCdList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveItemCdList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveItemCdList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 내부 기본 판매오더 등록 가용재고 체크하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData confirmAvailStockBatch(LData inputData) throws LException {
        try{
            LMultiData mData = (LMultiData)inputData.get("IN_DS1");
            LData input = (LData)inputData.get("INPUT");
            LData paramData = null;
            LMultiData retData = null;
            LMultiData itemData = new LMultiData();
            if(mData != null && mData.getDataCount() > 0) {
                for(int i=0; i < mData.getDataCount(); i++) {
                    paramData = new LData();
                    paramData.setString("workPlCd"  , input.getString("workPlCd"));
                    paramData.setString("custCd"    , mData.getString("custCd", i));
                    paramData.setString("itemCd"    , mData.getString("basisItemCd", i));

                    paramData.setString("lineNo"    , mData.getString("lineNo", i));
                    paramData.setString("plantCd"   , mData.getString("plantCd", i));
                    paramData.setString("pculCd"    , mData.getString("pculCd", i));
                    paramData.setString("mnCd"  , mData.getString("mnCd", i));
                    paramData.setString("batCd"     , mData.getString("batNo", i));

                    if(mData.getString("custCd", i).equals(OmConstants.CUST_CO_CD_CB)) {
                        paramData.setString("itemGradeCd", mData.getString("col03", i)); // 재고구분(등급)
                        paramData.setString("col01", mData.getString("col01", i));       // 유효일자
                    }else{
                        paramData.setString("itemGradeCd", mData.getString("itemGradeCd", i));
                    }

                    if(mData.getString("custCd", i).equals(OmConstants.CUST_CO_CD_SD)) {
                        paramData.setString("lotNo", mData.getString("lotNo", i));
                    }else if(mData.getString("custCd", i).equals(OmConstants.CUST_CO_CD_MR)) {
                        String custMoveTypeCd = input.getString("custMoveTypeCd")==null?"":input.getString("custMoveTypeCd");
                        String lotable5 = "";
                        if("GR_VMI".equals(custMoveTypeCd)){
                            lotable5 = "VMI";
                        }else if ("GR_STOCK".equals(custMoveTypeCd)){
                            lotable5 = "STOCK";
                        }else{
                            lotable5 = "TR";
                        }
                        paramData.setString("lotable5"  , lotable5);
                    }

                    paramData.setString("prdtReqNo" , "");

                    retData = retrieveAvailStock(paramData);

                    if(retData != null && retData.getDataCount() > 0) {
                        LData avail = retData.getLData(0);
                        avail.setString("lineNo", mData.getString("lineNo", i));
                        itemData.addLData(avail);
                    }
                }
            }
            return itemData;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "confirmAvailStockBatch()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    public LData getBilgCustInfo(LData inputData) throws LException {
        LData retVal = null;
        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();
        try {
            LData bilg = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfo", inputData);
            if(bilg != null)  {
                retVal = new LData();
                retVal.setString("bilgCustCd", bilg.getString("bilgCustCd"));
                retVal.setString("sellDeptCd", bilg.getString("sellDeptCd"));

            }
            return retVal;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "confirmAvailStockBatch()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

    }

    public LData getBilgCustInfoInh(LData inputData) throws LException {
        LData retVal = null;
        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();
        try {
            LData bilg = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfoInh", inputData);
            
            LLog.debug.println(  this.getClass().getName() + "." + "getBilgCustInfoInh() inputData" + "=>" + inputData);
            
            //if( inputData.getString("rptCustCd").equals("E1011") && inputData.getString("divCode") != null &&  inputData.getString("divCode").equals("J120")) {
            //2017-03-31 Celllo 전환에 따른 divCode 조건 제거 : 장아름 대리요청
            if( inputData.getString("rptCustCd").equals("E1011") && inputData.getString("divCode") != null ) {
                bilg = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfoCiiInh", inputData);	
            }
            else if( inputData.getString("rptCustCd").equals("E2172") && inputData.getString("divCode") != null ) {
                bilg = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfoCiiInh", inputData);	
            }
            
            
            if("ERROR".equals(bilg.getString("bilgCustCd"))){
            	throw new LBizException("계약번호,청구고객,매출부서매핑오류-정산담당자에 문의하세요");
            }
            
            if(bilg != null)  {
                retVal = new LData();
                retVal.setString("bilgCustCd", bilg.getString("bilgCustCd"));
                retVal.setString("sellDeptCd", bilg.getString("sellDeptCd"));
                retVal.setString("ctrtNo", bilg.getString("ctrtNo"));
                if( inputData.getString("ordTypeCd") !=null && !"".equals(inputData.getString("ordTypeCd")))
                    retVal.setString("ordTypeCd", inputData.getString("ordTypeCd"));
                
                LData salesOfcrIdInfo = commonDao.executeQueryForSingle("select/sm/sm04/ctrtMngt/retrieveCntrInfo", retVal);
                retVal.setString("salesOfcrId", salesOfcrIdInfo.getString("salesOfcrId"));
            }

            return retVal;
            
        } catch (LBizException be) {
            throw be;    
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "getBilgCustInfoInh()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    public LData getBilgCustInfoFw(LData inputData) throws LException {
        LData retVal = null;
        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();
        try {
            LData bilg = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfoFw", inputData);
            
            if("ERROR".equals(bilg.getString("bilgCustCd"))){
    			//LData rslt = (LData)commonDao.executeUpdateProcedure("select/om/om02/salesOrd/callIsBilgCustSMS", inputData);			

            	throw new LBizException("계약번호,청구고객,매출부서매핑오류-정산담당자에 문의하세요");
            }
            
            if(bilg != null)  {
                retVal = new LData();
                retVal.setString("bilgCustCd", bilg.getString("bilgCustCd"));
                retVal.setString("sellDeptCd", bilg.getString("sellDeptCd"));
                retVal.setString("ctrtNo", bilg.getString("ctrtNo"));
//                LData salesOfcrIdInfo = commonDao.executeQueryForSingle("select/sm/sm04/ctrtMngt/retrieveCntrInfo", retVal);
//                retVal.setString("salesOfcrId", salesOfcrIdInfo.getString("salesOfcrId"));
            }
            return retVal;
            
        } catch (LBizException be) {
            throw be;               
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "getBilgCustInfoFw()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }    
    
    /**
     * 내부 기본 판매오더 등록 정보를 추가/수정/삭제하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData createIsdBasisSalesOrd(LMultiData inputData) throws LException {
        LMultiData SalesOrdMngtData = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData SalesOrdMngtListData = (LMultiData)inputData.get("IN_DS2",0 );

        LCommonDao dao = new LCommonDao();
        LCompoundDao dao2 = new LCompoundDao();
        laf.application.dao.LCompoundDao lCompoundDao = new laf.application.dao.LCompoundDao();
        try{
/*
 내부오더 중 기본 오더를 등록하고, 기본 작업 경로를 생성하며, 실행 오더를 분배한다.

계약고객코드, 오더관리실행부서코드, 수출입내수구분코드, 오더관리실행담당자ID를 주문담당자
기준 정보에서 조회하여 기준정보에 등록되지 않은 경우에는 오류를 발생시킨다.

판매오더번호를 채번한다.
'S' + 일련번호 (SQ_MA02001 시퀀스, 9자리를 맞추기 위해 앞에 '0'을 채운다.)

판매오더 헤더 정보를 Insert한다.
판매오더 라인아이템 정보를 Insert한다.

기본작업경로 생성을 실행한다.
실행오더분배를 실행한다. (판매오더번호, 작업경로순번, '01')

정상적으로 저장된 경우
판매오더번호,판매오더상태코드, 판매오더생성일자, 판매오더생성시각을 리턴한다.

사용 화면
<내부기본판매오더등록>
 */

            IWorkRouteMngt pbc2 = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);

/*
판매오더번호를 채번한다.
'S' + 일련번호 (SQ_MA02001 시퀀스, 9자리를 맞추기 위해 앞에 '0'을 채운다.)
*/
            LData input  = new LData();
            LData result = lCompoundDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);

            String salesOrdNo = result.getString("salesOrdNo");

            LData move = new LData();
            move.setString("dptArCd"            , SalesOrdMngtData.getString("dptArCd"          , 0));
            move.setString("dptArTypeCd"        , SalesOrdMngtData.getString("dptArTypeCd"      , 0));
            move.setString("arvArCd"            , SalesOrdMngtData.getString("arvArCd"          , 0));
            move.setString("arvArTypeCd"        , SalesOrdMngtData.getString("arvArTypeCd"      , 0));
            move.setString("expImpDomSctnCd"    , SalesOrdMngtData.getString("expImpDomSctnCd"  , 0));
            move.setString("custOrdTypeCd"      , "");
            move.setString("custMoveTypeCd"     , "");
            move.setString("ordTypeCd"          , SalesOrdMngtData.getString("ordTypeCd"        , 0));
            move.setString("rptCustCd"          , SalesOrdMngtData.getString("upperPtnCd"       , 0));
            move.setString("custOfCustCd"       , "");
            move.setString("selfGdsCd"          , "");

            String moveType = retrieveMoveType(move);

            GauceUtil.fillColValue(SalesOrdMngtData, "salesOrdNo"       , salesOrdNo);
            GauceUtil.fillColValue(SalesOrdMngtData, "custExprYn"       , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "clsExprYn"        , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "leadTimeExprYn"   , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "dtodYn"           , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "backOrdYn"        , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "aftOrdYn"         , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "salesOrdCnclYn"   , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "ltrmOrdYn"        , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "dcnctOrdYn"       , OmConstants.COMMON_N);
            GauceUtil.fillColValue(SalesOrdMngtData, "rptCustCd"        , SalesOrdMngtData.getString("upperPtnCd", 0));
            GauceUtil.fillColValue(SalesOrdMngtData, "moveTypeCd"       , moveType);
            GauceUtil.fillColValue(SalesOrdMngtData, "salesOrdStatCd"   , OmConstants.SALES_ORD_STAT_CD_02);

            GauceUtil.modiColValue(SalesOrdMngtListData, "salesOrdNo", salesOrdNo);

            LData paramData = new LData();
            paramData.setString("dptArCd"       , SalesOrdMngtData.getString("dptArCd"      , 0));
            paramData.setString("dptArTypeCd"   , SalesOrdMngtData.getString("dptArTypeCd"  , 0));
            paramData.setString("arvArCd"       , SalesOrdMngtData.getString("arvArCd"      , 0));
            paramData.setString("arvArTypeCd"   , SalesOrdMngtData.getString("arvArTypeCd"  , 0));
            paramData.setString("rptCustCd"     , SalesOrdMngtData.getString("rptCustCd"    , 0));
            paramData.setString("ordTypeCd"     , SalesOrdMngtData.getString("ordTypeCd"    , 0));
            paramData.setString("expImpDomSctnCd", SalesOrdMngtData.getString("expImpDomSctnCd" , 0));
            //2015-10-21, P1100, ordTypeCd - 3079, ordMngtExceDeptCd - 160050 변경 - CHG0037447
            //LLog.debug.println("SalesOrdMngtData LEEPJ==========>\n" + SalesOrdMngtData);
            paramData.setString("ordMngtExceDeptCd", SalesOrdMngtData.getString("ordMngtExceDeptCd" , 0));

            LData exceDept = setOrdMngtExceDeptCd(paramData);
            if(exceDept == null || exceDept.getString("result").equals("E") ){
                throw new LBizException("배차센터 세팅오류");
            } else {
                GauceUtil.fillColValue(SalesOrdMngtData, "tranPlanCntrCd"   , exceDept.getString("tranPlanCntrCd"));
            }

/*
판매오더 헤더 정보를 Insert한다.
*/

            paramData.setString("corpCd", SalesOrdMngtData.getString("corpCd", 0));
            paramData.setString("moveTypeCd", moveType);

            // 화면에서 등록시 생산처코드 세팅 후 청구고객 및 매출부서 세팅
            if(SalesOrdMngtListData.getDataCount() > 0)
                paramData.setString("plantCd",          SalesOrdMngtListData.getString("plantCd",0));
            else
                paramData.setString("plantCd",          "");

            
            /*
            LData bilgCustInfo = getBilgCustInfo(paramData);
            if(bilgCustInfo != null) {
                GauceUtil.modiColValue(SalesOrdMngtData, "bilgCustCd"   , bilgCustInfo.getString("bilgCustCd"));
                GauceUtil.modiColValue(SalesOrdMngtData, "sellDeptCd"   , bilgCustInfo.getString("sellDeptCd"));
            }
            */
            
            //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoInh(paramData);

            if( ctrtCustInfo != null ) {
            	GauceUtil.modiColValue(SalesOrdMngtData, "ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
            	GauceUtil.modiColValue(SalesOrdMngtData, "bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
            	GauceUtil.modiColValue(SalesOrdMngtData, "sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
            	GauceUtil.modiColValue(SalesOrdMngtData, "salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
            }                
            //--------------------------------------------------------------------------------------------------

            LLog.debug.println("SalesOrdMngtData==========>\n" + SalesOrdMngtData);
            LLog.debug.println("SalesOrdMngtListData==========>\n" + SalesOrdMngtListData);
            dao2.setInsertQuery("cud/om/tb_om02001/createTbOm02001");
            dao2.addWithJobType(SalesOrdMngtData);
            dao2.executeUpdate();

            if(SalesOrdMngtData.getString("oceanAirSctnCd"  , 0).length() > 0){
                dao2.setInsertQuery("cud/om/tb_om02003/createSalesOrd");
                dao2.addWithJobType(SalesOrdMngtData);
                dao2.executeUpdate();
            }

/*
판매오더 라인아이템 정보를 Insert한다.
*/
            GauceUtil.fillColValue(SalesOrdMngtListData, "dptArCd"          , SalesOrdMngtData.getString("dptArCd"      , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "dptArTypeCd"      , SalesOrdMngtData.getString("dptArTypeCd"  , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "dptArZipCd"       , SalesOrdMngtData.getString("dptArZipCd"   , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "dptArZipAddr"     , SalesOrdMngtData.getString("dptArZipAddr" , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "dptArDtlAddr"     , SalesOrdMngtData.getString("dptArDtlAddr" , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "arvArCd"          , SalesOrdMngtData.getString("arvArCd"      , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "arvArTypeCd"      , SalesOrdMngtData.getString("arvArTypeCd"  , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "arvArZipCd"       , SalesOrdMngtData.getString("arvArZipCd"   , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "arvArZipAddr"     , SalesOrdMngtData.getString("arvArZipAddr" , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "arvArDtlAddr"     , SalesOrdMngtData.getString("arvArDtlAddr" , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "strtReqYmd"       , SalesOrdMngtData.getString("strtReqYmd"   , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "strtReqHm"        , SalesOrdMngtData.getString("strtReqHm"    , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "aptdReqYmd"       , SalesOrdMngtData.getString("aptdReqYmd"   , 0));
            GauceUtil.fillColValue(SalesOrdMngtListData, "aptdReqHm"        , SalesOrdMngtData.getString("aptdReqHm"    , 0));

            dao2.setInsertQuery("cud/om/tb_om02002/createTbOm02002");
            GauceUtil.modiColValue(SalesOrdMngtListData, "GauceJobType", GauceDataRow.TB_JOB_INSERT);
            dao2.addWithJobType(SalesOrdMngtListData);

            dao2.executeUpdate();

            LData param = new LData();
            param.setString("salesOrdNo", SalesOrdMngtData.getString("salesOrdNo", 0));
            param.setString("mdfDlySctnCd", "");
            param.setString("regrId", SalesOrdMngtData.getString("regrId", 0));
            param.setString("mdfrId", SalesOrdMngtData.getString("mdfrId", 0));
            param.setString("mdfrId", SalesOrdMngtData.getString("mdfrId", 0));
            param.set("LCompoundDao", lCompoundDao);
            setSalesOrdHistory(param);

/*
기본작업경로 생성을 실행한다.
                  sales_ord_no
                , work_route_seq
                , ORD_DIV_DGR_CNT
                , dpt_ar_cd
                , dpt_ar_zip_cd
                , dpt_ar_zip_addr
                , dpt_ar_dtl_addr
                , arv_ar_cd
                , arv_ar_zip_cd
                , arv_ar_zip_addr
                , arv_ar_dtl_addr
                , strt_req_ymd
                , strt_req_hm
                , aptd_req_ymd
                , aptd_req_hm

*/
//          기존 노스케스코그 수입인경우 에서 국내수입조달정상출고운송인 경우로 변경
//          if(!(SalesOrdMngtData.getString("rptCustCd", 0).equals(OmConstants.CUST_CO_CD_NC) && SalesOrdMngtData.getString("expImpDomSctnCd", 0).equals(OmConstants.EXP_IMP_INCOME) ) ) {
            if(!OmConstants.ORD_TYPE_CD_DOM_IMP_SUPPLY_OUTPUT_TRAN.equals(SalesOrdMngtData.getString("ordTypeCd", 0))) {
                LData workRoute = new LData();
                workRoute.setString("salesOrdNo",   salesOrdNo);
                workRoute.setString("dptArCd",      SalesOrdMngtData.getString("dptArCd",   0));
                workRoute.setString("dptArTypeCd",  SalesOrdMngtData.getString("dptArTypeCd",0));
                workRoute.setString("dptArZipCd",   SalesOrdMngtData.getString("dptArZipCd",    0));
                workRoute.setString("dptArZipAddr", SalesOrdMngtData.getString("dptArZipAddr",  0));
                workRoute.setString("dptArDtlAddr", SalesOrdMngtData.getString("dptArDtlAddr",  0));
                workRoute.setString("arvArCd",      SalesOrdMngtData.getString("arvArCd",   0));
                workRoute.setString("arvArTypeCd",  SalesOrdMngtData.getString("arvArTypeCd",0));
                workRoute.setString("arvArZipCd",   SalesOrdMngtData.getString("arvArZipCd",    0));
                workRoute.setString("arvArZipAddr", SalesOrdMngtData.getString("arvArZipAddr",  0));
                workRoute.setString("arvArDtlAddr", SalesOrdMngtData.getString("arvArDtlAddr",  0));
                workRoute.setString("strtReqYmd",   SalesOrdMngtData.getString("strtReqYmd",0));
                workRoute.setString("strtReqHm",    SalesOrdMngtData.getString("strtReqHm", 0));
                workRoute.setString("aptdReqYmd",   SalesOrdMngtData.getString("aptdReqYmd",0));
                workRoute.setString("aptdReqHm",    SalesOrdMngtData.getString("aptdReqHm", 0));
                workRoute.setString("loadDlyYn",    SalesOrdMngtData.getString("loadDlyYn", 0));
                workRoute.setString("loadDlyRltdSalesOrdNo",    SalesOrdMngtData.getString("loadDlyRltdSalesOrdNo", 0));
                workRoute.setString("regrId",       SalesOrdMngtData.getString("regrId",    0));
                workRoute.setString("mdfrId",       SalesOrdMngtData.getString("mdfrId",    0));
                workRoute.set("LCompoundDao", lCompoundDao);

                pbc2.createBasisWorkRoute(workRoute, SalesOrdMngtListData);//기본작업경로 생성
            }
/*
실행오더분배를 실행한다. (판매오더번호, 작업경로순번, '01')
*/
            input.setString("salesOrdNo", salesOrdNo);
            LMultiData dataHolder2 = new LMultiData();
            dataHolder2.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveIsdBasisCopyTgtOrd", input));
            dataHolder2.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveIsdBasisCopyTgtOrdDetail", input));

            return dataHolder2;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createIsdBasisSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 판매오더검색팝업 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveSalesOrdSearchList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            String queryId = "D";
            //상세조회인지를 구분함
            if ( queryId.equals(inputData.get("queryGubun")) ) {

                LData lData = retrieveIndirDelivOrdAccessAuth(inputData);
                inputData.setString("indirDelivYn", lData.getString("indirDelivYn"));
                queryId = "select/om/om02/salesOrd/retrieveSalesOrdSearchList";
            }
            else {
                retrieveOrdAccessAuth(inputData);
                queryId = "select/om/om02/salesOrd/retrieveSalesOrdSearchListBasic";
            }
            return dao.executeQuery(queryId, inputData);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveSalesOrdSearchList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 판매오더수동완료대상을 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveSalesOrdManualCmpt(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            String queryId = "D";
            //상세조회인지를 구분함
            if ( queryId.equals(inputData.get("queryGubun")) ) {

                queryId = "select/om/om02/salesOrd/retrieveSalesOrdManualCmpt";
            }
            else {
                retrieveOrdAccessAuth(inputData);
                queryId = "select/om/om02/salesOrd/retrieveSalesOrdManualCmptBasic";
            }

            return dao.executeQuery(queryId, inputData);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveSalesOrdManualCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 판매오더수동완료 처리를 하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void saveSalesOrdManualCmpt(LMultiData inputData) throws LException {

        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

        try{
            LMultiData salesOrd         = (LMultiData)inputData.get("IN_DS1",0);
            LData      param            = (LData)     inputData.get("INPUT",0);

            LMultiData cmptData         = new LMultiData();
            
            if(salesOrd != null && salesOrd.getDataCount() > 0) {
                for(int i=0; i<salesOrd.getDataCount(); i++){

                    boolean exist = false;
                    for(int j=0; j<cmptData.getDataCount(); j++) {
                        if(salesOrd.getString("salesOrdNo", i).equals(cmptData.getString("salesOrdNo", j))) {
                            exist = true;
                            break;
                        }
                    }

                    if(!exist) {
                        LData lData = new LData();
                        lData.setString("salesOrdNo", salesOrd.getString("salesOrdNo", i));
                        lData.setString("mdfrId"    , param.getString("mdfrId"));
                        cmptData.addLData(lData);
                    }
                }
            }

            LLog.debug.println("cmptData " + cmptData);

            if(cmptData.getDataCount() > 0) {
                dao.add("cud/om/tb_om02001/updateSalesOrdManualCmpt", cmptData);
                dao.executeUpdate();
            }

            LLog.debug.println("@@@@@@@@@@@@@ end saveSalesOrdManualCmpt @@");

        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveSalesOrdManualCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    public LMultiData retrieveSalesOrdPartCmptList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            String queryId = "D";
            LLog.debug.println("@@@@@@@@@@@\n\nqueryGubun "+inputData.get("queryGubun"));
            LLog.debug.println("@@@@@@@@@@@\n\nsalesOrdCmptSctnCd "+inputData.get("salesOrdCmptSctnCd"));
            //상세조회인지를 구분함
            if ( queryId.equals(inputData.get("queryGubun")) ) {
                queryId = "select/om/om02/salesOrd/retrieveSalesOrdPartCmptList";

                if ( inputData.getString("salesOrdCmptSctnCd") != null) {
                    if ( "01".equals(inputData.getString("salesOrdCmptSctnCd")) ) {// 완료구분코드 미완료
                        inputData.setString("noCmpt", "01");
                    }
                    else if ( "02".equals(inputData.getString("salesOrdCmptSctnCd")) ) {// 완료구분코드 부분완료
                        inputData.setString("partCmpt", "02");
                    }
                    else {//전체는 부분완료이고 미완료인것
                        inputData.setString("total", "total");
                        inputData.setString("cmpt", "02");
                    }
                }
            }
            else {
                queryId = "select/om/om02/salesOrd/retrieveSalesOrdPartCmptListBasic";
            }

            return dao.executeQuery(queryId, inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveSalesOrdPartCmptList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    public LMultiData retrieveMdfDlySalesOrdList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            String queryId = "D";
            //LLog.debug.println("@@@@@@@@@@@\n\n"+inputData.get("queryGubun"));
            //상세조회인지를 구분함
            if ( queryId.equals(inputData.get("queryGubun")) ) {
                queryId = "select/om/om02/salesOrd/retrieveMdfDlySalesOrdList";
            }
            else {
                queryId = "select/om/om02/salesOrd/retrieveMdfDlySalesOrdListBasic";
            }

            return dao.executeQuery(queryId, inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveMdfDlySalesOrdList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 해상수입판매오더 포워딩 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveOceanImpSalesOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{
            LLog.debug.println("@@@@입력값"+inputData);
            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpSalesOrd", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpSalesOrdItemList", inputData));
            dataHolder.add("IN_DS3", dao.executeQuery("select/om/om03/workRouteMngt/retrieveTplSalesOrdDivHist", inputData));

            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveOceanImpSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 해상수입판매오더 포워딩 정보를 추가/수정/삭제하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     * 전성연
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveOceanImpSalesOrd(LMultiData inputData) throws LException {
        LMultiData SalesOrdMngtData = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData SalesOrdMngtListData = (LMultiData)inputData.get("IN_DS2",0 );
        LData reqData = (LData)inputData.get("INPUT", 0);

        LData param = new LData();
        laf.application.dao.LCommonDao  commonDao   = new laf.application.dao.LCommonDao();
        laf.application.dao.LCommonDao  commonDao1  = new laf.application.dao.LCommonDao();
        laf.application.dao.LCommonDao  commonDao2  = new laf.application.dao.LCommonDao();
        laf.application.dao.LCompoundDao cDao = new laf.application.dao.LCompoundDao();
        LCommonDao dao = new LCommonDao();
        LCompoundDao dao2 = new LCompoundDao();
        try{

/*
판매오더번호를 채번한다.
'S' + 일련번호 (SQ_MA02001 시퀀스, 9자리를 맞추기 위해 앞에 '0'을 채운다.)
*/
            int jobType = SalesOrdMngtData.getInt("GauceJobType", 0);
            String salesOrdNo = "";
            LData input = new LData();

            if(jobType == GauceDataRow.TB_JOB_INSERT) {
                LData salesOrd = new LData();
                
                salesOrd.setString("corpCd", SalesOrdMngtData.getString("corpCd", 0));
                salesOrd.setString("dptArCd", SalesOrdMngtData.getString("dptArCd", 0));
                salesOrd.setString("arvArCd", SalesOrdMngtData.getString("arvArCd", 0));
            //    salesOrd.setString("dptArTypeCd", SalesOrdMngtData.getString("dptArTypeCd", 0));
                salesOrd.setString("dptArTypeCd", SalesOrdMngtData.getString("dptArTypeCd", 0));
                salesOrd.setString("arvArTypeCd", SalesOrdMngtData.getString("arvArTypeCd", 0));
                salesOrd.setString("ordTypeCd", SalesOrdMngtData.getString("ordTypeCd", 0));
                salesOrd.setString("ctrtCustCd", SalesOrdMngtData.getString("ctrtCustCd", 0));
                salesOrd.setString("rptCustCd", SalesOrdMngtData.getString("ctrtCustCd", 0));
                salesOrd.setString("ordTypeCd", SalesOrdMngtData.getString("ordTypeCd", 0));
                salesOrd.setString("ordMngtExceDeptCd", SalesOrdMngtData.getString("ordMngtExceDeptCd", 0));
                salesOrd.setString("expImpDomSctnCd", OmConstants.EXP_IMP_INCOME);
                //2014-06-12 청구부서 화면에서 넘어온 값으로 iscomm_getbilgcustinfo_fw_fn 인수로 넘김
                salesOrd.setString("bilgCustCd", SalesOrdMngtData.getString("bilgCustCd", 0));
                
                LLog.debug.println("exceDept"+salesOrd);
                LLog.debug.println("SalesOrdMngtData마스터"+SalesOrdMngtData);
                String ordMngtExceDeptCd = SalesOrdMngtData.getString("ordMngtExceDeptCd", 0);
                if(ordMngtExceDeptCd == null || ordMngtExceDeptCd.length() < 1){
                    LData exceDept = setOrdMngtExceDeptCd(salesOrd);
                    LLog.debug.println("exceDept"+exceDept);
                    if(exceDept == null || exceDept.getString("result").equals("E") ){
                        throw new LBizException("오더관리실행부서 세팅오류");
                    } else {
                        GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceDeptCd", exceDept.getString("ordMngtExceDeptCd"));
                        GauceUtil.modiColValue(SalesOrdMngtData, "tranPlanCntrCd", exceDept.getString("tranPlanCntrCd"));
                    }
                }

                param = new LData();
                param.setString("ordChrgDeptCd"     , SalesOrdMngtData.getString("ordMngtExceDeptCd", 0));
                param.setString("custCd"            , SalesOrdMngtData.getString("ctrtCustCd", 0));
                param.setString("expImpDomSctnCd"   , "02");
                LLog.debug.println("param"+param);
                LData exceOfcr = commonDao1.executeQueryForSingle("select/om/om05/orderUserMngt/retrieveOrdMngtExceOfceId", param);
                LLog.debug.println("exceOfcr"+exceOfcr);
                if(exceOfcr != null && exceOfcr.getString("userId") != null && !exceOfcr.getString("userId").equals("")) {
                    GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceOfcrId", exceOfcr.getString("userId"));
                }

                commonDao2 = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);
                LData result = commonDao2.executeQueryForSingle();
                salesOrdNo = result.getString("salesOrdNo");

                GauceUtil.modiColValue(SalesOrdMngtData, "salesOrdNo", salesOrdNo);
                GauceUtil.modiColValue(SalesOrdMngtListData, "salesOrdNo", salesOrdNo);
                GauceUtil.modiColValue(SalesOrdMngtData, "salesOrdStatCd", OmConstants.SALES_ORD_STAT_CD_02);
                
                //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
                salesOrd.setString("areaCd", SalesOrdMngtData.getString("polCd" , 0)); // 향 정보 : 수출:POD, 수입:POL
                salesOrd.setString("salesOfcrId", SalesOrdMngtData.getString("salesOfcrId" , 0)); // 영업담당자 id
                LData ctrtCustInfo = getBilgCustInfoFw(salesOrd);

                if( ctrtCustInfo != null ) {
                	GauceUtil.modiColValue(SalesOrdMngtData, "ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
                	GauceUtil.modiColValue(SalesOrdMngtData, "bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
                	GauceUtil.modiColValue(SalesOrdMngtData, "sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
                	//GauceUtil.modiColValue(SalesOrdMngtData, "salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
                }                
                //--------------------------------------------------------------------------------------------------
 
            } else {
                salesOrdNo = SalesOrdMngtData.getString("salesOrdNo", 0);
            }
            GauceUtil.modiColValue(SalesOrdMngtData, "oceanAirSctnCd", OmConstants.OCEAN_AIR_SCTN_CD_SEA);
            GauceUtil.modiColValue(SalesOrdMngtData, "expImpDomSctnCd", OmConstants.EXP_IMP_INCOME);
 
            LLog.debug.println("\n\n\n");
            LLog.debug.println(SalesOrdMngtData.getLData(0));
            LLog.debug.println("\n\n\n");
            LLog.debug.println(SalesOrdMngtListData.getLData(0));
            LLog.debug.println("\n\n\n");
/*
Tpl 해상수출판매오더 포워딩 헤더 정보를 Insert한다.
*/
            if(jobType == GauceDataRow.TB_JOB_INSERT) {
                LLog.debug.println("해상수입신규데이터"+SalesOrdMngtData+SalesOrdMngtListData);
                dao2.setInsertQuery("cud/om/tb_om02001/createOceanImpSalesOrd");
                dao2.addWithJobType(SalesOrdMngtData);

                dao2.setInsertQuery("cud/om/tb_om02003/createOceanImpSalesOrd");
                dao2.addWithJobType(SalesOrdMngtData);
/*
                dao2.setInsertQuery("cud/om/tb_om02019/createOceanImpSalesOrd");
                dao2.addWithJobType(SalesOrdMngtData);
*/
                dao2.setInsertQuery("cud/om/tb_om02002/createOceanImpSalesOrdItem");
                dao2.addWithJobType(SalesOrdMngtListData);

                dao2.executeUpdate();

                LData paramData = new LData();
                paramData.setString("salesOrdNo", salesOrdNo);
                paramData.setString("salesOrdMdfReason", reqData.getString("salesOrdMdfReason"));
                paramData.setString("regrId", SalesOrdMngtData.getString("regrId"   , 0));
                paramData.setString("mdfrId", SalesOrdMngtData.getString("mdfrId"   , 0));
                paramData.set("LCompoundDao", cDao);

                setSalesOrdHistory(paramData);

            } else if(jobType == GauceDataRow.TB_JOB_UPDATE) {
                //수정모듈 호출
                LLog.debug.println("해상수입 수정모듈시작"+SalesOrdMngtData+SalesOrdMngtListData);
                String salesOrdStatCd = SalesOrdMngtData.getString("salesOrdStatCd" , 0);
                String salesOrdCnclYn = SalesOrdMngtData.getString("salesOrdCnclYn" , 0);
                salesOrdNo            = SalesOrdMngtData.getString("salesOrdNo"     , 0);

                if(salesOrdStatCd.equals(OmConstants.ORD_STAT_CD_COMP) ) {
                    throw new LBizException("판매오더가 완료되어 더 이상 진행할 수 없습니다.");

                } else if( salesOrdCnclYn.equals(OmConstants.COMMON_Y)) {
                    throw new LBizException("판매오더가 취소되어 더 이상 진행할 수 없습니다.");
                }
                LData check = checkOceanImpSalesOrdUpdate(SalesOrdMngtData, SalesOrdMngtListData);
                if(check != null) {
                    LData salesOrd = new LData();
                    salesOrd.setString("corpCd", SalesOrdMngtData.getString("corpCd", 0));
                    salesOrd.setString("dptArCd", SalesOrdMngtData.getString("dptArCd", 0));
                    salesOrd.setString("arvArCd", SalesOrdMngtData.getString("arvArCd", 0));
                //    salesOrd.setString("dptArTypeCd", SalesOrdMngtData.getString("dptArTypeCd", 0));
                    salesOrd.setString("dptArTypeCd", SalesOrdMngtData.getString("dptArTypeCd", 0));
                    salesOrd.setString("arvArTypeCd", SalesOrdMngtData.getString("arvArTypeCd", 0));
                    salesOrd.setString("ordTypeCd", SalesOrdMngtData.getString("ordTypeCd", 0));
                    salesOrd.setString("ctrtCustCd", SalesOrdMngtData.getString("ctrtCustCd", 0));
                    salesOrd.setString("rptCustCd", SalesOrdMngtData.getString("ctrtCustCd", 0));
                    salesOrd.setString("ordTypeCd", SalesOrdMngtData.getString("ordTypeCd", 0));
                    salesOrd.setString("ordMngtExceDeptCd", SalesOrdMngtData.getString("ordMngtExceDeptCd", 0));
                    salesOrd.setString("expImpDomSctnCd", OmConstants.EXP_IMP_INCOME);
                    //2014-06-12 청구부서 화면에서 넘어온 값으로 iscomm_getbilgcustinfo_fw_fn 인수로 넘김
                    salesOrd.setString("bilgCustCd", SalesOrdMngtData.getString("bilgCustCd", 0));
                    
                    //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
                    salesOrd.setString("areaCd", SalesOrdMngtData.getString("polCd" , 0)); // 향 정보 : 수출:POD, 수입:POL
                    salesOrd.setString("salesOfcrId", SalesOrdMngtData.getString("salesOfcrId" , 0));
                    LData ctrtCustInfo1 = getBilgCustInfoFw(salesOrd);

                    if( ctrtCustInfo1 != null ) {
                    	GauceUtil.modiColValue(SalesOrdMngtData, "ctrtNo",      ctrtCustInfo1.getString("ctrtNo"));
                    	GauceUtil.modiColValue(SalesOrdMngtData, "bilgCustCd",  ctrtCustInfo1.getString("bilgCustCd"));
                    	GauceUtil.modiColValue(SalesOrdMngtData, "sellDeptCd",  ctrtCustInfo1.getString("sellDeptCd"));
                    	//GauceUtil.modiColValue(SalesOrdMngtData, "salesOfcrId", ctrtCustInfo1.getString("salesOfcrId"));
                    }                
                    //--------------------------------------------------------------------------------------------------

                    LLog.debug.println("exceDept"+salesOrd);
                    LLog.debug.println("SalesOrdMngtData마스터"+SalesOrdMngtData);
                    String ordMngtExceDeptCd = SalesOrdMngtData.getString("ordMngtExceDeptCd", 0);
                    if(ordMngtExceDeptCd == null || ordMngtExceDeptCd.length() < 1){
                        LData exceDept = setOrdMngtExceDeptCd(salesOrd);
                        LLog.debug.println("exceDept"+exceDept);
                        if(exceDept == null || exceDept.getString("result").equals("E") ){
                            throw new LBizException("오더관리실행부서 세팅오류");
                        } else {
                            GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceDeptCd", exceDept.getString("ordMngtExceDeptCd"));
                            GauceUtil.modiColValue(SalesOrdMngtData, "tranPlanCntrCd", exceDept.getString("tranPlanCntrCd"));
                        }
                    }

                    param = new LData();
                    param.setString("ordChrgDeptCd"     , SalesOrdMngtData.getString("ordMngtExceDeptCd", 0));
                    param.setString("custCd"            , SalesOrdMngtData.getString("ctrtCustCd", 0));
                    param.setString("expImpDomSctnCd"   , "02");
                    LLog.debug.println("param"+param);
                    LData exceOfcr = commonDao1.executeQueryForSingle("select/om/om05/orderUserMngt/retrieveOrdMngtExceOfceId", param);
                    LLog.debug.println("exceOfcr"+exceOfcr);
                    if(exceOfcr != null && exceOfcr.getString("userId") != null && !exceOfcr.getString("userId").equals("")) {
                        GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceOfcrId", exceOfcr.getString("userId"));
                    }
                    dao2.setUpdateQuery("cud/om/tb_om02001/updateOceanImpSalesOrd");
                    dao2.addWithJobType(SalesOrdMngtData);

                    dao2.setUpdateQuery("cud/om/tb_om02003/updateOceanImpSalesOrd");
                    dao2.addWithJobType(SalesOrdMngtData);

    //              dao2.setUpdateQuery("cud/om/tb_om02019/updateSalesOrdBooking");
    //              dao2.addWithJobType(SalesOrdMngtData);

                    dao2.setInsertQuery("cud/om/tb_om02002/createOceanImpSalesOrdItem");
                    dao2.setUpdateQuery("cud/om/tb_om02002/updateOceanImpSalesOrd");
                    dao2.setDeleteQuery("cud/om/tb_om02002/deleteTplOceanExpSalesOrdFwd");
                    dao2.addWithJobType(SalesOrdMngtListData);
                    dao2.executeUpdate();

                    LData paramData = new LData();
                    paramData.setString("salesOrdNo", salesOrdNo);
                    paramData.setString("salesOrdMdfReason", reqData.getString("salesOrdMdfReason"));
                    paramData.setString("regrId", SalesOrdMngtData.getString("regrId"   , 0));
                    paramData.setString("mdfrId", SalesOrdMngtData.getString("mdfrId"   , 0));
                    paramData.set("LCompoundDao", cDao);

                    setSalesOrdHistory(paramData);

//class 2 변경인 경우  포워딩 실행오더 수정 전송
                    if(check.getBoolean("case2") ){
                        if(SalesOrdMngtData.getString("fwdEoNo" , 0) != null && !SalesOrdMngtData.getString("fwdEoNo"   , 0).equals("")) {
                            IOrdDivMngt divPbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
                            paramData.setString("salesOrdNo", salesOrdNo);
                            paramData.setString("trmsSctnCd", "U");
                            paramData.set("LCompoundDao", cDao);

                            divPbc.divideFwdEo(paramData);
                        }
                    }

                    IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);

/*  class 3 변경인 경우  작업경로가 생성된 라인아이템을 식별한 후
                        모든 작업경로를 삭제 -> 작업경로가 생성되어 있었던 라인아이템에 대해 기본작업경로 재생성.
*/
                    if(check.getBoolean("case3") ){
                        LMultiData itemData = commonDao.executeQuery("select/om/om03/workRouteMngt/retrieveTplWorkRouteItemList", paramData);
                        LMultiData items = null;
                        if(itemData != null && itemData.getDataCount() > 0) {
                            LMultiData params = new LMultiData();
                            params.add("IN_DS1", itemData);
                            params.add("INPUT", paramData);
                            params.add("LCompoundDao", cDao);

                            workPbc.deleteWorkRoute(params);
                            for(int i=0; i < itemData.getDataCount(); i++) {
                                for(int j=0; j < SalesOrdMngtListData.getDataCount(); j++ ) {
                                    LData master = new LData();
                                    LData item = new LData();
                                    items = new LMultiData();

                                    if(itemData.getString("lineNo", i).equals(SalesOrdMngtListData.getString("lineNo", j))) {
                                        master.setString("salesOrdNo"   , salesOrdNo);
                                        master.setString("lineNo"       , itemData.getString("lineNo",      i));
                                        master.setString("ordTypeCd"    , SalesOrdMngtData.getString("ordTypeCd", 0));
                                        master.setString("dptArCd"      , SalesOrdMngtListData.getString("dptArCd",     j));
                                        master.setString("dptArTypeCd"  , SalesOrdMngtListData.getString("dptArTypeCd", j));
                                        master.setString("dptArZipCd"   , SalesOrdMngtListData.getString("dptArZipCd",  j));
                                        master.setString("dptArZipAddr" , SalesOrdMngtListData.getString("dptArZipAddr",j));
                                        master.setString("dptArDtlAddr" , SalesOrdMngtListData.getString("dptArDtlAddr",j));
                                        master.setString("arvArCd"      , SalesOrdMngtListData.getString("arvArCd",     j));
                                        master.setString("arvArTypeCd"  , SalesOrdMngtListData.getString("arvArTypeCd", j));
                                    //  master.setString("bookingNo"    , SalesOrdMngtData.getString("bookingNo",       0));
                                        master.setString("strtReqYmd"   , SalesOrdMngtListData.getString("strtReqYmd",  j));
                                        master.setString("strtReqHm"    , SalesOrdMngtListData.getString("strtReqHm",   j));
                                        master.setString("aptdReqYmd"   , SalesOrdMngtListData.getString("aptdReqYmd",  j));
                                        master.setString("aptdReqHm"    , SalesOrdMngtListData.getString("aptdReqHm",   j));
                                        master.setString("regrId"       , SalesOrdMngtData.getString("regrId",          0));
                                        master.setString("mdfrId"       , SalesOrdMngtData.getString("mdfrId",          0));

                                        item.setString("salesOrdNo"     , salesOrdNo);
                                        item.setString("lineNo"         , SalesOrdMngtListData.getString("lineNo",      j));
                                        item.setString("custCd"         , SalesOrdMngtListData.getString("custCd",      j));
                                        item.setString("itemCd"         , SalesOrdMngtListData.getString("itemCd",      j));
                                        item.setString("basisUnitCd"    , SalesOrdMngtListData.getString("basisUnitCd", j));
                                        item.setDouble("ordQty"         , SalesOrdMngtListData.getDouble("ordQty",      j));
                                        item.setString("qtyUnitCd"      , SalesOrdMngtListData.getString("qtyUnitCd",   j));
                                        item.setDouble("ordWgt"         , SalesOrdMngtListData.getDouble("ordWgt",      j));
                                        item.setString("wgtUnitCd"      , SalesOrdMngtListData.getString("wgtUnitCd",   j));
                                        item.setDouble("ordCbm"         , SalesOrdMngtListData.getDouble("ordCbm",      j));
                                        item.setString("dptArCd"        , SalesOrdMngtListData.getString("dptArCd",     j));
                                        item.setString("dptArTypeCd"    , SalesOrdMngtListData.getString("dptArTypeCd", j));
                                        item.setString("arvArCd"        , SalesOrdMngtListData.getString("arvArCd",     j));
                                        item.setString("arvArTypeCd"    , SalesOrdMngtListData.getString("arvArTypeCd", j));
                                        item.setString("aptdReqYmd"     , SalesOrdMngtListData.getString("aptdReqYmd",  j));
                                        item.setString("aptdReqHm"      , SalesOrdMngtListData.getString("aptdReqHm",   j));
                                        item.setString("regrId"         , SalesOrdMngtData.getString("regrId",          0 ));
                                        item.setString("mdfrId"         , SalesOrdMngtData.getString("mdfrId",          0 ));
                                        items.addLData(item);

                                        master.set("LCompoundDao", cDao);
                                        workPbc.createBasisWorkRoute(master, items);
                                    }
                                }
                            }
                        }
                    }

/*class 4 변경인 경우  변경된 라인아이템이 작업경로가 생성된 아이템인 경우 : 작업경로 삭제 -> 기본작업경로 재생성.
                    단, 라인삭제인 경우 기본작업경로 재생성 안함.*/

                    if(SalesOrdMngtListData != null && SalesOrdMngtListData.getDataCount() > 0) {
                        for(int i=0; i < SalesOrdMngtListData.getDataCount(); i++) {
                            LData check2 = checkOceanImpSalesOrdItemUpdate(SalesOrdMngtData, SalesOrdMngtListData.getLData(i));
                            if(check2.getBoolean("case4") ){
                                if(!SalesOrdMngtListData.getString("updFlag", i).equals("U")) {//그리드의 변경사항이 있는 경우
                                    if(SalesOrdMngtListData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                                    || SalesOrdMngtListData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE) {
                                        LData itemData = new LData();
                                        itemData.setString("salesOrdNo", salesOrdNo);
                                        itemData.setString("lineNo", SalesOrdMngtListData.getString("lineNo", i));
                                        LMultiData workRouteItem = commonDao.executeQuery("select/om/om03/workRouteMngt/retrieveTplWorkRouteItemList", itemData);

                                        if(workRouteItem != null && workRouteItem.getDataCount() > 0) {
                                            LMultiData params = new LMultiData();
                                            params.add("IN_DS1", workRouteItem);
                                            params.add("INPUT", paramData);
                                            params.add("LCompoundDao", cDao);

                                            workPbc.deleteWorkRoute(params);

                                            if(SalesOrdMngtListData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE) {
                                                LData master = new LData();
                                                LData item = new LData();
                                                LMultiData items = new LMultiData();

                                                master.setString("salesOrdNo"   , salesOrdNo);
                                                master.setString("lineNo"       , SalesOrdMngtListData.getString("lineNo",      i));
                                                master.setString("ordTypeCd"    , SalesOrdMngtData.getString("ordTypeCd", 0));
                                                master.setString("dptArCd"      , SalesOrdMngtListData.getString("dptArCd",     i));
                                                master.setString("dptArTypeCd"  , SalesOrdMngtListData.getString("dptArTypeCd", i));
                                                master.setString("dptArZipCd"   , SalesOrdMngtListData.getString("dptArZipCd",  i));
                                                master.setString("dptArZipAddr" , SalesOrdMngtListData.getString("dptArZipAddr",i));
                                                master.setString("dptArDtlAddr" , SalesOrdMngtListData.getString("dptArDtlAddr",i));
                                                master.setString("arvArCd"      , SalesOrdMngtListData.getString("arvArCd",     i));
                                                master.setString("arvArTypeCd"  , SalesOrdMngtListData.getString("arvArTypeCd", i));
                                                master.setString("strtReqYmd"   , SalesOrdMngtListData.getString("strtReqYmd",  i));
                                                master.setString("strtReqHm"    , SalesOrdMngtListData.getString("strtReqHm",   i));
                                                master.setString("aptdReqYmd"   , SalesOrdMngtListData.getString("aptdReqYmd",  i));
                                                master.setString("aptdReqHm"    , SalesOrdMngtListData.getString("aptdReqHm",   i));
                                                master.setString("regrId"       , SalesOrdMngtData.getString("regrId",          0));
                                                master.setString("mdfrId"       , SalesOrdMngtData.getString("mdfrId",          0));

                                                item.setString("salesOrdNo"     , salesOrdNo);
                                                item.setString("lineNo"         , SalesOrdMngtListData.getString("lineNo",      i));
                                                item.setString("custCd"         , SalesOrdMngtListData.getString("custCd",      i));
                                                item.setString("itemCd"         , SalesOrdMngtListData.getString("itemCd",      i));
                                                item.setString("basisUnitCd"    , SalesOrdMngtListData.getString("basisUnitCd", i));
                                                item.setDouble("ordQty"         , SalesOrdMngtListData.getDouble("ordQty",      i));
                                                item.setString("qtyUnitCd"      , SalesOrdMngtListData.getString("qtyUnitCd",   i));
                                                item.setDouble("ordWgt"         , SalesOrdMngtListData.getDouble("ordWgt",      i));
                                                item.setString("wgtUnitCd"      , SalesOrdMngtListData.getString("wgtUnitCd",   i));
                                                item.setDouble("ordCbm"         , SalesOrdMngtListData.getDouble("ordCbm",      i));
                                                item.setString("dptArCd"        , SalesOrdMngtListData.getString("dptArCd",     i));
                                                item.setString("dptArTypeCd"    , SalesOrdMngtListData.getString("dptArTypeCd", i));
                                                item.setString("arvArCd"        , SalesOrdMngtListData.getString("arvArCd",     i));
                                                item.setString("arvArTypeCd"    , SalesOrdMngtListData.getString("arvArTypeCd", i));
                                                item.setString("aptdReqYmd"     , SalesOrdMngtListData.getString("aptdReqYmd",  i));
                                                item.setString("aptdReqHm"      , SalesOrdMngtListData.getString("aptdReqHm",   i));
                                                item.setString("regrId"         , SalesOrdMngtData.getString("regrId",          0));
                                                item.setString("mdfrId"         , SalesOrdMngtData.getString("mdfrId",          0));

                                                items.addLData(item);

                                                master.set("LCompoundDao", cDao);
                                                workPbc.createBasisWorkRoute(master, items);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
/*
Tpl 해상수출판매오더 포워딩 라인아이템 정보를 Insert한다.
*/

            input.setString("salesOrdNo", salesOrdNo);
            input.setString("regrId", SalesOrdMngtData.getString("regrId",0));
            input.setString("mdfrId", SalesOrdMngtData.getString("mdfrId",0));
            input.set("LCompoundDao", cDao);

            changeSalesOrdStat(input);
            LLog.debug.println("해상수입 수정입력데이터 "+SalesOrdMngtData+SalesOrdMngtListData);

/*
Tpl 해상수출판매오더 포워딩 라인아이템 정보를 Insert한다.
*/
            input.setString("salesOrdNo", salesOrdNo);
            LMultiData dataHolder2 = new LMultiData();
            dataHolder2.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpSalesOrd", input));
            dataHolder2.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpSalesOrdItemList", input));
            dataHolder2.add("IN_DS3", dao.executeQuery("select/om/om03/workRouteMngt/retrieveTplSalesOrdDivHist", input));
            return dataHolder2;
            
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveOceanImpSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /** 해상수입판매오더포워딩의 운송분배를 지시하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *      salesOrdNo, ordTypeCd, arvArCd, bookingNo, aptdReqYmd
     * @param multiData Command로 부턴 전달받은 input LMultiDataProtocol
     *
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData divideOceanImpTran(LMultiData inputData1, LMultiData inputData2) throws LException {
        try{
            IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
            String salesOrdNo   = inputData1.getString("salesOrdNo",0);
            LCommonDao dao = new LCommonDao();
            laf.application.dao.LCompoundDao dao2 = new laf.application.dao.LCompoundDao();

            LLog.debug.println("inputData1\n"+inputData1);
            LLog.debug.println("\ninputData2\n"+inputData2);
            String chk = "";
            String transDivYn ="";
            LData master = new LData();

            if(inputData2 != null && inputData2.getDataCount() > 0) {
                for(int i=0; i < inputData2.getDataCount(); i++) {
                    chk = inputData2.getString("chk", i);
                    transDivYn = inputData2.getString("transDivYn", i); //분배여부
                    LLog.debug.println("###useYn"+chk+"QQQ"+i);
                    if(chk.equals("1.0")){
                        if(transDivYn.equals("N")){
                            master = new LData();
                            LData item = new LData();

                            master.setString("salesOrdNo",  salesOrdNo);
                            master.setString("lineNo",      inputData2.getString("lineNo",      i));
                            master.setString("ordTypeCd",   inputData1.getString("ordTypeCd",0));
                            master.setString("arvArCd",     inputData2.getString("arvArCd",     i));
                            master.setString("arvArTypeCd",     inputData2.getString("arvArTypeCd",     i));

                            master.setString("arvArZipCd",  inputData2.getString("arvArZipCd", i));
                            master.setString("arvArZipAddr",  inputData2.getString("arvArZipAddr", i));
                            master.setString("arvArDtlAddr",  inputData2.getString("arvArDtlAddr", i));
                            master.setString("dptArCd"      ,   inputData2.getString("dptArCd",i));
                            master.setString("dptArTypeCd",     inputData2.getString("dptArTypeCd",     i));
                            master.setString("aptdReqYmd",  inputData2.getString("aptdReqYmd",i));
                            master.setString("aptdReqHm",   inputData2.getString("aptdReqHm",i));
                            master.setString("planVanningYn",   OmConstants.COMMON_Y);
                            master.setString("regrId",      inputData1.getString("regrId",0));
                            master.setString("mdfrId",      inputData1.getString("mdfrId",0));

                            item.setString("salesOrdNo",    salesOrdNo);
                            item.setString("lineNo",        inputData2.getString("lineNo",      i));
                            item.setString("custCd",        inputData2.getString("custCd",      i));
                            item.setString("itemCd",        inputData2.getString("itemCd",      i));
                            item.setDouble("ordQty",        inputData2.getDouble("ordQty",      i));
                            item.setString("qtyUnitCd",     inputData2.getString("qtyUnitCd",   i));
                            item.setDouble("ordWgt",        inputData2.getDouble("ordWgt",  i));
                            item.setString("wgtUnitCd",     inputData2.getString("wgtUnitCd",   i));
                            item.setDouble("ordCbm",        inputData2.getDouble("ordCbm",  i));
                            item.setString("arvArCd",       inputData2.getString("arvArCd",     i));
                            item.setString("arvArZipCd",        inputData2.getString("arvArZipCd",  i));
                            item.setString("arvArZipAddr",      inputData2.getString("arvArZipAddr",    i));
                            item.setString("arvArDtlAddr",      inputData2.getString("arvArDtlAddr",    i));
                            item.setString("dptArCd",       inputData2.getString("dptArCd",     i));
                            item.setString("aptdReqYmd",    inputData2.getString("aptdReqYmd",0));
                            item.setString("aptdReqHm",     inputData2.getString("aptdReqHm",0));
                            item.setString("regrId",        inputData1.getString("regrId",0));
                            item.setString("mdfrId",        inputData1.getString("mdfrId",0));
                            LMultiData items = new LMultiData();

                            items.addLData(item);

                            master.set("LCompoundDao", dao2);
                            workPbc.createBasisWorkRoute(master, items);

                        }
                    }
                }
            }

            LData smsData = new LData();
            smsData.setString("salesOrdNo", salesOrdNo);
            smsData.setString("sctnCd", "03");
            smsData.set("LCompoundDao", dao2);
            sendTplTranSms(smsData);

            LData input = new LData();
            input.setString("salesOrdNo", salesOrdNo);
            LMultiData dataHolder2 = new LMultiData();
            dataHolder2.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpSalesOrdItemList", input));
            dataHolder2.add("IN_DS2", dao.executeQuery("select/om/om03/workRouteMngt/retrieveTplSalesOrdDivHist", input));

            return dataHolder2;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "divideOceanImpTran()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 판매오더검색팝업 정보를 추가/수정/삭제하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void cudSalesOrdMngt(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            dao.setInsertQuery("cud/om/${tableName}/create${tableName}");
            dao.setUpdateQuery("cud/om/${tableName}/update${tableName}");
            dao.setDeleteQuery("cud/om/${tableName}/delete${tableName}");
            dao.executeUpdateWithJobType(inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "cudSalesOrdMngt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }
    /**
     * 예외오더등록 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveExceptSalesOrd(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();
            LMultiData dataHander = new LMultiData();

            dataHander.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveExceptSalesOrdBasisInfo", inputData));
        //    dataHander.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveExceptSalesOrdItemList", inputData));

            return dataHander;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveExceptSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 예외오더등록 오더유형 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveCustCtrtExceptOrdType(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();
            LMultiData mult = dao.executeQuery("select/sm/sm04/ctrtMngt/retrieveCustCtrtOrdType", inputData);
            //LMultiData mult = dao.executeQuery("select/om/om02/salesOrd/ordTest", inputData);

            LData header = (LData)mult.get("LDATA_TO_GDC", 0);
            LMultiData realData = (LMultiData)mult.get("OBJECT_TO_GDRs", 0);
            LMultiData rtnData = new LMultiData();
            for(int i=0;i<realData.keySize();i++){
                String exceptOrdYn = realData.getString("exceptOrdYn", i);
                String logisSvcSctnCd = realData.getString("logisSvcSctnCd", i); //물류서비스코드
                if (exceptOrdYn.equals(OmConstants.COMMON_Y)&&!logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_23)) {
                    rtnData.addLData(realData.getLData(i));
                }
            }

            mult = null;
            mult = new LMultiData();

            mult.add("LDATA_TO_GDC", header);
            mult.add("OBJECT_TO_GDRs", rtnData);

            return mult;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustCtrtExceptOrdType()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 예외오더등록 계약고객 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveCustOrdTypeEachCtrt(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();

            return dao.executeQuery("select/sm/sm04/ctrtMngt/retrieveCustOrdTypeEachCtrt", inputData);
            //return dao.executeQuery("select/om/om02/salesOrd/ctrtTest", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustOrdTypeEachCtrt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 예외오더등록 계약고객 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveCustOrdTypeEachCtrtInh(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();

            return dao.executeQuery("select/sm/sm04/ctrtMngt/retrieveCustOrdTypeEachCtrtInh", inputData);
            //return dao.executeQuery("select/om/om02/salesOrd/ctrtTest", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustOrdTypeEachCtrtInh()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }


    /**
     * 수출입 계약번호 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveCustOrdTypeEachCtrtTPL(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();

            return dao.executeQuery("select/sm/sm04/ctrtMngt/retrieveCustOrdTypeEachCtrtTPL", inputData);
            //return dao.executeQuery("select/om/om02/salesOrd/ctrtTest", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCustOrdTypeEachCtrt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 예외오더등록 정보를 추가/수정/삭제하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveExceptSalesOrd(LMultiData inputData) throws LException {
        try{
            LMultiData salesData = (LMultiData)inputData.get("IN_DS1",0); // 필수
//          LMultiData salesDataItem = (LMultiData)inputData.get("IN_DS2",0 );
            LCompoundDao dao = new LCompoundDao();
            laf.application.dao.LCompoundDao dao2 = new laf.application.dao.LCompoundDao();

            String salesOrdNo = "";
            LData input = new LData();

            if (salesData.getInt("GauceJobType", 0) == GauceDataRow.TB_JOB_INSERT) {
                /**
                 * 신규
                 */
                laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);
                LData result = commonDao.executeQueryForSingle();
                salesOrdNo = result.getString("salesOrdNo");

                LData paramData = new LData();
                paramData.setString("rptCustCd"         , salesData.getString("ctrtCustCd"  , 0));
                paramData.setString("corpCd"            , salesData.getString("corpCd", 0));
                paramData.setString("ordTypeCd"         , salesData.getString("ordTypeCd"   , 0));
                paramData.setString("expImpDomSctnCd"   , salesData.getString("expImpDomSctnCd" , 0));
                paramData.setString("dptArCd"           , "");
                paramData.setString("dptArTypeCd"       , "");
                paramData.setString("arvArCd"           , "");
                paramData.setString("arvArTypeCd"       , "");
                paramData.setString("moveTypeCd"        , "");
/**
                LData bilgCustInfo = getBilgCustInfo(paramData);
                if(bilgCustInfo != null) {
                    GauceUtil.modiColValue(salesData, "bilgCustCd"  , bilgCustInfo.getString("bilgCustCd"));
                    GauceUtil.modiColValue(salesData, "sellDeptCd"  , bilgCustInfo.getString("sellDeptCd"));
                }
**/
                //신규 계약번호, 청구고객, 매출부서 매핑. leepj 2013-12-28 --------------------------------------------------
                LData ctrtCustInfo = getBilgCustInfoInh(paramData);

                if( ctrtCustInfo != null ) {
                	GauceUtil.modiColValue(salesData, "ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
                	GauceUtil.modiColValue(salesData, "bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
                	GauceUtil.modiColValue(salesData, "sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
                	GauceUtil.modiColValue(salesData, "salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
                }                
                //--------------------------------------------------------------------------------------------------

                LLog.debug.println("SalesOrdMngtData==========>\n" + salesData);
                LLog.debug.println("SalesOrdMngtListData==========>\n" + salesData);                
                GauceUtil.fillColValue(salesData, "rptCustCd", salesData.getString("ctrtCustCd", 0));
                GauceUtil.modiColValue(salesData, "salesOrdNo", salesOrdNo);
//              GauceUtil.modiColValue(salesDataItem, "salesOrdNo", salesOrdNo);

                dao.setInsertQuery("cud/om/tb_om02001/createTbOm02001ExceptOrd");
                dao.addWithJobType(salesData);
                dao.executeUpdate();
//              if ( salesDataItem.getKeyCount() > 0 ) {
//                  dao.setInsertQuery("cud/om/tb_om02002/createTbOm02002");
//                  dao.addWithJobType(salesDataItem);
//                  dao.executeUpdate();
//
//              }
            }
            else {
                LLog.debug.println("\n\n@@@@@ salesOrdCnclYn : "+salesData.get("salesOrdCnclYn", 0));

                if (OmConstants.COMMON_Y.equals(salesData.get("salesOrdCnclYn", 0))) {
                    /**
                     * 오더취소
                     */
                    dao.setUpdateQuery("cud/om/tb_om02001/cancelTbOm02001ExceptOrd");
                    dao.addWithJobType(salesData);
                    dao.executeUpdate();

                }
                else {
                    /**
                     * 수정
                     */
                    dao.setUpdateQuery("cud/om/tb_om02001/updateTbOm02001ExceptOrd");
                    dao.addWithJobType(salesData);
                    dao.executeUpdate();

//                  if ( salesDataItem.getKeyCount() > 0 ) {
//                      dao.setUpdateQuery("cud/om/tb_om02002/updateTbOm02002");
//                      dao.addWithJobType(salesDataItem);
//                      dao.executeUpdate();
//
//                  }
                }
            }

            int beforeJobType = salesData.getInt("GauceJobType", 0);
            // 3 히스토리 저장
            /**
             * 변경순번 +1
             * 변경적용여부 Y
             */
//          GauceUtil.fillColValue(salesDataItem, "progStatCd", "1");
//          GauceUtil.fillColValue(salesDataItem, "custBatNo", "1");

        //  createSalesOrdHistory(salesData, salesDataItem, null, null, null);
            LData paramData = new LData();
            paramData.setString("salesOrdNo", salesData.getString("salesOrdNo", 0));
            paramData.setString("regrId", salesData.getString("regrId", 0));
            paramData.setString("mdfrId", salesData.getString("mdfrId", 0));
            paramData.set("LCompoundDao", dao2);

            setSalesOrdHistory(paramData);
            // 4 오더분배
            /**
             * 운반오더의 경우 운송실행오더는 신규
             * changeFlag == C 이면 변경된 내용에 따라서 실행오더 취소
             * changeFlag == U 이면 실행오더 수정
             */
            // 운반오더가 아니면 분배하지 않음
            boolean check = false;

            if ( OmConstants.ADD_SVC_SCTN_CD_06.equals(salesData.getString("addSvcTypeCd", 0))
                    || OmConstants.ADD_SVC_SCTN_CD_07.equals(salesData.getString("addSvcTypeCd", 0)) ) {

                String trmsSctnCd = "";         // 전송구분
                String tranEoNo = "";
                if (beforeJobType != 2) {
                    tranEoNo = salesData.getString("tranEoNo", 0);  // 운송실행오더번호
                }
                salesOrdNo = salesData.getString("salesOrdNo", 0);

                // 수정
                if (beforeJobType == GauceDataRow.TB_JOB_UPDATE) {
                    // 오더취소이면
                    if ( OmConstants.COMMON_Y.equals(salesData.getString("salesOrdCnclYn", 0)) ) {
                        trmsSctnCd = OmConstants.DELETE_EXCE_ORD;
                        LLog.debug.println("@@@@@@@ if in if GauceJobType "+beforeJobType);
                    }
                    else {
                        // 아이템변경사항에 따라서...오더삭제후 신규저장
                        if (OmConstants.DEL_CRE_EXCE_ORD.equals(salesData.getString("changeFlag", 0))) {
                            LLog.debug.println("@@@@@@@ else in if GauceJobType "+beforeJobType);
                            trmsSctnCd = OmConstants.DELETE_EXCE_ORD;
                            // 변경사항이 있으면 운송실행오더 취소하고 다시 신규로 처리
                            orderDivide(salesOrdNo, tranEoNo, trmsSctnCd);
                            trmsSctnCd = OmConstants.CREATE_EXCE_ORD;
                        }
                        else {
                            LLog.debug.println("@@@@@@@ else in else GauceJobType "+beforeJobType);
                            trmsSctnCd = OmConstants.UPDATE_EXCE_ORD;
                        }
                    }
                }
                else {
                    LLog.debug.println("@@@@@@@ else GauceJobType "+beforeJobType);
                    if (beforeJobType == GauceDataRow.TB_JOB_INSERT) {
                        trmsSctnCd = OmConstants.CREATE_EXCE_ORD;
                        tranEoNo = "";
                    }
                }
                LLog.debug.println("@@@@@@@@@@@@@@@@@@@@@\nsalesOrdNo -> "+salesOrdNo+"\n");
                check = true;
                orderDivide(salesOrdNo, tranEoNo, trmsSctnCd);
            }

            LLog.debug.println("\n\n saveExceptSalesOrd return retrieve before");

            // 5 저장처리후 리턴
            input.setString("salesOrdNo", salesOrdNo);
            LLog.debug.println("\n\n input sales_ord_no -> "+input.getString("salesOrdNo"));

            // 히스토리 저장후 가우스잡타입이 2(신규)로바뀜
            if ( !check ) {
                input.setString("salesOrdNo", salesData.getString("salesOrdNo", 0));
            }
            LMultiData dataHolder2 = new LMultiData();
            dataHolder2.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveExceptSalesOrdBasisInfo", input));
            dataHolder2.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveExceptSalesOrdItemList", input));

            return dataHolder2;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveExceptSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    public void changeExceptEoNo(LData inputData) throws LException {
        try {
            ((laf.application.dao.LCompoundDao)inputData.get("LCompoundDao")).add("cud/om/tb_om02001/changeExceptEoNo", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "changeExceptEoNo()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    public void changeSalesOrdStat(LData inputData) throws LException {
        laf.application.dao.LCompoundDao iDao = CompDaoUtil.getTransaction(inputData);
        LData input = CompDaoUtil.resetParam(inputData);
        try {
//          String salesOrdCmptSctnCd = input.getString("salesOrdCmptSctnCd");
            String salesOrdCmptSctnCd = "";
            String salesOrdStatCd = "";

            /**
             *
완료구분에 값이 있으면  - > 완료(06)
             */

            LData salesOrd = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdCmptSctnInfo", input);
            if(salesOrd != null && salesOrd.getString("salesOrdCmptSctnCd") != null && !salesOrd.getString("salesOrdCmptSctnCd").equals("")) {
                salesOrdCmptSctnCd = salesOrd.getString("salesOrdCmptSctnCd");
            }

            if ( salesOrdCmptSctnCd != null && !"".equals(salesOrdCmptSctnCd) ) {
                salesOrdStatCd = "06";
            } else {
                LMultiData result = iDao.executeQuery("select/om/om02/salesOrd/retrieveTbOm04001", input);
                int cnt = 0;
                int cnt2 = 0;

                for (int k=0; k < result.getDataCount(); k++) {
                    if ( "01".equals(result.get("rsltSctnCd", k)) || "04".equals(result.get("rsltSctnCd", k)) || "05".equals(result.get("rsltSctnCd", k)) ) {
                        cnt++;
                    }
                    if ( "03".equals(result.get("rsltSctnCd", k)) ) {
                        cnt2++;
                    }
                }

                LData result04002 = new LData();
                result04002 = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTbOm04002", input);
                if ( cnt > 0 || "02".equals(result04002.getString("rsltSctnCd")) ) {
                    /**
                     *
                        출발실적, 출고실적, 입고실적이 하나라도 있거나
                        국제물류작업실적에 BL생성(02)이 있으면 -> 작업중(05)
                     */
                    salesOrdStatCd = "05";

                } else {
                    LData result03016 = new LData();
                    result03016 = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTbOm03016", input);

                    if ( cnt2 > 0 || (result03016 != null && result03016.getInt("cnt") > 0 ) || "01".equals(result04002.getString("rsltSctnCd")) ) {
                        /**
                            SHIPMENT가 생성되었거나, 할당실적이 있거나
                            국제물류작업실적에 선사 Booking Confirm(01)이 있으면 -> 작업지시(04)
                         */
                        salesOrdStatCd = "04";

                    } else {

                        LData result02003 = new LData();
                        result02003 = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTbOm02003", input);

                        LData result02019 = new LData();
                        result02019 = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTbOm02019", input);

                        LData result03015 = new LData();
                        result03015 = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTbOm03015", input);

                        if (  !"".equals(StringUtil.envl(result02003.getString("fwdEoNo"), ""))
                                || !"".equals(StringUtil.envl(result02019.getString("fwdEoNo"), ""))
                                || result03015.getInt("cnt") > 0 ) {
                            /**
                                분배된 실행오더가 하나라도 있으면 -> 분배(03)
                                TB_OM02003의 포워딩실행오더번호
                                or
                                TB_OM02019의 포워딩실행오더번호
                                or
                                TB_OM03015
                             */
                            salesOrdStatCd = "03";
                        } else {
                            salesOrdStatCd = "02";
                        }
                    }//if ( cnt2 > 0 || (result03016 != null && result03016.getInt("cnt") > 0 ) || "01".equals(result04002.getString("rsltSctnCd")) )
                }//if ( cnt > 0 || "02".equals(result04002.getString("rsltSctnCd")) )
            }//if ( salesOrdCmptSctnCd != null && !"".equals(salesOrdCmptSctnCd) )
            input.setString("salesOrdStatCd", salesOrdStatCd);

            //((laf.application.dao.LCompoundDao)inputData.get("dao")).add("cud/om/tb_om02001/changeSalesOrdStat", inputData);
            iDao.add("cud/om/tb_om02001/changeSalesOrdStat", input);
            iDao.add("cud/om/tb_om01001/changeSalesOrdStat", input);
            iDao.executeUpdate();

        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "changeSalesOrdStat()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 판매오더수정이력조회
     * @param inputData
     * @throws LException
     */
    public LMultiData retrieveSalesOrdMdfHist(LData inputData) throws LException {
        try {
            // 오더접근권한 체크
            retrieveOrdAccessAuth(inputData);

            LCommonDao dao = new LCommonDao();
            LMultiData dataHander = new LMultiData();

            dataHander.add("IN_DS5", dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdMdfHistComboList", inputData));
            dataHander.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdMdfHistList", inputData));
            dataHander.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemHistLIst", inputData));
//          dataHander.add("IN_DS3", dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdPrclMdfHistList", inputData));
//          dataHander.add("IN_DS4", dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemPrclHistList", inputData));

            return dataHander;

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveSalesOrdMdfHist()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 판매오더 분배 호출
     * @param salesOrdNo
     * @param tranEoNo
     * @param trmsSctnCd
     * @throws LException
     */
    public void orderDivide(String salesOrdNo, String tranEoNo, String trmsSctnCd) throws LException {
        try {
            IOrdDivMngt ordDivPbc = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
            ordDivPbc.divideExceptOrd(salesOrdNo, tranEoNo, trmsSctnCd);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "orderDivide()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 판매오더 히스토리 저장
     * @param dao
     * @param salesData
     * @param salesDataItem
     * @throws LException
     */
    public void setSalesOrdHistory(LData paramData) throws LException {

        try {
            LLog.debug.println("\n\n setSalesOrdHistory init");
//          laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(paramData);


            if ( paramData != null ) {
                dao.add("cud/om/tb_om02011h/createSalesOrdHistory", paramData);
                dao.add("cud/om/tb_om02012h/createSalesOrdItemHistory", paramData);
                dao.add("cud/om/tb_om02013h/createSalesOrdFisHistory", paramData);
                dao.add("cud/om/tb_om02014h/createSalesOrdPrclHistory", paramData);
                dao.add("cud/om/tb_om02015h/createSalesOrdItemPrclHistory", paramData);
            }

            // 히스토리 이전 판매오더와 판매오더아이템 부분 모두을 execute 함
            dao.executeUpdate();
            LLog.debug.println("\n\n setSalesOrdHistory end");
        }
        catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "setSalesOrdHistory()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    public void createSalesOrdHistory(LMultiData salesData, LMultiData salesDataItem, LMultiData salesFis, LMultiData salesPrcl, LMultiData salesItemPrcl) throws LException {

        try {
            LLog.debug.println("\n\n setSalesOrdHistory init");
            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(salesData);

            if ( salesData != null && salesData.getKeyCount() > 0 ) {
                dao.add("cud/om/tb_om02011h/createTbOm02011h", salesData);
            }

            if ( salesData != null && salesDataItem.getKeyCount() > 0 ) {
                dao.add("cud/om/tb_om02012h/createTbOm02012h", salesDataItem);
            }

            if ( salesFis != null && salesFis.getDataCount() > 0) {
                dao.add("cud/om/tb_om02013h/createTbOm02013h", salesFis);
            }

            if ( salesPrcl != null && salesPrcl.getDataCount() > 0) {
                dao.add("cud/om/tb_om02014h/createTbOm02014h", salesPrcl);
            }

            if ( salesItemPrcl != null && salesItemPrcl.getDataCount() > 0) {
                dao.add("cud/om/tb_om02015h/createTbOm02015h", salesItemPrcl);
            }
            // 히스토리 이전 판매오더와 판매오더아이템 부분 모두을 execute 함
            dao.executeUpdate();
            LLog.debug.println("\n\n setSalesOrdHistory end");
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createSalesOrdHistory()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 대기오더관리 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveBackOrderList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{

            if("B".equals(inputData.getString("selGbn"))) {
                if("S".equals(inputData.getString("ordNoGbn"))) {
                    inputData.setString("salesOrdNo", inputData.getString("ordNo"));
                } else {
                    inputData.setString("custOrdNo", inputData.getString("ordNo"));
                }
                // 오더접근권한 체크
                retrieveOrdAccessAuth(inputData);
            }

            return dao.executeQuery("select/om/om02/salesOrd/retrieveBackOrderList", inputData);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retreiveBackOrderList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 오더변경대상 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveChangeOrderTypeList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{

            if("B".equals(inputData.getString("selGbn"))) {
                if("S".equals(inputData.getString("ordNoGbn"))) {
                    inputData.setString("salesOrdNo", inputData.getString("ordNo"));
                } else {
                    inputData.setString("custOrdNo", inputData.getString("ordNo"));
                }
                // 오더접근권한 체크
                retrieveOrdAccessAuth(inputData);
            }

            return dao.executeQuery("select/om/om02/salesOrd/retrieveChangeOrderTypeList", inputData);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retreiveBackOrderList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 대기오더관리 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveBackOrderMultiList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{

            if("B".equals(inputData.getString("selGbn"))) {
                if("S".equals(inputData.getString("ordNoGbn"))) {
                    inputData.setString("salesOrdNo", inputData.getString("ordNo"));
                } else {
                    inputData.setString("custOrdNo", inputData.getString("ordNo"));
                }
                // 오더접근권한 체크
                retrieveOrdAccessAuth(inputData);
            }

            return dao.executeQuery("select/om/om02/salesOrd/retrieveBackOrderMultiList", inputData);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retreiveBackOrderList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
    /**
     * 대기오더의 라인아이템 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveBackOrderItemList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBackOrderItemList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBackOrderItemList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 대기오더의 라인아이템 정보를 조회하는 메소드.- 2
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveBackOrderItemList2(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBackOrderItemList2", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBackOrderItemLis2t()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 대기오더의 대기오더를 분배하는  메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void divideBackOrd(LMultiData inputData1, LData inputData2) throws LException {
        LCompoundDao dao2 = new LCompoundDao();
        LMultiData backOrdData      = (LMultiData)inputData1.get("IN_DS1",0);
        LMultiData backOrdItemData  = (LMultiData)inputData1.get("IN_DS2",0);
        laf.application.dao.LCompoundDao cDao = new laf.application.dao.LCompoundDao();
        
        LLog.debug.println("backOrdData=======>" + backOrdData);
        LLog.debug.println("backOrdItemData=======>" + backOrdItemData);
        try{
            IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
            String salesOrdNo   = (String)backOrdItemData.get("salesOrdNo", 0);
            String backCustCd   = (String)backOrdItemData.get("custCd", 0);
            LData ordData = new LData();

            if(backOrdData != null) {
                for(int x=0; x < backOrdData.getDataCount(); x++) {
                    LData item = (LData)backOrdData.getLData(x);
                    if(salesOrdNo.equals(item.getString("salesOrdNo"))) {
                        ordData = item;
                        break;
                    }
                }
            }

//          기본 작업경로 생성
/*
  argument
-작업경로
  - 판매오더번호
  - 오더유형코드
  - 출발지코드
  - 출발지우편번호
  - 출발지우편주소
  - 출발지상세주소
  - 도착지코드
  - 도착지우편번호
  - 도착지우편주소
  - 도착지상세주소
  - 시작요청일자
  - 시작요청시분
  - 납기요청일자
  - 납기요청시분
-작업경로아이템리스트
  - 판매오더번호
  - 라인번호
  - 고객코드
  - 아이템코드
  - 기본단위코드
  - 오더수량
  - 수량단위코드
  - 오더중량
  - 중량단위코드
  - 오더CBM
 */
            LMultiData works = new LMultiData();
            if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                    LData temp = (LData)backOrdItemData.getLData(i);
                    LData itemData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrderItemList", temp);
                    double remainQty = Double.parseDouble(temp.getString("remainQty") != null && !temp.getString("remainQty").equals("") ? temp.getString("remainQty") : "0");
                    double remainWgt = Double.parseDouble(temp.getString("remainWgt") != null && !temp.getString("remainWgt").equals("") ? temp.getString("remainWgt") : "0");
                    double itemRemainQty = Double.parseDouble(itemData.getString("remainQty") != null && !itemData.getString("remainQty").equals("") ? itemData.getString("remainQty") : "0");
                    double itemRemainWgt = Double.parseDouble(itemData.getString("remainWgt") != null && !itemData.getString("remainWgt").equals("") ? itemData.getString("remainWgt") : "0");
                    LLog.debug.println(remainQty + "         " + itemRemainQty);
                    LLog.debug.println(remainWgt + "         " + itemRemainWgt);
                    if(remainQty != itemRemainQty || remainWgt != itemRemainWgt) {
                        throw new LBizException("이미 분배되었습니다.확인하시기 바랍니다.");
                    }
                }
            }

            //체크된 아이템만 모으기
            if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                    LData temp = (LData)backOrdItemData.getLData(i);
                    if(temp.getString("chk").equals("T")) {
                        if(temp.getString("dptArCd") == null || temp.getString("dptArCd").equals("")) {
                            temp.setString("dptArCd"        ,  ordData.getString("dptArCd") );
                            temp.setString("dptArTypeCd"    ,  ordData.getString("dptArTypeCd") );
                            temp.setString("dptArZipCd"     ,  ordData.getString("dptArZipCd") );
                            temp.setString("dptArZipAddr"   ,  ordData.getString("dptArZipAddr") );
                            temp.setString("dptArDtlAddr"   ,  ordData.getString("dptArDtlAddr") );
                        }
                        if(temp.getString("arvArCd") == null || temp.getString("arvArCd").equals("")) {
                            temp.setString("arvArCd"        , ordData.getString("arvArCd") );
                            temp.setString("arvArTypeCd"    , ordData.getString("arvArTypeCd") );
                            temp.setString("arvArZipCd"     ,  ordData.getString("arvArZipCd") );
                            temp.setString("arvArZipAddr"   ,  ordData.getString("arvArZipAddr") );
                            temp.setString("arvArDtlAddr"   ,  ordData.getString("arvArDtlAddr") );
                        }
                        works.addLData(temp);
                    }
                }
            }

            LMultiData masters = new LMultiData();
            if(works != null && works.getDataCount() > 0) {
                for(int i=0; i < works.getDataCount(); i++) {
                    LData master = new LData();
                    master.setString("salesOrdNo",  salesOrdNo);
                    master.setString("lineNo"       , works.getString("lineNo", i));
                    master.setString("ordTypeCd"    , ordData.getString("ordTypeCd"));
                    master.setString("dptArCd"      , works.getString("dptArCd", i));
                    master.setString("dptArTypeCd"  , works.getString("dptArTypeCd", i));
                    master.setString("dptArZipCd"   , works.getString("dptArZipCd", i));
                    master.setString("dptArZipAddr" , works.getString("dptArZipAddr", i));
                    master.setString("dptArDtlAddr" , works.getString("dptArDtlAddr", i));

                    master.setString("arvArCd"      , works.getString("arvArCd", i));
                    master.setString("arvArTypeCd"  , works.getString("arvArTypeCd", i));
                    master.setString("arvArZipCd"   , works.getString("arvArZipCd", i));
                    master.setString("arvArZipAddr" , works.getString("arvArZipAddr", i));
                    master.setString("arvArDtlAddr" , works.getString("arvArDtlAddr", i));

                    master.setString("strtReqYmd"   , ordData.getString("strtReqYmd"));
                    master.setString("strtReqHm"    , ordData.getString("strtReqHm"));
                    master.setString("aptdReqYmd"   , works.getString("aptdReqYmd", i));
                    master.setString("aptdReqHm"    , works.getString("aptdReqHm",  i));
                    master.setString("regrId"       , ordData.getString("regrId"));
                    master.setString("mdfrId"       , ordData.getString("mdfrId"));

                    if(masters != null && masters.getDataCount() > 0) {
                        for(int j=0; j < masters.getDataCount(); j++) {
                            LData temp = (LData)masters.getLData(j);
                            
                            // 홈데코이고 ZE01 오더유형일 때는 납기요청일 일치여부 확인안함. 2015-03-26
                            LLog.debug.println(   "ordData" + "=>" + ordData);
                            
                            if( backCustCd != null && backCustCd.equals(OmConstants.CUST_CO_CD_HH)
                            	&& ordData.getString("custOrdTypeCd").equals("ZE01") ) {
                            	if(!master.getString("lineNo").equals(temp.getString("lineNo"))) {
	                            	if( !(master.getString("dptArCd").equals(temp.getString("dptArCd"))
	                                     && master.getString("arvArCd").equals(temp.getString("arvArCd")) )
	     	                        ) {
	                            		masters.addLData(master);
	     	                        }
                            	}
                            }
                            else {
	                            if(!master.getString("lineNo").equals(temp.getString("lineNo"))) {
	                                if( !(master.getString("dptArCd").equals(temp.getString("dptArCd"))
	                                   && master.getString("arvArCd").equals(temp.getString("arvArCd"))
	                                   && master.getString("aptdReqYmd").equals(temp.getString("aptdReqYmd"))
	                                   && master.getString("aptdReqHm").equals(temp.getString("aptdReqHm")) )
	                                ) {
	                                    masters.addLData(master);
	                                }
	                            }
                            }
                        }
                    } else {
                        masters.addLData(master);
                    }
                }
            }

            if(masters != null && masters.getDataCount() > 0) {
                for(int i=0; i < masters.getDataCount(); i++) {
                    LData workRoute = (LData)masters.getLData(i);

                    LMultiData items = new LMultiData();
                    for(int j=0; j < works.getDataCount(); j++) {
                        LData item = new LData();

                        item.setString("salesOrdNo",    salesOrdNo);
                        item.setString("lineNo",        works.getString("lineNo",   j));
                        item.setString("custCd",        works.getString("custCd",   j));
                        item.setString("itemCd",        works.getString("itemCd",   j));
                        item.setString("basisUnitCd",   works.getString("basisUnitCd",j));
                        item.setDouble("ordQty",        works.getDouble("divideQty",    j));
                        item.setString("qtyUnitCd",     works.getString("qtyUnitCd",    j));
                        item.setDouble("ordWgt",        works.getDouble("divideWgt",    j));
                        item.setString("wgtUnitCd",     works.getString("wgtUnitCd",    j));
                        item.setDouble("ordCbm",        works.getDouble("divideCbm",    j));
                        item.setString("dptArCd",       works.getString("dptArCd",  j));
                        item.setString("dptArTypeCd",   works.getString("dptArTypeCd",  j));
                        item.setString("arvArCd",       works.getString("arvArCd",  j));
                        item.setString("arvArTypeCd",   works.getString("arvArTypeCd",  j));
                        item.setString("aptdReqYmd",    works.getString("aptdReqYmd",   j));
                        item.setString("aptdReqHm",     works.getString("aptdReqHm",    j));
                        item.setString("regrId",        ordData.getString("regrId"));
                        item.setString("mdfrId",        ordData.getString("mdfrId"));

                        // 홈데코이고 ZE01 오더유형일 때는 납기요청일 일치여부 확인안함. 2015-03-26
                        if( backCustCd !=null && backCustCd.equals(OmConstants.CUST_CO_CD_HH)
                        	&& ordData.getString("custOrdTypeCd").equals("ZE01") ) {
                        	if( (item.getString("dptArCd").equals(workRoute.getString("dptArCd"))
     	                         && item.getString("arvArCd").equals(workRoute.getString("arvArCd")) )
 	                        ) {
 	                            items.addLData(item);
 	                        }
                        }
                        else {
	                        if( (item.getString("dptArCd").equals(workRoute.getString("dptArCd"))
	                           && item.getString("arvArCd").equals(workRoute.getString("arvArCd"))
	                           && item.getString("aptdReqYmd").equals(workRoute.getString("aptdReqYmd"))
	                           && item.getString("aptdReqHm").equals(workRoute.getString("aptdReqHm")) )
	                        ) {
	                            items.addLData(item);
	                        }
                        }    
                    }
                    workRoute.set("LCompoundDao", cDao);
                    workPbc.createBasisWorkRoute(workRoute, items);
                }
            }
            
//          변경납기요청일시 정보를 수정
            inputData2.setString("mdfrId", ordData.getString("mdfrId"));
            dao2.add("cud/om/tb_om02001/updateChgAptdDate", inputData2);
            dao2.executeUpdate();

//          대기오더 분배가 완료되었는지 여부를 조회
            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao();
            LData result = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", inputData2);
            String cmptYn = "Y";
            if(result.getInt("cnt") == 0) {
                cmptYn = "N";
            }

//          대기오더분배가 완료되었으면 실행
            if(cmptYn.equals("N")) {
                inputData2.setString("backOrdYn", "N");
                dao2.add("cud/om/tb_om02001/changeBackOrdStat", inputData2);
                dao2.executeUpdate();
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "divideBackOrd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "divideBackOrd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 대기오더의 대기오더를 분배하는  메소드.- 일괄
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void divideAllBackOrd(LData inputData1,LData inputData2) throws LException {
        LCompoundDao dao2 = new LCompoundDao();
        //LMultiData backOrdData        = (LMultiData)inputData1.get("IN_DS1",0);
        //LMultiData result1    = retrieveBackOrderItemList2(inputData1);
        LMultiData result1  = retrieveBackOrderItemList(inputData1);

        LMultiData backOrdItemData = (LMultiData)result1.get("OBJECT_TO_GDRs", 0);
        laf.application.dao.LCompoundDao cDao = new laf.application.dao.LCompoundDao();

        LLog.debug.println("inputData1=======>" + inputData1);
        LLog.debug.println("backOrdItemData=======>" + backOrdItemData);

        inputData1.setString("inhYn",OmConstants.INH_YN);
        
        try{
            //대기오더여부체크
            LData backOrdYn = new LData();
            //새벽상차오더인 경우 가용재고 체크없이 분배
            if(inputData1.getString("dawnYn")!=null && !inputData1.getString("dawnYn").equals("")){
                if("Y".equals(inputData1.getString("dawnYn"))){
                    backOrdYn.setString("backOrdYn", "N");
                }else{
                    backOrdYn = checkAvailStock(inputData1);
                }
            }else{
                backOrdYn = checkAvailStock(inputData1);
            }

            LLog.debug.println("backOrdYn=======>" + backOrdYn.getString("backOrdYn"));

            //대기오더가 아닌 경우만 분배로직 호출
            if(!"Y".equals(backOrdYn.getString("backOrdYn"))){

                IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
                String salesOrdNo   = (String)backOrdItemData.getLData(0).getString("salesOrdNo");
                LData ordData = new LData();
                ordData = inputData1;

//              if(backOrdData != null) {
//                  for(int x=0; x < backOrdData.getDataCount(); x++) {
//                      LData item = (LData)backOrdData.getLData(x);
//                      if(salesOrdNo.equals(item.getString("salesOrdNo"))) {
//                          ordData = item;
//                          break;
//                      }
//                  }
//              }

                LMultiData works = new LMultiData();
                if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                    for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                        LData temp = backOrdItemData.getLData(i);
                        LLog.debug.println("temp=======>" + temp);
                        LData itemData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrderItemList", temp);
                        double remainQty = Double.parseDouble(temp.getString("remainQty") != null && !temp.getString("remainQty").equals("") ? temp.getString("remainQty") : "0");
                        double remainWgt = Double.parseDouble(temp.getString("remainWgt") != null && !temp.getString("remainWgt").equals("") ? temp.getString("remainWgt") : "0");
                        double itemRemainQty = Double.parseDouble(itemData.getString("remainQty") != null && !itemData.getString("remainQty").equals("") ? itemData.getString("remainQty") : "0");
                        double itemRemainWgt = Double.parseDouble(itemData.getString("remainWgt") != null && !itemData.getString("remainWgt").equals("") ? itemData.getString("remainWgt") : "0");
                        LLog.debug.println(remainQty + "         " + itemRemainQty);
                        LLog.debug.println(remainWgt + "         " + itemRemainWgt);
                        if(remainQty != itemRemainQty || remainWgt != itemRemainWgt) {
                            throw new LBizException("이미 분배되었습니다.확인하시기 바랍니다.");
                        }
                    }
                }

                if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                    for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                        LData temp = (LData)backOrdItemData.getLData(i);
                            if(temp.getString("dptArCd") == null || temp.getString("dptArCd").equals("")) {
                                temp.setString("dptArCd"        ,  ordData.getString("dptArCd") );
                                temp.setString("dptArTypeCd"    ,  ordData.getString("dptArTypeCd") );
                                temp.setString("dptArZipCd"     ,  ordData.getString("dptArZipCd") );
                                temp.setString("dptArZipAddr"   ,  ordData.getString("dptArZipAddr") );
                                temp.setString("dptArDtlAddr"   ,  ordData.getString("dptArDtlAddr") );
                            }
                            if(temp.getString("arvArCd") == null || temp.getString("arvArCd").equals("")) {
                                temp.setString("arvArCd"        , ordData.getString("arvArCd") );
                                temp.setString("arvArTypeCd"    , ordData.getString("arvArTypeCd") );
                                temp.setString("arvArZipCd"     ,  ordData.getString("arvArZipCd") );
                                temp.setString("arvArZipAddr"   ,  ordData.getString("arvArZipAddr") );
                                temp.setString("arvArDtlAddr"   ,  ordData.getString("arvArDtlAddr") );
                            }
                            works.addLData(temp);
                    }
                }

                LMultiData masters = new LMultiData();
                if(works != null && works.getDataCount() > 0) {
                    for(int i=0; i < works.getDataCount(); i++) {
                        LData master = new LData();
                        master.setString("salesOrdNo",  salesOrdNo);
                        master.setString("lineNo"       , works.getString("lineNo", i));
                        master.setString("ordTypeCd"    , ordData.getString("ordTypeCd"));
                        master.setString("dptArCd"      , works.getString("dptArCd", i));
                        master.setString("dptArTypeCd"  , works.getString("dptArTypeCd", i));
                        master.setString("dptArZipCd"   , works.getString("dptArZipCd", i));
                        master.setString("dptArZipAddr" , works.getString("dptArZipAddr", i));
                        master.setString("dptArDtlAddr" , works.getString("dptArDtlAddr", i));

                        master.setString("arvArCd"      , works.getString("arvArCd", i));
                        master.setString("arvArTypeCd"  , works.getString("arvArTypeCd", i));
                        master.setString("arvArZipCd"   , works.getString("arvArZipCd", i));
                        master.setString("arvArZipAddr" , works.getString("arvArZipAddr", i));
                        master.setString("arvArDtlAddr" , works.getString("arvArDtlAddr", i));

                        master.setString("strtReqYmd"   , ordData.getString("strtReqYmd"));
                        master.setString("strtReqHm"    , ordData.getString("strtReqHm"));
                        master.setString("aptdReqYmd"   , works.getString("aptdReqYmd", i));
                        master.setString("aptdReqHm"    , works.getString("aptdReqHm",  i));
                        master.setString("regrId"       , ordData.getString("regrId"));
                        master.setString("mdfrId"       , ordData.getString("mdfrId"));

                        if(masters != null && masters.getDataCount() > 0) {
                            for(int j=0; j < masters.getDataCount(); j++) {
                                LData temp = (LData)masters.getLData(j);
                                
                                if(!master.getString("lineNo").equals(temp.getString("lineNo"))) {
                                    if( !(master.getString("dptArCd").equals(temp.getString("dptArCd"))
                                       && master.getString("arvArCd").equals(temp.getString("arvArCd"))
                                       && master.getString("aptdReqYmd").equals(temp.getString("aptdReqYmd"))
                                       && master.getString("aptdReqHm").equals(temp.getString("aptdReqHm")) )
                                    ) {
                                        masters.addLData(master);
                                    }
                                }
                            }
                        } else {
                            masters.addLData(master);
                        }
                    }
                }

                if(masters != null && masters.getDataCount() > 0) {
                    for(int i=0; i < masters.getDataCount(); i++) {
                        LData workRoute = (LData)masters.getLData(i);

                        LMultiData items = new LMultiData();
                        for(int j=0; j < works.getDataCount(); j++) {
                            LData item = new LData();

                            item.setString("salesOrdNo",    salesOrdNo);
                            item.setString("lineNo",        works.getString("lineNo",   j));
                            item.setString("custCd",        works.getString("custCd",   j));
                            item.setString("itemCd",        works.getString("itemCd",   j));
                            item.setString("basisUnitCd",   works.getString("basisUnitCd",j));
                            item.setDouble("ordQty",        Double.parseDouble(works.getString("ordQty",    j)));
                            item.setString("qtyUnitCd",     works.getString("qtyUnitCd",    j));
                            item.setDouble("ordWgt",        Double.parseDouble(works.getString("ordWgt",    j)));
                            item.setString("wgtUnitCd",     works.getString("wgtUnitCd",    j));
                            item.setDouble("ordCbm",        Double.parseDouble(works.getString("ordCbm",    j)));
                            item.setString("dptArCd",       works.getString("dptArCd",  j));
                            item.setString("dptArTypeCd",   works.getString("dptArTypeCd",  j));
                            item.setString("arvArCd",       works.getString("arvArCd",  j));
                            item.setString("arvArTypeCd",   works.getString("arvArTypeCd",  j));
                            item.setString("aptdReqYmd",    works.getString("aptdReqYmd",   j));
                            item.setString("aptdReqHm",     works.getString("aptdReqHm",    j));
                            item.setString("regrId",        ordData.getString("regrId"));
                            item.setString("mdfrId",        ordData.getString("mdfrId"));

                            if( (item.getString("dptArCd").equals(workRoute.getString("dptArCd"))
                               && item.getString("arvArCd").equals(workRoute.getString("arvArCd"))
                               && item.getString("aptdReqYmd").equals(workRoute.getString("aptdReqYmd"))
                               && item.getString("aptdReqHm").equals(workRoute.getString("aptdReqHm")) )
                            ) {
                                items.addLData(item);
                            }
                        }
                        workRoute.set("LCompoundDao", cDao);
                        workPbc.createBasisWorkRoute(workRoute, items);
                    }
                }

    //          변경납기요청일시 정보를 수정
                inputData1.setString("mdfrId", ordData.getString("mdfrId"));
                dao2.add("cud/om/tb_om02001/updateChgAptdDate", inputData1);
                dao2.executeUpdate();

    //          대기오더 분배가 완료되었는지 여부를 조회
                laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao();
                LData result = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", inputData1);
                String cmptYn = "Y";
                if(result.getInt("cnt") == 0) {
                    cmptYn = "N";
                }

    //          대기오더분배가 완료되었으면 실행
                if(cmptYn.equals("N")) {
                    inputData1.setString("backOrdYn", "N");
                    dao2.add("cud/om/tb_om02001/changeBackOrdStat", inputData1);
                    dao2.executeUpdate();
                }
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "divideAllBackOrd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "divideAllBackOrd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 일괄 자가운송전환하는  메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void changeSelfTranOrderType(LData inputData) throws LException {
        /*
        출고운송으로 접수된 오더를 출고 오더로 전환 시킨다.

        argument:
        판매오더번호

        처리절차
        */
        laf.application.dao.LCommonDao dao      = new laf.application.dao.LCommonDao();
        laf.application.dao.LCompoundDao dao2   = new laf.application.dao.LCompoundDao();
        ISalesOrdMngt pbcOrd                    = (ISalesOrdMngt)PbcUtil.getPbc(ISalesOrdMngt.class);
        IWorkRouteMngt pbcRoute = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);
         try{
             //전체 작업경로의 확정여부 체크
            LMultiData giRslt = dao.executeQuery("select/om/om03/workRouteMngt/retrieveDcsnYn", inputData);
            boolean check = false;
            if(giRslt != null && giRslt.getDataCount() > 0) {
                for(int i=0; i < giRslt.getDataCount(); i++) {
                    if(giRslt.getInt("cnt", i) > 0) {
                        check = true;
                        break;
                    }
                }
            }

            //확정된건이 하나도 없다면
            if(!check) {
                if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)) {
                    //물류서비스구분이 출고운송인 경우
                    inputData.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT);

                } else if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT_TRANS)) {
                    //물류서비스 구분이 운송입고인경우
                    inputData.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_INPUT);

                } else if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_17)) {
                    //물류서비스 구분이 출고운송포워딩인경우
                    inputData.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_28);

                } else if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)) {
                    //물류서비스 구분이 출고운송입고인경우
                    inputData.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_30);
                }

                dao2.add("cud/om/tb_om02001/updateSalesOrdTypeCd", inputData);
                dao2.executeUpdate();

                inputData.set("LCompoundDao", dao2);
                setSalesOrdHistory(inputData);

                if(!inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT_TRANS)) {
                    LMultiData workRoute = dao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteList", inputData);
                    LData workRouteParam = null;
                    if(workRoute != null && workRoute.getDataCount() > 0) {
                        for(int i=0; i < workRoute.getDataCount(); i++) {
                            workRouteParam = workRoute.getLData(i);
                            LMultiData workRouteItem = dao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteItemList", workRouteParam);
                            //경로삭제 처리
                            LMultiData workParam    = new LMultiData();
                            workParam.addLData(workRouteParam);

                            LMultiData param        = new LMultiData();
                            param.add("IN_DS1", workParam);
                            param.add("INPUT", inputData);
                            param.add("LCompoundDao", dao2);

                           pbcRoute.deleteWorkRoute(param);

                            workRouteParam.setString("regrId", inputData.getString("regrId"));
                            workRouteParam.setString("mdfrId", inputData.getString("mdfrId"));

                            if(workRouteItem != null && workRouteItem.getDataCount() > 0) {
                                for(int x = 0; x < workRouteItem.getDataCount(); x++) {
                                    workRouteItem.modifyString("regrId", x, inputData.getString("regrId"));
                                    workRouteItem.modifyString("mdfrId", x, inputData.getString("mdfrId"));
                                }
                            }
                            workRouteParam.set("LCompoundDao", dao2);

                            pbcRoute.createBasisWorkRoute(workRouteParam, workRouteItem);
                        }
                    }
                } else {//입고이면
                    LData salesOrd = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", inputData);
                    LMultiData salesOrdItem = dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemList", inputData);
                    salesOrd.setString("regrId", inputData.getString("regrId"));
                    salesOrd.setString("mdfrId", inputData.getString("mdfrId"));

                    LMultiData item = new LMultiData();
                    LData itemTemp = null;
                    if(salesOrdItem != null && salesOrdItem.getDataCount() > 0) {
                        for(int x = 0; x < salesOrdItem.getDataCount(); x++) {
                            itemTemp = salesOrdItem.getLData(x);

                            //LLog.debug.println("*************+++++++++itemTemp"+itemTemp);
                            String palletQty = itemTemp.getString("palletQty");
                            if(palletQty.equals("")) palletQty = "0";

                            itemTemp.setDouble("palletQty", Double.parseDouble(palletQty));

                            item.addLData(itemTemp);
                        }
                    }

                    salesOrd.set("LCompoundDao", dao2);
                    createSalesOrdRest(salesOrd, item);
                }

            } else {
                throw new LBizException("hsni.om.warn.existGiRsltData?자가운송");
            }

        } catch(LBizException be) {
            throw be;
        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "processSelfTran()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    public void changeSelfTranOrderType_back(LData inputData1) throws LException {
        LCompoundDao dao2 = new LCompoundDao();
        LMultiData result1  = retrieveBackOrderItemList(inputData1);

        LMultiData backOrdItemData = (LMultiData)result1.get("OBJECT_TO_GDRs", 0);
        laf.application.dao.LCompoundDao cDao = new laf.application.dao.LCompoundDao();

        LLog.debug.println("inputData1=======>" + inputData1);
        LLog.debug.println("backOrdItemData=======>" + backOrdItemData);

        try{

             //전체 작업경로의 확정여부 체크
            /*
            LMultiData giRslt = dao2.executeQuery("select/om/om03/workRouteMngt/retrieveDcsnYn", inputData1);
            boolean check = false;
            if(giRslt != null && giRslt.getDataCount() > 0) {
                for(int i=0; i < giRslt.getDataCount(); i++) {
                    if(giRslt.getInt("cnt", i) > 0) {
                        check = true;
                        break;
                    }
                }
            }
            */
            //확정된건이 하나도 없다면
            //if(!check) {
                if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)) {
                    //물류서비스구분이 출고운송인 경우
                    inputData1.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT);

                } else if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT_TRANS)) {
                    //물류서비스 구분이 운송입고인경우
                    inputData1.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_INPUT);

                } else if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_17)) {
                    //물류서비스 구분이 출고운송포워딩인경우
                    inputData1.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_28);

                } else if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)) {
                    //물류서비스 구분이 출고운송입고인경우
                    inputData1.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_30);
                }

                dao2.add("cud/om/tb_om02001/updateSalesOrdTypeCd", inputData1);
                dao2.executeUpdate();
            //}


            //대기오더여부체크
            LData backOrdYn = checkAvailStock(inputData1);
            LLog.debug.println("backOrdYn=======>" + backOrdYn.getString("backOrdYn"));

            //대기오더가 아닌 경우만 분배로직 호출
            if(!"Y".equals(backOrdYn.getString("backOrdYn"))){

                IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
                String salesOrdNo   = (String)backOrdItemData.getLData(0).getString("salesOrdNo");
                LData ordData = new LData();
                ordData = inputData1;

                LMultiData works = new LMultiData();
                if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                    for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                        LData temp = backOrdItemData.getLData(i);
                        LLog.debug.println("temp=======>" + temp);
                        LData itemData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrderItemList", temp);
                        double remainQty = Double.parseDouble(temp.getString("remainQty") != null && !temp.getString("remainQty").equals("") ? temp.getString("remainQty") : "0");
                        double remainWgt = Double.parseDouble(temp.getString("remainWgt") != null && !temp.getString("remainWgt").equals("") ? temp.getString("remainWgt") : "0");
                        double itemRemainQty = Double.parseDouble(itemData.getString("remainQty") != null && !itemData.getString("remainQty").equals("") ? itemData.getString("remainQty") : "0");
                        double itemRemainWgt = Double.parseDouble(itemData.getString("remainWgt") != null && !itemData.getString("remainWgt").equals("") ? itemData.getString("remainWgt") : "0");
                        LLog.debug.println(remainQty + "         " + itemRemainQty);
                        LLog.debug.println(remainWgt + "         " + itemRemainWgt);
                        if(remainQty != itemRemainQty || remainWgt != itemRemainWgt) {
                            throw new LBizException("이미 분배되었습니다.확인하시기 바랍니다.");
                        }
                    }
                }

                if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                    for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                        LData temp = (LData)backOrdItemData.getLData(i);
                            if(temp.getString("dptArCd") == null || temp.getString("dptArCd").equals("")) {
                                temp.setString("dptArCd"        ,  ordData.getString("dptArCd") );
                                temp.setString("dptArTypeCd"    ,  ordData.getString("dptArTypeCd") );
                                temp.setString("dptArZipCd"     ,  ordData.getString("dptArZipCd") );
                                temp.setString("dptArZipAddr"   ,  ordData.getString("dptArZipAddr") );
                                temp.setString("dptArDtlAddr"   ,  ordData.getString("dptArDtlAddr") );
                            }
                            if(temp.getString("arvArCd") == null || temp.getString("arvArCd").equals("")) {
                                temp.setString("arvArCd"        , ordData.getString("arvArCd") );
                                temp.setString("arvArTypeCd"    , ordData.getString("arvArTypeCd") );
                                temp.setString("arvArZipCd"     ,  ordData.getString("arvArZipCd") );
                                temp.setString("arvArZipAddr"   ,  ordData.getString("arvArZipAddr") );
                                temp.setString("arvArDtlAddr"   ,  ordData.getString("arvArDtlAddr") );
                            }
                            works.addLData(temp);
                    }
                }

                LMultiData masters = new LMultiData();
                if(works != null && works.getDataCount() > 0) {
                    for(int i=0; i < works.getDataCount(); i++) {
                        LData master = new LData();
                        master.setString("salesOrdNo",  salesOrdNo);
                        master.setString("lineNo"       , works.getString("lineNo", i));
                        master.setString("ordTypeCd"    , ordData.getString("ordTypeCd"));
                        master.setString("dptArCd"      , works.getString("dptArCd", i));
                        master.setString("dptArTypeCd"  , works.getString("dptArTypeCd", i));
                        master.setString("dptArZipCd"   , works.getString("dptArZipCd", i));
                        master.setString("dptArZipAddr" , works.getString("dptArZipAddr", i));
                        master.setString("dptArDtlAddr" , works.getString("dptArDtlAddr", i));

                        master.setString("arvArCd"      , works.getString("arvArCd", i));
                        master.setString("arvArTypeCd"  , works.getString("arvArTypeCd", i));
                        master.setString("arvArZipCd"   , works.getString("arvArZipCd", i));
                        master.setString("arvArZipAddr" , works.getString("arvArZipAddr", i));
                        master.setString("arvArDtlAddr" , works.getString("arvArDtlAddr", i));

                        master.setString("strtReqYmd"   , ordData.getString("strtReqYmd"));
                        master.setString("strtReqHm"    , ordData.getString("strtReqHm"));
                        master.setString("aptdReqYmd"   , works.getString("aptdReqYmd", i));
                        master.setString("aptdReqHm"    , works.getString("aptdReqHm",  i));
                        master.setString("regrId"       , ordData.getString("regrId"));
                        master.setString("mdfrId"       , ordData.getString("mdfrId"));

                        if(masters != null && masters.getDataCount() > 0) {
                            for(int j=0; j < masters.getDataCount(); j++) {
                                LData temp = (LData)masters.getLData(j);
                                if(!master.getString("lineNo").equals(temp.getString("lineNo"))) {
                                    if( !(master.getString("dptArCd").equals(temp.getString("dptArCd"))
                                       && master.getString("arvArCd").equals(temp.getString("arvArCd"))
                                       && master.getString("aptdReqYmd").equals(temp.getString("aptdReqYmd"))
                                       && master.getString("aptdReqHm").equals(temp.getString("aptdReqHm")) )
                                    ) {
                                        masters.addLData(master);
                                    }
                                }
                            }
                        } else {
                            masters.addLData(master);
                        }
                    }
                }

                if(masters != null && masters.getDataCount() > 0) {
                    for(int i=0; i < masters.getDataCount(); i++) {
                        LData workRoute = (LData)masters.getLData(i);

                        LMultiData items = new LMultiData();
                        for(int j=0; j < works.getDataCount(); j++) {
                            LData item = new LData();

                            item.setString("salesOrdNo",    salesOrdNo);
                            item.setString("lineNo",        works.getString("lineNo",   j));
                            item.setString("custCd",        works.getString("custCd",   j));
                            item.setString("itemCd",        works.getString("itemCd",   j));
                            item.setString("basisUnitCd",   works.getString("basisUnitCd",j));
                            item.setDouble("ordQty",        Double.parseDouble(works.getString("ordQty",    j)));
                            item.setString("qtyUnitCd",     works.getString("qtyUnitCd",    j));
                            item.setDouble("ordWgt",        Double.parseDouble(works.getString("ordWgt",    j)));
                            item.setString("wgtUnitCd",     works.getString("wgtUnitCd",    j));
                            item.setDouble("ordCbm",        Double.parseDouble(works.getString("ordCbm",    j)));
                            item.setString("dptArCd",       works.getString("dptArCd",  j));
                            item.setString("dptArTypeCd",   works.getString("dptArTypeCd",  j));
                            item.setString("arvArCd",       works.getString("arvArCd",  j));
                            item.setString("arvArTypeCd",   works.getString("arvArTypeCd",  j));
                            item.setString("aptdReqYmd",    works.getString("aptdReqYmd",   j));
                            item.setString("aptdReqHm",     works.getString("aptdReqHm",    j));
                            item.setString("regrId",        ordData.getString("regrId"));
                            item.setString("mdfrId",        ordData.getString("mdfrId"));

                            if( (item.getString("dptArCd").equals(workRoute.getString("dptArCd"))
                               && item.getString("arvArCd").equals(workRoute.getString("arvArCd"))
                               && item.getString("aptdReqYmd").equals(workRoute.getString("aptdReqYmd"))
                               && item.getString("aptdReqHm").equals(workRoute.getString("aptdReqHm")) )
                            ) {
                                items.addLData(item);
                            }
                        }
                        workRoute.set("LCompoundDao", cDao);
                        workPbc.createBasisWorkRoute(workRoute, items);
                    }
                }

    //          변경납기요청일시 정보를 수정
                inputData1.setString("mdfrId", ordData.getString("mdfrId"));
                dao2.add("cud/om/tb_om02001/updateChgAptdDate", inputData1);
                dao2.executeUpdate();

    //          대기오더 분배가 완료되었는지 여부를 조회
                laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao();
                LData result = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", inputData1);
                String cmptYn = "Y";
                if(result.getInt("cnt") == 0) {
                    cmptYn = "N";
                }

    //          대기오더분배가 완료되었으면 실행
                if(cmptYn.equals("N")) {
                    inputData1.setString("backOrdYn", "N");
                    dao2.add("cud/om/tb_om02001/changeBackOrdStat", inputData1);
                    dao2.executeUpdate();
                }
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "changeSelfTranOrderType()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "changeSelfTranOrderType()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 일괄 CSN운송전환하는  메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */

    public void changeCsnTranOrderType(LData inputData) throws LException {
        /*
        출고로 접수된 오더를 출고운송으로 전환시킨다.

        argument:
        판매오더번호

        처리절차

         */
        laf.application.dao.LCommonDao dao          = new laf.application.dao.LCommonDao();
        laf.application.dao.LCompoundDao dao2       = new laf.application.dao.LCompoundDao();
        ISalesOrdMngt pbcOrd = (ISalesOrdMngt)PbcUtil.getPbc(ISalesOrdMngt.class);
        IWorkRouteMngt pbcRoute = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);

        try {
             //전체 작업경로의 확정여부 체크
            LMultiData giRslt = dao.executeQuery("select/om/om03/workRouteMngt/retrieveDcsnYn", inputData);
            boolean check = false;
            if(giRslt != null && giRslt.getDataCount() > 0) {
                for(int i=0; i < giRslt.getDataCount(); i++) {
                    if(giRslt.getInt("cnt", i) > 0) {
                        check = true;
                        break;
                    }
                }
            }

            //확정된건이 하나도 없다면
            if(!check) {
                if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)) {
                    inputData.setString("targetLogisSvcSctnCd"  , OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS);

                } else if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT)) {
                    inputData.setString("targetLogisSvcSctnCd"  , OmConstants.LOGIS_SVC_SCTN_CD_INPUT_TRANS);

                } else if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_28)) {
                    inputData.setString("targetLogisSvcSctnCd"  , OmConstants.LOGIS_SVC_SCTN_CD_17);

                } else if(inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_30)) {
                    //물류서비스 구분이 출고입고인경우
                    inputData.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT);
                }

                dao2.add("cud/om/tb_om02001/updateSalesOrdTypeCd", inputData);
                dao2.executeUpdate();

                inputData.set("LCompoundDao", dao2);

                setSalesOrdHistory(inputData);

                if(!inputData.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT)) {//출고/출고포워딩이면
                    LMultiData workRoute = dao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteList", inputData);
                    LData workRouteParam = null;
                    if(workRoute != null && workRoute.getDataCount() > 0) {
                        for(int i=0; i < workRoute.getDataCount(); i++) {
                            workRouteParam          = workRoute.getLData(i);

                            LMultiData workRouteItem = dao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteItemList", workRouteParam);

                            LMultiData workParam    = new LMultiData();
                            workParam.addLData(workRouteParam);

                            LMultiData param        = new LMultiData();
                            param.add("IN_DS1", workParam);
                            param.add("INPUT", inputData);
                            param.add("LCompoundDao", dao2);

                            pbcRoute.deleteWorkRoute(param);

                            workRouteParam.setString("regrId", inputData.getString("regrId"));
                            workRouteParam.setString("mdfrId", inputData.getString("mdfrId"));

                            if(workRouteItem != null && workRouteItem.getDataCount() > 0) {
                                for(int x = 0; x < workRouteItem.getDataCount(); x++) {
                                    workRouteItem.modifyString("regrId", x, inputData.getString("regrId"));
                                    workRouteItem.modifyString("mdfrId", x, inputData.getString("mdfrId"));
                                }
                            }
                            workRouteParam.set("LCompoundDao", dao2);
                            pbcRoute.createBasisWorkRoute(workRouteParam, workRouteItem);
                        }
                    }
                } else {//입고이면
                    LData salesOrd = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", inputData);
                    LMultiData salesOrdItem = dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemList", inputData);
                    salesOrd.setString("regrId", inputData.getString("regrId"));
                    salesOrd.setString("mdfrId", inputData.getString("mdfrId"));
                    salesOrd.set("LCompoundDao", dao2);

                    createSalesOrdRest(salesOrd, salesOrdItem);
                }

            } else {
                String messageName = "";
                messageName = "당사운송";

                throw new LBizException("hsni.om.warn.existGiRsltData?" + messageName);

            }
        } catch(LBizException be) {
            throw be;
        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "processCsnTran()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    public void changeCsnTranOrderType_back(LData inputData1) throws LException {
        LCompoundDao dao2 = new LCompoundDao();
        LMultiData result1  = retrieveBackOrderItemList(inputData1);

        LMultiData backOrdItemData = (LMultiData)result1.get("OBJECT_TO_GDRs", 0);
        laf.application.dao.LCompoundDao cDao = new laf.application.dao.LCompoundDao();

        LLog.debug.println("inputData1=======>" + inputData1);
        LLog.debug.println("backOrdItemData=======>" + backOrdItemData);

        try{
            /*
             //전체 작업경로의 확정여부 체크
            LMultiData giRslt = dao2.executeQuery("select/om/om03/workRouteMngt/retrieveDcsnYn", inputData1);
            boolean check = false;
            if(giRslt != null && giRslt.getDataCount() > 0) {
                for(int i=0; i < giRslt.getDataCount(); i++) {
                    if(giRslt.getInt("cnt", i) > 0) {
                        check = true;
                        break;
                    }
                }
            }
            */
            //확정된건이 하나도 없다면
            //if(!check) {
                if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)) {
                    inputData1.setString("targetLogisSvcSctnCd" , OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS);

                } else if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT)) {
                    inputData1.setString("targetLogisSvcSctnCd" , OmConstants.LOGIS_SVC_SCTN_CD_INPUT_TRANS);

                } else if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_28)) {
                    inputData1.setString("targetLogisSvcSctnCd" , OmConstants.LOGIS_SVC_SCTN_CD_17);

                } else if(inputData1.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_30)) {
                    //물류서비스 구분이 출고입고인경우
                    inputData1.setString("targetLogisSvcSctnCd", OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT);
                }

                dao2.add("cud/om/tb_om02001/updateSalesOrdTypeCd", inputData1);
                dao2.executeUpdate();

            //}

            //대기오더여부체크
            LData backOrdYn = checkAvailStock(inputData1);
            LLog.debug.println("backOrdYn=======>" + backOrdYn.getString("backOrdYn"));

            //대기오더가 아닌 경우만 분배로직 호출
            if(!"Y".equals(backOrdYn.getString("backOrdYn"))){

                IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
                String salesOrdNo   = (String)backOrdItemData.getLData(0).getString("salesOrdNo");
                LData ordData = new LData();
                ordData = inputData1;

                LMultiData works = new LMultiData();
                if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                    for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                        LData temp = backOrdItemData.getLData(i);
                        LLog.debug.println("temp=======>" + temp);
                        LData itemData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrderItemList", temp);
                        double remainQty = Double.parseDouble(temp.getString("remainQty") != null && !temp.getString("remainQty").equals("") ? temp.getString("remainQty") : "0");
                        double remainWgt = Double.parseDouble(temp.getString("remainWgt") != null && !temp.getString("remainWgt").equals("") ? temp.getString("remainWgt") : "0");
                        double itemRemainQty = Double.parseDouble(itemData.getString("remainQty") != null && !itemData.getString("remainQty").equals("") ? itemData.getString("remainQty") : "0");
                        double itemRemainWgt = Double.parseDouble(itemData.getString("remainWgt") != null && !itemData.getString("remainWgt").equals("") ? itemData.getString("remainWgt") : "0");
                        LLog.debug.println(remainQty + "         " + itemRemainQty);
                        LLog.debug.println(remainWgt + "         " + itemRemainWgt);
                        if(remainQty != itemRemainQty || remainWgt != itemRemainWgt) {
                            throw new LBizException("이미 분배되었습니다.확인하시기 바랍니다.");
                        }
                    }
                }

                if(backOrdItemData != null && backOrdItemData.getDataCount() > 0) {
                    for(int i=0; i < backOrdItemData.getDataCount(); i++) {
                        LData temp = (LData)backOrdItemData.getLData(i);
                            if(temp.getString("dptArCd") == null || temp.getString("dptArCd").equals("")) {
                                temp.setString("dptArCd"        ,  ordData.getString("dptArCd") );
                                temp.setString("dptArTypeCd"    ,  ordData.getString("dptArTypeCd") );
                                temp.setString("dptArZipCd"     ,  ordData.getString("dptArZipCd") );
                                temp.setString("dptArZipAddr"   ,  ordData.getString("dptArZipAddr") );
                                temp.setString("dptArDtlAddr"   ,  ordData.getString("dptArDtlAddr") );
                            }
                            if(temp.getString("arvArCd") == null || temp.getString("arvArCd").equals("")) {
                                temp.setString("arvArCd"        , ordData.getString("arvArCd") );
                                temp.setString("arvArTypeCd"    , ordData.getString("arvArTypeCd") );
                                temp.setString("arvArZipCd"     ,  ordData.getString("arvArZipCd") );
                                temp.setString("arvArZipAddr"   ,  ordData.getString("arvArZipAddr") );
                                temp.setString("arvArDtlAddr"   ,  ordData.getString("arvArDtlAddr") );
                            }
                            works.addLData(temp);
                    }
                }

                LMultiData masters = new LMultiData();
                if(works != null && works.getDataCount() > 0) {
                    for(int i=0; i < works.getDataCount(); i++) {
                        LData master = new LData();
                        master.setString("salesOrdNo",  salesOrdNo);
                        master.setString("lineNo"       , works.getString("lineNo", i));
                        master.setString("ordTypeCd"    , ordData.getString("ordTypeCd"));
                        master.setString("dptArCd"      , works.getString("dptArCd", i));
                        master.setString("dptArTypeCd"  , works.getString("dptArTypeCd", i));
                        master.setString("dptArZipCd"   , works.getString("dptArZipCd", i));
                        master.setString("dptArZipAddr" , works.getString("dptArZipAddr", i));
                        master.setString("dptArDtlAddr" , works.getString("dptArDtlAddr", i));

                        master.setString("arvArCd"      , works.getString("arvArCd", i));
                        master.setString("arvArTypeCd"  , works.getString("arvArTypeCd", i));
                        master.setString("arvArZipCd"   , works.getString("arvArZipCd", i));
                        master.setString("arvArZipAddr" , works.getString("arvArZipAddr", i));
                        master.setString("arvArDtlAddr" , works.getString("arvArDtlAddr", i));

                        master.setString("strtReqYmd"   , ordData.getString("strtReqYmd"));
                        master.setString("strtReqHm"    , ordData.getString("strtReqHm"));
                        master.setString("aptdReqYmd"   , works.getString("aptdReqYmd", i));
                        master.setString("aptdReqHm"    , works.getString("aptdReqHm",  i));
                        master.setString("regrId"       , ordData.getString("regrId"));
                        master.setString("mdfrId"       , ordData.getString("mdfrId"));

                        if(masters != null && masters.getDataCount() > 0) {
                            for(int j=0; j < masters.getDataCount(); j++) {
                                LData temp = (LData)masters.getLData(j);
                                if(!master.getString("lineNo").equals(temp.getString("lineNo"))) {
                                    if( !(master.getString("dptArCd").equals(temp.getString("dptArCd"))
                                       && master.getString("arvArCd").equals(temp.getString("arvArCd"))
                                       && master.getString("aptdReqYmd").equals(temp.getString("aptdReqYmd"))
                                       && master.getString("aptdReqHm").equals(temp.getString("aptdReqHm")) )
                                    ) {
                                        masters.addLData(master);
                                    }
                                }
                            }
                        } else {
                            masters.addLData(master);
                        }
                    }
                }

                if(masters != null && masters.getDataCount() > 0) {
                    for(int i=0; i < masters.getDataCount(); i++) {
                        LData workRoute = (LData)masters.getLData(i);

                        LMultiData items = new LMultiData();
                        for(int j=0; j < works.getDataCount(); j++) {
                            LData item = new LData();

                            item.setString("salesOrdNo",    salesOrdNo);
                            item.setString("lineNo",        works.getString("lineNo",   j));
                            item.setString("custCd",        works.getString("custCd",   j));
                            item.setString("itemCd",        works.getString("itemCd",   j));
                            item.setString("basisUnitCd",   works.getString("basisUnitCd",j));
                            item.setDouble("ordQty",        Double.parseDouble(works.getString("ordQty",    j)));
                            item.setString("qtyUnitCd",     works.getString("qtyUnitCd",    j));
                            item.setDouble("ordWgt",        Double.parseDouble(works.getString("ordWgt",    j)));
                            item.setString("wgtUnitCd",     works.getString("wgtUnitCd",    j));
                            item.setDouble("ordCbm",        Double.parseDouble(works.getString("ordCbm",    j)));
                            item.setString("dptArCd",       works.getString("dptArCd",  j));
                            item.setString("dptArTypeCd",   works.getString("dptArTypeCd",  j));
                            item.setString("arvArCd",       works.getString("arvArCd",  j));
                            item.setString("arvArTypeCd",   works.getString("arvArTypeCd",  j));
                            item.setString("aptdReqYmd",    works.getString("aptdReqYmd",   j));
                            item.setString("aptdReqHm",     works.getString("aptdReqHm",    j));
                            item.setString("regrId",        ordData.getString("regrId"));
                            item.setString("mdfrId",        ordData.getString("mdfrId"));

                            if( (item.getString("dptArCd").equals(workRoute.getString("dptArCd"))
                               && item.getString("arvArCd").equals(workRoute.getString("arvArCd"))
                               && item.getString("aptdReqYmd").equals(workRoute.getString("aptdReqYmd"))
                               && item.getString("aptdReqHm").equals(workRoute.getString("aptdReqHm")) )
                            ) {
                                items.addLData(item);
                            }
                        }
                        workRoute.set("LCompoundDao", cDao);
                        workPbc.createBasisWorkRoute(workRoute, items);
                    }
                }

    //          변경납기요청일시 정보를 수정
                inputData1.setString("mdfrId", ordData.getString("mdfrId"));
                dao2.add("cud/om/tb_om02001/updateChgAptdDate", inputData1);
                dao2.executeUpdate();

    //          대기오더 분배가 완료되었는지 여부를 조회
                laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao();
                LData result = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", inputData1);
                String cmptYn = "Y";
                if(result.getInt("cnt") == 0) {
                    cmptYn = "N";
                }

    //          대기오더분배가 완료되었으면 실행
                if(cmptYn.equals("N")) {
                    inputData1.setString("backOrdYn", "N");
                    dao2.add("cud/om/tb_om02001/changeBackOrdStat", inputData1);
                    dao2.executeUpdate();
                }
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "changeCsnTranOrderType()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "changeCsnTranOrderType()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 해상수입출고 저장  메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void saveDivideImpGiOrd(LMultiData inputData) throws LException {
        LMultiData  itemData    = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData  headerData  = (LMultiData)inputData.get("IN_DS2",0);
        LData       input       = (LData)inputData.get("INPUT",0);
        IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
        laf.application.dao.LCompoundDao iDao = new laf.application.dao.LCompoundDao();
        try {
            if(headerData != null && headerData.getDataCount() > 0) {
                iDao.add("cud/om/tb_om02001/updateLoadDlyRsltNo", headerData);
                iDao.executeUpdate();
            }
            LMultiData items = null;
            if(itemData != null && itemData.getDataCount() > 0) {
                for(int i = 0; i < itemData.getDataCount(); i++) {
                    if(itemData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_INSERT) {
                        LData master = new LData();
                        master.setString("salesOrdNo"   , itemData.getString("salesOrdNo"   , i));
                        master.setString("lineNo"       , itemData.getString("lineNo"       , i));
                        master.setString("ordTypeCd"    , itemData.getString("ordTypeCd"    , i));
                        master.setString("dptArCd"      , itemData.getString("dptArCd"      , i));
                        master.setString("dptArTypeCd"  , itemData.getString("dptArTypeCd"  , i));
                        master.setString("dptArZipCd"   , itemData.getString("dptArZipCd"   , i));
                        master.setString("dptArZipAddr" , itemData.getString("dptArZipAddr" , i));
                        master.setString("dptArDtlAddr" , itemData.getString("dptArDtlAddr" , i));

                        master.setString("arvArCd"      , itemData.getString("arvArCd"      , i));
                        master.setString("arvArTypeCd"  , itemData.getString("arvArTypeCd"  , i));
                        master.setString("arvArZipCd"   , itemData.getString("arvArZipCd"   , i));
                        master.setString("arvArZipAddr" , itemData.getString("arvArZipAddr" , i));
                        master.setString("arvArDtlAddr" , itemData.getString("arvArDtlAddr" , i));

                        master.setString("strtReqYmd"   , itemData.getString("strtReqYmd"   , i));
                        master.setString("strtReqHm"    , itemData.getString("strtReqHm"    , i));
                        master.setString("aptdReqYmd"   , itemData.getString("aptdReqYmd"   , i));
                        master.setString("aptdReqHm"    , itemData.getString("aptdReqHm"    , i));
                        master.setString("blNo"         , itemData.getString("blNo"         , i));
                        master.setString("blCustOrdNo"  , itemData.getString("blCustOrdNo"  , i));
                        master.setString("drctLoadYn"   , itemData.getString("drctLoadYn"   , i));
                        master.setString("tranCondCd"   , itemData.getString("tranCondCd"   , i));
                        master.setString("loadDlyYn"    , itemData.getString("loadDlyYn"    , i));
                        master.setString("loadDlyRltdSalesOrdNo"    , itemData.getString("loadDlyRltdSalesOrdNo"    , i));
                        master.setString("regrId"       , input.getString("regrId"));
                        master.setString("mdfrId"       , input.getString("mdfrId"));

                        LData item = new LData();
                        items = new LMultiData();

                        item.setString("salesOrdNo",    itemData.getString("salesOrdNo" , i));
                        item.setString("lineNo",        itemData.getString("lineNo"     , i));
                        item.setString("custCd",        itemData.getString("custCd"     , i));
                        item.setString("itemCd",        itemData.getString("itemCd"     , i));
                        item.setDouble("ordQty",        itemData.getDouble("ordQty"     , i));
                        item.setDouble("ordWgt",        itemData.getDouble("ordWgt"     , i));
                        item.setDouble("admt",          itemData.getDouble("ordAdmt"    , i));
                        item.setString("dptArCd",       itemData.getString("dptArCd"    , i));
                        item.setString("dptArTypeCd",   itemData.getString("dptArTypeCd", i));
                        item.setString("arvArCd",       itemData.getString("arvArCd"    , i));
                        item.setString("arvArTypeCd",   itemData.getString("arvArTypeCd", i));
                        item.setString("aptdReqYmd",    itemData.getString("aptdReqYmd" , i));
                        item.setString("aptdReqHm",     itemData.getString("aptdReqHm"  , i));
                        item.setString("regrId",        input.getString("regrId"));
                        item.setString("mdfrId",        input.getString("mdfrId"));
                        items.addLData(item);

                        master.set("LCompoundDao", iDao);
                        workPbc.createBasisWorkRoute(master, items);

                    } else if(itemData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE) {
                        LData item = new LData();
                        items = new LMultiData();
                        item.setString("salesOrdNo",    itemData.getString("salesOrdNo"     , i));
                        item.setString("workRouteSeq",  itemData.getString("workRouteSeq"   , i));
                        item.setString("ordDivDgrCnt",  itemData.getString("ordDivDgrCnt"   , i));
                        item.setString("lineNo",        itemData.getString("lineNo"         , i));
                        item.setString("regrId",        input.getString("regrId"));
                        item.setString("mdfrId",        input.getString("mdfrId"));

                        items.addLData(item);
                        LMultiData param = new LMultiData();
                        param.add("IN_DS1", items);
                        param.add("INPUT", input);
                        param.add("LCompoundDao", iDao);

                        workPbc.deleteWorkRoute(param);

                        LData master = new LData();
                        master.setString("salesOrdNo"   , itemData.getString("salesOrdNo"   , i));
                        master.setString("lineNo"       , itemData.getString("lineNo"       , i));
                        master.setString("ordTypeCd"    , itemData.getString("ordTypeCd"    , i));
                        master.setString("dptArCd"      , itemData.getString("dptArCd"      , i));
                        master.setString("dptArTypeCd"  , itemData.getString("dptArTypeCd"  , i));
                        master.setString("dptArZipCd"   , itemData.getString("dptArZipCd"   , i));
                        master.setString("dptArZipAddr" , itemData.getString("dptArZipAddr" , i));
                        master.setString("dptArDtlAddr" , itemData.getString("dptArDtlAddr" , i));
                        master.setString("basisUnitCd"      , itemData.getString("basisUnitCd",i));

                        master.setString("arvArCd"      , itemData.getString("arvArCd"      , i));
                        master.setString("arvArTypeCd"  , itemData.getString("arvArTypeCd"  , i));
                        master.setString("arvArZipCd"   , itemData.getString("arvArZipCd"   , i));
                        master.setString("arvArZipAddr" , itemData.getString("arvArZipAddr" , i));
                        master.setString("arvArDtlAddr" , itemData.getString("arvArDtlAddr" , i));

                        master.setString("strtReqYmd"   , itemData.getString("strtReqYmd"   , i));
                        master.setString("strtReqHm"    , itemData.getString("strtReqHm"    , i));
                        master.setString("aptdReqYmd"   , itemData.getString("aptdReqYmd"   , i));
                        master.setString("aptdReqHm"    , itemData.getString("aptdReqHm"    , i));
                        master.setString("blNo"         , itemData.getString("blNo"         , i));
                        master.setString("drctLoadYn"   , itemData.getString("drctLoadYn"   , i));
                        master.setString("tranCondCd"   , itemData.getString("tranCondCd"   , i));
                        master.setString("loadDlyYn"    , itemData.getString("loadDlyYn"    , i));
                        master.setString("loadDlyRltdSalesOrdNo"    , itemData.getString("loadDlyRltdSalesOrdNo"    , i));
                        master.setString("regrId"       , input.getString("regrId"));
                        master.setString("basisUnitCd"      , itemData.getString("basisUnitCd",i));

                        item = new LData();
                        items = new LMultiData();
                        item.setString("salesOrdNo",    itemData.getString("salesOrdNo" , i));
                        item.setString("lineNo",        itemData.getString("lineNo"     , i));
                        item.setString("custCd",        itemData.getString("custCd"     , i));
                        item.setString("itemCd",        itemData.getString("itemCd"     , i));
                        item.setDouble("ordQty",        itemData.getDouble("ordQty"     , i));
                        item.setDouble("ordWgt",        itemData.getDouble("ordWgt"     , i));
                        item.setDouble("admt",          itemData.getDouble("ordAdmt"    , i));
                        item.setString("dptArCd",       itemData.getString("dptArCd"    , i));
                        item.setString("dptArTypeCd",   itemData.getString("dptArTypeCd", i));
                        item.setString("arvArCd",       itemData.getString("arvArCd"    , i));
                        item.setString("arvArTypeCd",   itemData.getString("arvArTypeCd", i));
                        item.setString("aptdReqYmd",    itemData.getString("aptdReqYmd" , i));
                        item.setString("aptdReqHm",     itemData.getString("aptdReqHm"  , i));
                        item.setString("dptArCd",       itemData.getString("dptArCd"    , i));
                        item.setString("regrId",        input.getString("regrId"));
                        item.setString("mdfrId",        input.getString("mdfrId"));
                        item.setString("basisUnitCd"        , itemData.getString("basisUnitCd",i));

                        items.addLData(item);

                        master.set("LCompoundDao", iDao);
                        workPbc.createBasisWorkRoute(master, items);
                    } else if(itemData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE) {
                        LData item = new LData();
                        items = new LMultiData();
                        item.setString("salesOrdNo",    itemData.getString("salesOrdNo"     , i));
                        item.setString("workRouteSeq",  itemData.getString("workRouteSeq"   , i));
                        item.setString("ordDivDgrCnt",  itemData.getString("ordDivDgrCnt"   , i));
                        item.setString("lineNo",        itemData.getString("lineNo"         , i));
                        item.setString("regrId",        input.getString("regrId"));
                        item.setString("mdfrId",        input.getString("mdfrId"));

                        items.addLData(item);
                        LMultiData param = new LMultiData();
                        param.add("IN_DS1", items);
                        param.add("INPUT", input);
                        param.add("LCompoundDao", iDao);
                        workPbc.deleteWorkRoute(param);

                    }
                }
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "saveDivideImpGiOrd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveDivideImpGiOrd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

    }

    /**
     * 미연계 판매오더 생성  메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public String createDcnctSalesOrd(LData inputData) throws LException {
        String jobType = inputData.getString("jobType");
        String salesOrdNo = "";
        LCompoundDao dao = CompGauDaoUtil.getTransaction(inputData);
        boolean check = false;
        String[] requiredField = null;
        /*
         - 판매오더번호     (조건부필수 수정이나 삭제 시에만 필수) SALES_ORD_NO
         - 법인코드         (필수)  CORP_CD
         - 오더유형코드     (필수)  ORD_TYPE_CD
         - 추가서비스유형코드 (필수 오더유형이 예외인 경우 필수) ADD_SVC_TYPE_CD
         - 수출입내수구분코드 (필수) EXP_IMP_DOM_SCTN_CD
         - 화물형태코드     (조건부필수 수출입내수구분코드가 01 또는 02일 경우 필수) CARGO_FORM_CD
         - 계약고객코드     (필수)  CTRT_CUST_CD
         - 계약번호         (필수)  CTRT_NO
         - 매출부서코드     (필수)  SELL_DEPT_CD
         - 영업담당자ID             SALES_OFCR_ID
         - 청구고객코드     (필수)  BILG_CUST_CD
         - 등록자 ID        (필수)  REGR_ID
        */
        try{
            //Validation
            if(jobType != null && ( jobType.equals(OmConstants.JOB_INSERT) || jobType.equals(OmConstants.JOB_UPDATE)) ) {
                requiredField = new String[7];

                requiredField[0] = "corpCd";
                requiredField[1] = "ordTypeCd";
                requiredField[2] = "expImpDomSctnCd";
                requiredField[3] = "ctrtCustCd";
//              requiredField[4] = "ctrtNo";
                requiredField[4] = "sellDeptCd";
                requiredField[5] = "bilgCustCd";
                requiredField[6] = "regrId";

                check = ValidationUtil.checkRequiredData(inputData, requiredField);

                String[] requiredField2 = new String[1];

                if(jobType.equals(OmConstants.JOB_UPDATE)) {
                    requiredField2[0] = "salesOrdNo";
                    check = ValidationUtil.checkRequiredData(inputData, requiredField2);
                }

                String ordTypeCd = inputData.getString("ordTypeCd");
//              laf.application.dao.LCommonDao comDao = new laf.application.dao.LCommonDao();
                LData param = new LData();
                param.setString("ordTypeCd", ordTypeCd);
                LData ordTypeData = (LData)((LMultiData)LGauceConverter.extractRawData(dao.executeQuery("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", param))).getLData(0);
                if(ordTypeData != null && ordTypeData.getString("exceptOrdYn").equals("Y")) {
                    requiredField2[0] = "addSvcTypeCd";
                    check = ValidationUtil.checkRequiredData(inputData, requiredField2);
                }

                String expImpDomSctnCd = inputData.getString("expImpDomSctnCd");
                if((OmConstants.EXP_IMP_EXPORT.equals(expImpDomSctnCd) || OmConstants.EXP_IMP_INCOME.equals(expImpDomSctnCd) ) ) {
                    requiredField2[0] = "cargoFormCd";
                    check = ValidationUtil.checkRequiredData(inputData, requiredField2);
                }
            } else if(jobType != null && jobType.equals(OmConstants.JOB_DELETE)) {
                requiredField = new String[1];
                requiredField[0] = "salesOrdNo";
                check = ValidationUtil.checkRequiredData(inputData, requiredField);
            }


            if(check) {
                if(jobType != null && jobType.equals(OmConstants.JOB_INSERT)) {
                    LData input = new LData();
//                  laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveNewDcnctOrdNo", input);
                    LData result = (LData)((LMultiData)LGauceConverter.extractRawData(dao.executeQuery("select/om/om02/salesOrd/retrieveNewDcnctOrdNo", input))).getLData(0);
                    salesOrdNo = result.getString("salesOrdNo");

                    inputData.setString("salesOrdNo", salesOrdNo);

                    String currentYmd = DateUtil.getCurrentDateString();
                    String currentHm = DateUtil.getCurrentTimeString();
                    String currentDate = DateUtil.getCurrentDateString("yyyyMMddHHmmss");

                    inputData.setString("aptdReqYmd", currentYmd);
                    inputData.setString("aptdReqHm", currentHm.substring(0,4));
                    inputData.setString("salesOrdCmptDate", currentDate);

                    dao.add("cud/om/tb_om02001/createSalesOrd", inputData);
                    dao.executeUpdate();

                } else if(jobType != null && jobType.equals(OmConstants.JOB_UPDATE)) {
                    salesOrdNo = inputData.getString("salesOrdNo");
                    dao.add("cud/om/tb_om02001/updateDcnctOrd", inputData);
                    dao.executeUpdate();

                } else if(jobType != null && jobType.equals(OmConstants.JOB_DELETE)) {
                    salesOrdNo = inputData.getString("salesOrdNo");
                    dao.add("cud/om/tb_om02001/cancelSalesOrd", inputData);
                    dao.executeUpdate();

                }
                return salesOrdNo;
            } else {
                throw new LBizException("pbf.err.om.required");
            }

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "createDcnctSalesOrd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createDcnctSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 내수 판매오더 실행관리 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveDomSalesExceMngt(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{

            retrieveOrdAccessAuth(inputData);

            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo" , inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtItemList"     , inputData));
            dataHolder.add("IN_DS3", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdPrclTitle" , inputData));
            dataHolder.add("IN_DS4", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtItemPrclTitle", inputData));
            dataHolder.add("IN_DS5", dao.executeQuery("select/om/om03/workRouteMngt/retrieveDomSalesOrdDivHist"         , inputData));
            dataHolder.add("IN_DS6", dao.executeQuery("select/om/om02/salesOrd/retrivePalletInfo"   , inputData));
            return dataHolder;

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveDomSalesExceMngt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 내수 판매오더 실행관리 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void saveDomSalesOrdExceMngt(LMultiData inputData) throws LException {
        LMultiData SalesOrdMngtData     = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData SalesOrdMngtListData = (LMultiData)inputData.get("IN_DS2",0 );
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        try{

            LMultiData salesOrdItem = new LMultiData();
            if(SalesOrdMngtListData != null && SalesOrdMngtListData.getDataCount() > 0) {
                for(int i=0; i < SalesOrdMngtListData.getDataCount(); i++) {
                    LData temp = SalesOrdMngtListData.getLData(i);
                    temp.setString("addYn", "N");
                    temp.setString("delYn", "N");
                    if(temp.containsKey("GauceJobType") && temp.getInt("GauceJobType") == GauceDataRow.TB_JOB_DELETE) {
                        temp.setString("delYn", "Y");
                    } else if(temp.containsKey("GauceJobType") && temp.getInt("GauceJobType") == GauceDataRow.TB_JOB_INSERT) {
                        temp.setString("addYn", "Y");
                    }
                    salesOrdItem.addLData(temp);
                }
            }

            //국내내수SO수정 모듈 호출 -수정요망
            LMultiData dataHolder = new LMultiData();
            dataHolder.add("salesOrd"    , SalesOrdMngtData.getLData(0));
            dataHolder.add("salesOrdItem", salesOrdItem);

            LData salesOrdPrcl = new LData();
            Set newSalesOrdPrclSet = SalesOrdMngtData.getLData(0).keySet();
            Iterator newSalesOrdPrclIte = newSalesOrdPrclSet.iterator();
            while(newSalesOrdPrclIte.hasNext()){
                String dataKey = newSalesOrdPrclIte.next().toString();
                if(dataKey != null && !dataKey.equals("GauceJobType")&& !dataKey.equals("updFlag")) {
                    if(dataKey.equals("salesOrdNo")) {
                        salesOrdPrcl.setString("salesOrdNo", SalesOrdMngtData.getString("salesOrdNo", 0));
                    } else {
                        if(dataKey.substring(0,3).equals("col")) {
                            salesOrdPrcl.setString(dataKey, SalesOrdMngtData.getString(dataKey, 0));
                        }
                    }
                }
            }
            dataHolder.add("salesOrdPrcl",salesOrdPrcl);
            LMultiData itemPrcl = new LMultiData();
            LData temp = null;
            if(SalesOrdMngtListData != null && SalesOrdMngtListData.getDataCount() > 0) {
                for(int i=0; i < SalesOrdMngtListData.getDataCount(); i++) {
                    temp = new LData();
                    Set itemPrclSet = SalesOrdMngtListData.getLData(i).keySet();
                    Iterator itemPrclIte = itemPrclSet.iterator();
                    while(itemPrclIte.hasNext()){
                        String dataKey = itemPrclIte.next().toString();
                        if(dataKey != null && !dataKey.equals("updFlag")) {
                            if(dataKey.equals("salesOrdNo")) {
                                temp.setString("salesOrdNo", SalesOrdMngtListData.getString("salesOrdNo", i));
                            } else if(dataKey.equals("lineNo")) {
                                    temp.setString("lineNo", SalesOrdMngtListData.getString("lineNo", i));
                            } else if(dataKey.equals("GauceJobType")) {
                                temp.set("GauceJobType", SalesOrdMngtListData.get("GauceJobType", i));
                            } else {
                                if(dataKey.substring(0,3).equals("col")) {
                                    temp.setString(dataKey, SalesOrdMngtListData.getString(dataKey, i));
                                }
                            }
                        }
                    }
                    itemPrcl.addLData(temp);
                }
            }
            dataHolder.add("salesOrdItemPrcl",itemPrcl);

            dataHolder.add("salesOrdFis",null);
            dataHolder.add("booking",null);
            dataHolder.add("INPUT", (LData)inputData.get("INPUT", 0));
            dataHolder.add("LCompoundDao", dao);

            LData param = new LData();
            param.setString("domMdfProcYn", "Y");
            param.setString("mdfDlyProcYn", "N");

            updateSalesOrd(dataHolder, param);
            LLog.debug.println("updateDomSO 처리 완료");

        } catch (LBizException be){
            LLog.debug.println("==================");
            be.printStackTrace();
            LLog.debug.println("==================");
            throw be;
        } catch (Exception se) {
            LLog.debug.println("==================");
            se.printStackTrace();
            LLog.debug.println("==================");
            LLog.err.println(  this.getClass().getName() + "." + "saveDomSalesOrdExceMngt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 오더를 취소하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *              salesOrdNo          판매오더번호
     *              salesOrdCnclReason  판매오더취소사유
     *              cntDongProcYn       수동수정여부
     *              mdfrId              수정자아이디
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData cancelSO(LData inputData) throws LException {

        laf.application.dao.LCompoundDao dao2 = CompDaoUtil.getTransaction(inputData);
        LData returnValue = new LData();
        LMultiData retValue = new LMultiData();
        try{

            String ifId = inputData.getString("ifId");
            if(ifId.equals("IF_HPP_OM_ImportBL") || ifId.equals("IF_HHP_OM_ImportBL") || ifId.equals("IF_NSK_OM_ImportOrder"))
            {
                LData ordData   = dao2.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpBlSalesOrdNo", inputData);
                if(ordData == null || ordData.getString("salesOrdNo") == null || "".equals(ordData.getString("salesOrdNo"))) {
                    returnValue.setString("key"     , "S");
                    returnValue.setString("message" , "");
                    retValue.addLData(returnValue);
                    return retValue;
                } else {
                    returnValue.setString("key"     , "E");
                    returnValue.setString("message" , "이미 BL확정됨 : " + ordData.getString("salesOrdNo"));
                    retValue.addLData(returnValue);
                    return retValue;
                }
            }

            if(inputData.getString("regrId") == null || "".equals(inputData.getString("regrId"))) {
                inputData.setString("regrId", "sysadm");
            }
            if(inputData.getString("mdfrId") == null || "".equals(inputData.getString("mdfrId"))) {
                inputData.setString("mdfrId", "sysadm");
            }

            LData salesOrd = null;
            if(inputData != null && (inputData.getString("salesOrdNo") == null || inputData.getString("salesOrdNo").equals(""))) {
                salesOrd = dao2.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpBlSalesOrdNo", inputData);
            }
            if(salesOrd != null && salesOrd.getString("salesOrdNo") != null && !salesOrd.getString("salesOrdNo").equals("")) {
                inputData.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
            }

            //확정여부테이블에서 확정상태를 조회하여 체크한다.
            LData workRouteCnt = dao2.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteCount", inputData);
            if(workRouteCnt != null && workRouteCnt.getInt("cnt") > 0) {
                //리턴 취소불가메세지
                returnValue.setString("key", "E");
                returnValue.setString("message", "확정된 내역이 존재하여 오더 취소가 불가합니다.");
                retValue.addLData(returnValue);
                
                //2015-11-16 R2443(이롬) 접수 오류처리                
                if(inputData.getString("custCd").equals(OmConstants.CUST_CO_CD_IR)) { 
                	LData smsData = new LData();
                	laf.application.dao.LCompoundDao smsDao = CompDaoUtil.getTransaction(inputData);
                	smsData.set("LCompoundDao"              , smsDao);
                    smsData.setString("salesOrdNo"          , inputData.getString("salesOrdNo"));
                    smsData.setString("statSctnCd"          , "E2");
                    sendCustOrdStatSms(smsData);
                }
                
                return retValue;
            }


            //3. 판매오더번호 기준으로 국제물류실행실적 테이블을 확인하여 B/L마감 실적이 생성되어
            //   있다면 취소불가 메시지를 리턴한다.
            String[] rsltSctnCd = new String[2];
            rsltSctnCd[0] = OmConstants.FWD_RESULT_SCTN_CD_SR_SEND;
            rsltSctnCd[1] = OmConstants.FWD_RESULT_SCTN_CD_BL_CLS;
            List rsltSctnCdList = new ArrayList();
            for(int i=0; i < rsltSctnCd.length; i++) {
                rsltSctnCdList.add(rsltSctnCd[i]);
            }

            LData stepList = new LData();
            stepList.setString("salesOrdNo", inputData.getString("salesOrdNo"));
            stepList.set("rsltSctnCd", rsltSctnCdList);
            LData fisCnt = dao2.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveFisRslt", stepList);
            if(fisCnt != null && fisCnt.getInt("cnt") > 0) {
                returnValue.setString("key", "E");
                returnValue.setString("message", "B/L이 생성되어 오더 취소가 불가합니다.");
                retValue.addLData(returnValue);
                return retValue;
            }

            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            IWorkRouteMngt pbc2 = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);

            //작업경로 삭제 및 실행오더 취소 처리
            LMultiData workRouteList = dao2.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteList", inputData);
            LData workRouteParam = null;
            if(workRouteList != null && workRouteList.getDataCount() > 0) {
                for(int i=0; i < workRouteList.getDataCount(); i++) {
                    workRouteParam          = workRouteList.getLData(i);

                    LMultiData workParam    = new LMultiData();
                    workParam.addLData(workRouteParam);

                    LMultiData param        = new LMultiData();

                    param.add("IN_DS1", workParam);
                    param.add("INPUT", inputData);
                    CompDaoUtil.deliverLCompoundDao(inputData, param);

                    pbc2.deleteWorkRoute(param);
                }
            }

            //포워딩 대상 인경우 포워딩 실행오더 취소 처리
            LMultiData fwdOrdList = dao2.executeQuery("select/om/om02/salesOrd/retrieveFwdOrdList", inputData);
            if(fwdOrdList != null && fwdOrdList.getDataCount() > 0) {
                for(int i=0; i < fwdOrdList.getDataCount(); i++) {
                    if(fwdOrdList.getString("fwdEoNo", i) != null && !fwdOrdList.getString("fwdEoNo", i).equals("")) {
                        LData param = fwdOrdList.getLData(i);
                        param.setString("salesOrdNo", inputData.getString("salesOrdNo"));
                        param.setString("trmsSctnCd", "D");
                        param.setString("regrId"    , inputData.getString("regrId"));
                        param.setString("mdfrId"    , inputData.getString("mdfrId"));
                        param.set("LCompoundDao", dao2);

                        pbc.divideFwdEo(param);
                    }
                }
            }

            // 출고취소 오더를 취소하는 경우
            LData lData = dao2.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", inputData);
            // 국내내수판매반품출고취소 오더이면서 관련출고오더번호가 존재
            if(OmConstants.ORD_TYPE_CD_DOM_RETURN_OUTPUT_CNCL.equals(lData.getString("ordTypeCd")) && !"".equals(lData.getString("rltdGiOrdNo"))){

                // 출고 실적아이템정보로부터 출고정보를 조회하여 분배취소후 재분배한다.
                LData giData = dao2.executeQueryForSingle("select/om/om04/salesOrdExceResult/retrieveGiCnclRslt", inputData);

                if(giData.getString("salesOrdNo") != null && !"".equals(giData.getString("salesOrdNo"))) {

                    LData divData = new LData();
                    divData.setString("salesOrdNo"      , giData.getString("salesOrdNo"));
                    divData.setString("workRouteSeq"    , giData.getString("workRouteSeq"));
                    divData.setString("workProgStatCd"  , OmConstants.WORK_PROG_STAT_CD_03);
                    divData.setString("rsltWorkStepSeq" , giData.getString("workStepSeq"));
                    divData.setString("rsltDgrCnt"      , giData.getString("rsltDgrCnt"));
                    divData.setString("eoNo"            , giData.getString("eoNo"));
                    divData.setString("expImpDomSctnCd" , giData.getString("expImpDomSctnCd"));
                    divData.setString("regrId"          , inputData.getString("regrId"));
                    divData.setString("mdfrId"          , inputData.getString("mdfrId"));
                    divData.set("LCompoundDao"          , dao2);
                    pbc.cancelEo(divData);

                    // 대리점입고 취소
                    cancelCustOfCustGrOrd(divData);

                    LData cnclData = new LData();
                    cnclData.setString("cnclOrdNo"      , inputData.getString("salesOrdNo"));
                    cnclData.setString("mdfrId"         , inputData.getString("mdfrId"));
                    dao2.add("cud/om/tb_om04003/updateCancelGiCancel" , cnclData);
                    dao2.add("cud/om/tb_om04003h/updateCancelGiCancel", cnclData);
                    dao2.executeUpdate();


                    divData = new LData();
                    divData.setString("salesOrdNo"      , giData.getString("salesOrdNo"));
                    divData.setString("workRouteSeq"    , giData.getString("workRouteSeq"));
                    divData.setString("workProgStatCd"  , OmConstants.WORK_PROG_STAT_CD_03);
                    divData.setString("rsltWorkStepSeq" , giData.getString("workStepSeq"));
                    divData.setString("rsltDgrCnt"      , giData.getString("rsltDgrCnt"));
                    divData.setString("eoNo"            , giData.getString("eoNo"));
                    divData.setString("expImpDomSctnCd" , giData.getString("expImpDomSctnCd"));
                    divData.setString("regrId"          , inputData.getString("regrId"));
                    divData.setString("mdfrId"          , inputData.getString("mdfrId"));
                    divData.set("LCompoundDao"          , dao2);
                    pbc.divideEo(divData);

                    // 대리점 입고 생성
                    createCustOfCustGrOrd(divData);
                }

            }



            dao2.add("cud/om/tb_om02001/updateSalesOrdDel", inputData);
            dao2.executeUpdate();

            setSalesOrdHistory(inputData);

            LLog.debug.println("cancelSO 처리 완료");

            //노스케 청원오더 취소 처리
            if(lData != null
                    && lData.getString("rptCustCd") != null && OmConstants.CUST_CO_CD_NC.equals(lData.getString("rptCustCd"))
                    && lData.getString("ordTypeCd") != null && OmConstants.ORD_TYPE_CD_2058.equals(lData.getString("ordTypeCd")) ) {
                //CO 삭제 처리
                LData coData = new LData();
                coData.setString("custCd", lData.getString("rptCustCd"));
                coData.setString("custOrdNo", lData.getString("custOrdNo"));
                dao2.add("cud/om/tb_om01001/deleteTbOm01001", coData);
                dao2.add("cud/om/tb_om01002/updateDelYnTbOm01002", coData);
                dao2.executeUpdate();

                //청원오더 디비 IF_YN 업데이트 처리
                dao2.add("cud/om/tb_om01001/cancelNskChungwonIf", coData);
                dao2.executeUpdate();

            }

            returnValue.setString("key", "S");
            returnValue.setString("message", "");
            retValue.addLData(returnValue);
            return retValue;


        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelSO()" + "=>" + se.getMessage());
            //throw new LSysException("pbf.err.com.retrieve", se);
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * Tpl 해상수출판매오더 포워딩 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveTplOceanExpSalesOrdFwd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{
            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwd", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwdItemList", inputData));
            dataHolder.add("IN_DS3", dao.executeQuery("select/om/om03/workRouteMngt/retrieveTplSalesOrdDivHist", inputData));

            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveTplOceanExpSalesOrdFwdGmd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    private LData checkTplOceanExpSalesOrdFwdUpdate(LMultiData SalesOrdMngtData, LMultiData SalesOrdMngtListData) throws LException {
        String salesOrdNo             = SalesOrdMngtData.getString("salesOrdNo"     , 0);
        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();

        LData retVal = new LData();
        try {
            LData param = new LData();
            param.setString("salesOrdNo", salesOrdNo);

            LData oldSalesOrdInfo = null;
            LMultiData oldSalesOrdItemInfo = null;
//          String expImpDomSctnCd = "";
            if(SalesOrdMngtData != null && SalesOrdMngtData.getDataCount() > 0) {
//              expImpDomSctnCd = SalesOrdMngtData.getString("expImpDomSctnCd", 0);
                if(SalesOrdMngtData.getString("expImpDomSctnCd", 0).equals(OmConstants.EXP_IMP_EXPORT)) {
                    oldSalesOrdInfo = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwd", param);
                    oldSalesOrdItemInfo = commonDao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwdItemList", param);

                } else if(SalesOrdMngtData.getString("expImpDomSctnCd", 0).equals(OmConstants.EXP_IMP_INCOME)) {//수입인경우
                    oldSalesOrdInfo = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwd", param);
                    oldSalesOrdItemInfo = commonDao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwdItemList", param);
                }
            }
            String fwdStatCd      = oldSalesOrdInfo.getString("fwdStatCd");
            int cnt = 0;
            if(oldSalesOrdItemInfo != null && oldSalesOrdItemInfo.getDataCount() > 0) {
                for(int i=0; i < oldSalesOrdItemInfo.getDataCount(); i++) {
                    if(oldSalesOrdItemInfo.getString("dcsnYn", i).equals("Y")) {
                        cnt++;
                        break;
                    }
                }
            }
            boolean case1 = false;
            boolean case2 = false;
            boolean case3 = false;
            boolean case4 = false;

            int intFwdStatCd = fwdStatCd == null || fwdStatCd.equals("") ? 0 : Integer.parseInt(fwdStatCd);

            if(!StringUtil.isNull(SalesOrdMngtData.getString("ordMngtFwdDeptCd" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ordMngtFwdDeptCd"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?포워딩오더부서");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("ordMngtFwdOfcrId" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ordMngtFwdOfcrId"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?포워딩오더담당자");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("blKindCd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("blKindCd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?BL Type");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("incotermsCd"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("incotermsCd"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?INCOTERMS");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptSvcTermCd"     , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptSvcTermCd" ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?FROM SERVICE TERM");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("arvSvcTermCd"     , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("arvSvcTermCd" ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?TO SERVICE TERM");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeCd"               , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeCd"           ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeNm"               , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeNm"           ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("fdestCd"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("fdestCd"          ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?F.Destination");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("fdestNm"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("fdestNm"          ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?F.Destination");
                } else {
                    case2 = true;
                }
            }

            double newPckgQty = StringUtil.isNull(SalesOrdMngtData.getString("pckgQty", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("pckgQty", 0));
            double oldPckgQty = StringUtil.isNull(oldSalesOrdInfo.getString("pckgQty")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("pckgQty"));
            if(newPckgQty != oldPckgQty  ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Total Package");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("pckgUnitCd"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("pckgUnitCd"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Total Package");
                } else {
                    case2 = true;
                }
            }

            double newTotWgt = StringUtil.isNull(SalesOrdMngtData.getString("totWgt", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("totWgt", 0));
            double oldTotWgt = StringUtil.isNull(oldSalesOrdInfo.getString("totWgt")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("totWgt"));
            if(newTotWgt !=  oldTotWgt){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Gross Wgt");
                } else {
                    case2 = true;
                }
            }

            double newTotCbm = StringUtil.isNull(SalesOrdMngtData.getString("totCbm", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("totCbm", 0));
            double oldTotCbm = StringUtil.isNull(oldSalesOrdInfo.getString("totCbm")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("totCbm"));
            if(newTotCbm != oldTotCbm){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Gross CBM");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("rptItemNm"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("rptItemNm"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Main Item");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("custRefNo"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custRefNo"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Ref No");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("lcNo"             , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("lcNo"         ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?L/C No");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("ciNo"             , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ciNo"         ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?C/I No");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("dangerSctnCd"     , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dangerSctnCd" ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?DGR");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoOfcrNm"     , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoOfcrNm" ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner PIC");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoTelNo"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoTelNo"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner Tel");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoFaxNo"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoFaxNo"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner Fax");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("srClsYmd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("srClsYmd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?SR Closing ");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("srClsHms"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("srClsHms"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?SR Closing ");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd1"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd1"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 1");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd2"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd2"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 2");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd3"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd3"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 3");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd4"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd4"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 4");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd5"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd5"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 5");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty1 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty1", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty1", 0));
            double oldCntrQty1 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty1")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty1"));

            if(newCntrQty1 != oldCntrQty1){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 1");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty2 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty2", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty2", 0));
            double oldCntrQty2 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty2")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty2"));

            if(newCntrQty2 != oldCntrQty2){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 2");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty3 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty3", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty3", 0));
            double oldCntrQty3 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty3")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty3"));

            if(newCntrQty3 != oldCntrQty3){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 3");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty4 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty4", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty4", 0));
            double oldCntrQty4 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty4")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty4"));

            if(newCntrQty4 != oldCntrQty4){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 4");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty5 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty5", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty5", 0));
            double oldCntrQty5 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty5")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty5"));

            if(newCntrQty5 != oldCntrQty5){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cntr 5");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("cyDtlConts"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cyDtlConts"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?CY/CFS Detail ");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptArCd"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptArCd"          ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Door");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptArOfcrNm"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptArOfcrNm"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Door PIC");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptArOfcrTelNo"       , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptArOfcrTelNo"   ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Door Tel");
                } else {
                    case2 = true;
                }
            }


            if(!StringUtil.isNull(SalesOrdMngtData.getString("custOfcrNm"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custOfcrNm"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?고객담당자명");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?고객담당자명");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("custOfcrTelNo"        , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custOfcrTelNo"    ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?고객전화번호");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?고객전화번호");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cargoFormCd"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cargoFormCd"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cargo Type");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Cargo Type");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("fclLclSctnCd"     , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("fclLclSctnCd" ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?FCL/LCL");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?FCL/LCL");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("polCd"                , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("polCd"            ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POL");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?POL");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("polNm"                , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("polNm"            ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POL");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?POL");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("podCd"                , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("podCd"            ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POD");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?POD");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("podNm"                , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("podNm"            ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POD");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?POD");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("dlvPlCd"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dlvPlCd"          ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Place of Delivery");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Place of Delivery");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("dlvPlNm"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dlvPlNm"          ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Place of Delivery");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Place of Delivery");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptPortPrarYmd"       , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptPortPrarYmd"   ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?ETD");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?ETD");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("arvPortPrarYmd"       , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("arvPortPrarYmd"   ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?ETA");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?ETA");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("rmk"              , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("rmk"              ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Remark");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Remark");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoBookingNo"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoBookingNo"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Booking No");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Booking No");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("bookingYmd"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("bookingYmd"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Booking Date");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Booking Date");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoCd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoCd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner ");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner ");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoNm"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoNm"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner ");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner ");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipNm"               , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipNm"           ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Vessel ");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Vessel ");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("portCnt"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("portCnt"          ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Voyage ");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Voyage ");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cyClsYmd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cyClsYmd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?CY Closing ");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?CY Closing ");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cyClsHms"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cyClsHms"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?CY Closing ");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?CY Closing ");
                } else {
                    case3 = true;
                }
            }


            retVal.setBoolean("case1", case1);
            retVal.setBoolean("case2", case2);
            retVal.setBoolean("case3", case3);
            retVal.setBoolean("case4", case4);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "checkTplOceanExpSalesOrdFwdUpdate()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
        return retVal;
    }

    //전성연 해상수출과 모듈화가 가능하면 나중에 삭제요망
    private LData checkOceanImpSalesOrdUpdate(LMultiData SalesOrdMngtData, LMultiData SalesOrdMngtListData) throws LException {
        String salesOrdNo             = SalesOrdMngtData.getString("salesOrdNo"     , 0);
        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();

        LData retVal = new LData();
        try {
            LData param = new LData();
            param.setString("salesOrdNo", salesOrdNo);

            LData oldSalesOrdInfo = null;
            LMultiData oldSalesOrdItemInfo = null;
//          String expImpDomSctnCd = "";
            if(SalesOrdMngtData != null && SalesOrdMngtData.getDataCount() > 0) {
//              expImpDomSctnCd = SalesOrdMngtData.getString("expImpDomSctnCd", 0);
                if(SalesOrdMngtData.getString("expImpDomSctnCd", 0).equals(OmConstants.EXP_IMP_INCOME)) {//수입인경우
                    oldSalesOrdInfo = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOceanImpSalesOrd", param);
                    oldSalesOrdItemInfo = commonDao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpSalesOrdItemList", param);
                }
            }
            String fwdStatCd      = oldSalesOrdInfo.getString("fwdStatCd");
            int cnt = 0;
            if(oldSalesOrdItemInfo != null && oldSalesOrdItemInfo.getDataCount() > 0) {
                for(int i=0; i < oldSalesOrdItemInfo.getDataCount(); i++) {
                    if(oldSalesOrdItemInfo.getString("dcsnYn", i).equals("Y")) {
                        cnt++;
                        break;
                    }
                }

            }

            boolean case1 = false;
            boolean case2 = false;
            boolean case3 = false;
            boolean case4 = false;

            int intFwdStatCd = fwdStatCd == null || fwdStatCd.equals("") ? 0 : Integer.parseInt(fwdStatCd);

            if(!StringUtil.isNull(SalesOrdMngtData.getString("ordMngtFwdDeptCd" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ordMngtFwdDeptCd"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?포워딩오더부서");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("ordMngtFwdOfcrId" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ordMngtFwdOfcrId"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?포워딩오더담당자");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("custOfcrNm"   , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custOfcrNm")) ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?고객담당자명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("custOfcrTelNo"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custOfcrTelNo"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?고객전화번호");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoCd" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoCd"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Shipper코드");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoNm" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoNm"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Shipper명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipperAddr1" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipperAddr1"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?shipperAddr1");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipperAddr2" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipperAddr2"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?shipperAddr2");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipperAddr3" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipperAddr3"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?shipperAddr3");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipperAddr4" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipperAddr4"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?shipperAddr4");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeCd"   , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeCd")) ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee코드");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeNm"   , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeNm")) ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeAddr1"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeAddr1"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee주소1");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeAddr2"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeAddr2"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee주소2");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeAddr3"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeAddr3"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee주소3");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cneeAddr4"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cneeAddr4"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Consignee주소4");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ntfyCd"   , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ntfyCd")) ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Notify코드");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ntfyNm"   , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ntfyNm")) ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Notify명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ntfyAddr1"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ntfyAddr1"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Notify주소1");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ntfyAddr2"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ntfyAddr2"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Notify주소2");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ntfyAddr3"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ntfyAddr3"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Notify주소3");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ntfyAddr4"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ntfyAddr4"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Notify주소4");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("hblNo"    , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("hblNo"))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?House B/L 번호");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("blKindCd" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("blKindCd"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?B/L Type");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ciNo" , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ciNo"))   ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Invoice No.");
                } else {
                    case2 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("mblNo"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("mblNo"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Master B/L 번호");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cargoFormCd"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cargoFormCd"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cargo Type");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("fclLclSctnCd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("fclLclSctnCd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?FCL/LCL");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptSvcTermCd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptSvcTermCd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?From Service Term");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("arvSvcTermCd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("arvSvcTermCd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?From Service Term");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("incotermsCd"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("incotermsCd"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?INCOTERMS");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("tranCostPayCondCd"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("tranCostPayCondCd"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Freight");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("extrExpnPayCondCd"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("extrExpnPayCondCd"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Other");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ptnCd"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ptnCd"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Partner코드");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ptnNm"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ptnNm"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Partner명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("ptnOfcrNm"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("ptnOfcrNm"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Partner PIC");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoCd"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoCd"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner코드");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoNm"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoNm"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipNm"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipNm"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Vessel");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("portCnt"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("portCnt"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Voyage");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("polCd"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("polCd"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POL쿄드");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("polNm"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("polNm"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POL명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("podCd"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("podCd"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POD코드");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("podNm"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("podNm"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POD명");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptPortPrarYmd"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptPortPrarYmd"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?ETD");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("arvPortPrarYmd"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("arvPortPrarYmd"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?ETA");
                } else {
                    case2 = true;
                }
            }
            double newPckgQty = StringUtil.isNull(SalesOrdMngtData.getString("pckgQty", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("pckgQty", 0));
            double oldPckgQty = StringUtil.isNull(oldSalesOrdInfo.getString("pckgQty")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("pckgQty"));
            if(newPckgQty != oldPckgQty  ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Total Package 수량");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("pckgUnitCd"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("pckgUnitCd"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Package단위코드");
                } else {
                    case2 = true;
                }
            }
            double newTotWgt = StringUtil.isNull(SalesOrdMngtData.getString("totWgt", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("totWgt", 0));
            double oldTotWgt = StringUtil.isNull(oldSalesOrdInfo.getString("totWgt")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("totWgt"));
            if(newTotWgt != oldTotWgt    ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Gross Wgt");
                } else {
                    case2 = true;
                }
            }

            double newTotCbm = StringUtil.isNull(SalesOrdMngtData.getString("totCbm", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("totCbm", 0));
            double oldTotCbm = StringUtil.isNull(oldSalesOrdInfo.getString("totCbm")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("totCbm"));
            if(newTotCbm != oldTotCbm    ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Measure");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("rptItemNm"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("rptItemNm"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Main Item");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("custRefNo"            , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custRefNo"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Ref No.");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("lcNo"         , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("lcNo"     ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?L/C No.");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd1"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd1"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너종류코드 1");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd2"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd2"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너종류코드 2");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd3"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd3"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너종류코드 3");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cntrKindCd4"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cntrKindCd4"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너종류코드 4");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty1 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty1", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty1", 0));
            double oldCntrQty1 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty1")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty1"));

            if(newCntrQty1 != oldCntrQty1){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너수량 1");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty2 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty2", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty2", 0));
            double oldCntrQty2 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty2")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty2"));

            if(newCntrQty2 != oldCntrQty2){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너수량 2");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty3 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty3", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty3", 0));
            double oldCntrQty3 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty3")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty3"));

            if(newCntrQty3 != oldCntrQty3){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너수량 3");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty4 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty4", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty4", 0));
            double oldCntrQty4 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty4")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty4"));

            if(newCntrQty4 != oldCntrQty4){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너수량 4");
                } else {
                    case2 = true;
                }
            }

            double newCntrQty5 = StringUtil.isNull(SalesOrdMngtData.getString("cntrQty5", 0)).equals("") ? 0 : Double.parseDouble(SalesOrdMngtData.getString("cntrQty5", 0));
            double oldCntrQty5 = StringUtil.isNull(oldSalesOrdInfo.getString("cntrQty5")).equals("") ? 0 : Double.parseDouble(oldSalesOrdInfo.getString("cntrQty5"));

            if(newCntrQty5 != oldCntrQty5){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?컨테이너수량 5");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("bondTranYn"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("bondTranYn"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Bonded Trans");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("mnfestDclrTgtYn"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("mnfestDclrTgtYn"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Target on Delaration");
                } else {
                    case2 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("rmk"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("rmk"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Remark");
                } else {
                    case2 = true;
                }
            }


            if(!StringUtil.isNull(SalesOrdMngtData.getString("custOfcrNm"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custOfcrNm"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?고객담당자명");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?고객담당자명");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("custOfcrTelNo"        , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("custOfcrTelNo"    ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?고객전화번호");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?고객전화번호");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("hblNo"        , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("hblNo"        ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?House B/L 번호");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?House B/L 번호");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("mblNo"        , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("mblNo"    ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Master B/L 번호");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Master B/L 번호");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("cargoFormCd"              , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("cargoFormCd"          ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Cargo Type");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Cargo Type");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("fclLclSctnCd"             , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("fclLclSctnCd"         ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?FCL/LCL");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?FCL/LCL");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipCoCd"             , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipCoCd"         ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner코드");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Liner코드");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("shipNm"               , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("shipNm"           ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Vessel");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Vessel");
                } else {
                    case3 = true;
                }
            }
//
            if(!StringUtil.isNull(SalesOrdMngtData.getString("portCnt"      , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("portCnt"  ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Voyage");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Voyage");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("polCd"        , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("polCd"    ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?POL코드");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?POL코드");
                } else {
                    case3 = true;
                }
            }
            if(!StringUtil.isNull(SalesOrdMngtData.getString("dptPortPrarYmd"               , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("dptPortPrarYmd"               ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?ETD");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?ETD");
                } else {
                    case3 = true;
                }
            }

            if(!StringUtil.isNull(SalesOrdMngtData.getString("arvPortPrarYmd"           , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("arvPortPrarYmd"       ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?ETA");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?ETA");
                } else {
                    case3 = true;
                }
            }
            //중간
            if(!StringUtil.isNull(SalesOrdMngtData.getString("rmk"          , 0)).equals(StringUtil.isNull(oldSalesOrdInfo.getString("rmk"      ))  ) ){
                if(intFwdStatCd >= 2) {
                    throw new LBizException("hsni.om.err.cannot.update?Remark");
                } else {
                    case2 = true;
                }
                if(cnt > 0) {
                    throw new LBizException("hsni.om.err.cannot.update?Remark");
                } else {
                    case3 = true;
                }
            }



            retVal.setBoolean("case1", case1);
            retVal.setBoolean("case2", case2);
            retVal.setBoolean("case3", case3);
            retVal.setBoolean("case4", case4);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "checkTplOceanExpSalesOrdFwdUpdate()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
        return retVal;
    }




    private LData checkTplOceanExpSalesOrdFwdItemUpdate(LMultiData SalesOrdMngtData, LData SalesOrdMngtListData) throws LException {
        String salesOrdNo             = SalesOrdMngtData.getString("salesOrdNo"     , 0);
        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();

        LData retVal = new LData();
        try {
            LData param = new LData();
            param.setString("salesOrdNo", salesOrdNo);

//          LData oldSalesOrdInfo = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwd", param);
            LMultiData oldSalesOrdItemInfo = commonDao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwdItemList", param);
            int cnt = 0;
            if(oldSalesOrdItemInfo != null && oldSalesOrdItemInfo.getDataCount() > 0) {
                for(int i=0; i < oldSalesOrdItemInfo.getDataCount(); i++) {
                    if(oldSalesOrdItemInfo.getString("dcsnYn", i).equals("Y")) {
                        cnt++;
                        break;
                    }
                }
            }
            boolean case1 = false;
            boolean case2 = false;
            boolean case3 = false;
            boolean case4 = false;

            String dcsnYn = "";
            if(!SalesOrdMngtData.getString("salesOrdStatCd", 0).equals(OmConstants.ORD_STAT_CD_COMP) && SalesOrdMngtListData.getInt("GauceJobType") == GauceDataRow.TB_JOB_DELETE) {
                case4 = true;
            } else {
                if(SalesOrdMngtListData != null && oldSalesOrdItemInfo != null && oldSalesOrdItemInfo.getDataCount() > 0) {
                    for(int i=0; i < oldSalesOrdItemInfo.getDataCount();i++ ) {
                        if(oldSalesOrdItemInfo.getString("lineNo", i).equals(SalesOrdMngtListData.getString("lineNo"))) {
                            LData temp = new LData();
                            String dataKey = "";
                            if(!SalesOrdMngtData.getString("salesOrdStatCd", 0).equals(OmConstants.ORD_STAT_CD_COMP) && SalesOrdMngtListData.getInt("GauceJobType") == GauceDataRow.TB_JOB_INSERT) {
                                case4 = false;
                                break;
                            }
                            Set oldSalesOrdItemSet = oldSalesOrdItemInfo.getLData(0).keySet();
                            Iterator oldSalesOrdItemIte = oldSalesOrdItemSet.iterator();
                            dcsnYn = oldSalesOrdItemInfo.getString("dcsnYn", i);
                            if(dcsnYn.equals("Y") && SalesOrdMngtListData.getInt("GauceJobType") == GauceDataRow.TB_JOB_DELETE) {
                                throw new LBizException("hsni.om.err.cannot.update?삭제불가 ");
                            }
                            while(oldSalesOrdItemIte.hasNext()){
                                dataKey = oldSalesOrdItemIte.next().toString();
                                if(dataKey != null && dataKey.equals("salesOrdNo")) {
                                    temp.setString("salesOrdNo", SalesOrdMngtListData.getString("salesOrdNo"));
                                } else if(dataKey != null && dataKey.equals("lineNo")) {
                                    temp.setString("lineNo", SalesOrdMngtListData.getString("lineNo"));
                                } else {
                                    String newData = "";
                                    String oldData = "";
                                    newData = (!SalesOrdMngtListData.containsKey(dataKey) || SalesOrdMngtListData.getString(dataKey) == null) ? "" : SalesOrdMngtListData.getString(dataKey);
                                    oldData = (!oldSalesOrdItemInfo.containsKey(dataKey) || oldSalesOrdItemInfo.getString(dataKey, i) == null) ? "" : oldSalesOrdItemInfo.getString(dataKey, i);
                                    if(dataKey.equals("ordQty")
                                    || dataKey.equals("ordWgt")
                                    || dataKey.equals("ordCbm")
                                    ) {
                                        if(!newData.equals("")) {
                                            newData = Double.toString(Double.parseDouble(newData));
                                        } else {
                                            newData = Double.toString(Double.parseDouble("0"));
                                        }
                                        if(!oldData.equals("")) {
                                            oldData = Double.toString(Double.parseDouble(oldData));
                                        } else {
                                            oldData = Double.toString(Double.parseDouble("0"));
                                        }
                                    }
                                    if(!newData.equals(oldData) && dcsnYn.equals("Y")) {
                                        throw new LBizException("hsni.om.err.cannot.update?" + dataKey);
                                    } else {
                                        case4 = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            retVal.setBoolean("case1", case1);
            retVal.setBoolean("case2", case2);
            retVal.setBoolean("case3", case3);
            retVal.setBoolean("case4", case4);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "checkTplOceanExpSalesOrdFwdUpdate()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
        return retVal;
    }


    // 해상수입 아이템 수정
    private LData checkOceanImpSalesOrdItemUpdate(LMultiData SalesOrdMngtData, LData SalesOrdMngtListData) throws LException {
        String salesOrdNo             = SalesOrdMngtData.getString("salesOrdNo"     , 0);
        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();

        LData retVal = new LData();
        try {
            LData param = new LData();
            param.setString("salesOrdNo", salesOrdNo);

//          LData oldSalesOrdInfo = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOceanImpSalesOrd", param);
            LMultiData oldSalesOrdItemInfo = commonDao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpSalesOrdItemList", param);

            int cnt = 0;
            if(oldSalesOrdItemInfo != null && oldSalesOrdItemInfo.getDataCount() > 0) {
                for(int i=0; i < oldSalesOrdItemInfo.getDataCount(); i++) {
                    if(oldSalesOrdItemInfo.getString("dcsnYn", i).equals("Y")) {
                        cnt++;
                        break;
                    }
                }
            }
            boolean case1 = false;
            boolean case2 = false;
            boolean case3 = false;
            boolean case4 = false;

            String dcsnYn = "";
            if(!SalesOrdMngtData.getString("salesOrdStatCd", 0).equals(OmConstants.ORD_STAT_CD_COMP) && SalesOrdMngtListData.getInt("GauceJobType") == GauceDataRow.TB_JOB_DELETE) {
                case4 = true;
            } else {
                if(SalesOrdMngtListData != null && oldSalesOrdItemInfo != null && oldSalesOrdItemInfo.getDataCount() > 0) {
                    for(int i=0; i < oldSalesOrdItemInfo.getDataCount();i++ ) {
                        if(oldSalesOrdItemInfo.getString("lineNo", i).equals(SalesOrdMngtListData.getString("lineNo"))) {
                            LData temp = new LData();
                            String dataKey = "";
                            if(!SalesOrdMngtData.getString("salesOrdStatCd", 0).equals(OmConstants.ORD_STAT_CD_COMP) && SalesOrdMngtListData.getInt("GauceJobType") == GauceDataRow.TB_JOB_INSERT) {
                                case4 = false;
                                break;
                            }
                            Set oldSalesOrdItemSet = oldSalesOrdItemInfo.getLData(0).keySet();
                            Iterator oldSalesOrdItemIte = oldSalesOrdItemSet.iterator();
                            dcsnYn = oldSalesOrdItemInfo.getString("dcsnYn", i);
                            if(dcsnYn.equals("Y") && SalesOrdMngtListData.getInt("GauceJobType") == GauceDataRow.TB_JOB_DELETE) {
                                throw new LBizException("hsni.om.err.cannot.update?삭제불가 ");
                            }
                            while(oldSalesOrdItemIte.hasNext()){
                                dataKey = oldSalesOrdItemIte.next().toString();
                                if(dataKey != null && dataKey.equals("salesOrdNo")) {
                                    temp.setString("salesOrdNo", SalesOrdMngtListData.getString("salesOrdNo"));
                                } else if(dataKey != null && dataKey.equals("lineNo")) {
                                    temp.setString("lineNo", SalesOrdMngtListData.getString("lineNo"));
                                } else {
                                    String newData = "";
                                    String oldData = "";
                                    newData = (!SalesOrdMngtListData.containsKey(dataKey) || SalesOrdMngtListData.getString(dataKey) == null) ? "" : SalesOrdMngtListData.getString(dataKey);
                                    oldData = (!oldSalesOrdItemInfo.containsKey(dataKey) || oldSalesOrdItemInfo.getString(dataKey, i) == null) ? "" : oldSalesOrdItemInfo.getString(dataKey, i);
                                    if(dataKey.equals("ordQty")
                                    || dataKey.equals("ordWgt")
                                    || dataKey.equals("ordCbm")
                                    ) {
                                        if(!newData.equals("")) {
                                            newData = Double.toString(Double.parseDouble(newData));
                                        } else {
                                            newData = Double.toString(Double.parseDouble("0"));
                                        }
                                        if(!oldData.equals("")) {
                                            oldData = Double.toString(Double.parseDouble(oldData));
                                        } else {
                                            oldData = Double.toString(Double.parseDouble("0"));
                                        }
                                    }
                                    if(!newData.equals(oldData) && dcsnYn.equals("Y")) {
                                        throw new LBizException("hsni.om.err.cannot.update?" + dataKey);
                                    } else {
                                        case4 = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            retVal.setBoolean("case1", case1);
            retVal.setBoolean("case2", case2);
            retVal.setBoolean("case3", case3);
            retVal.setBoolean("case4", case4);

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "checkTplOceanExpSalesOrdFwdUpdate()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
        return retVal;
    }
    /**
     * Tpl 해상수출판매오더 포워딩 정보를 추가/수정/삭제하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveTplOceanExpSalesOrdFwd(LMultiData inputData) throws LException {
        LMultiData SalesOrdMngtData = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData SalesOrdMngtListData = (LMultiData)inputData.get("IN_DS2",0 );
        LData reqData = (LData)inputData.get("INPUT", 0);

        laf.application.dao.LCommonDao  commonDao = new laf.application.dao.LCommonDao();
        laf.application.dao.LCompoundDao cDao = new laf.application.dao.LCompoundDao();
        LCommonDao dao = new LCommonDao();
        LCompoundDao dao2 = new LCompoundDao();
        try{

/*
판매오더번호를 채번한다.
'S' + 일련번호 (SQ_MA02001 시퀀스, 9자리를 맞추기 위해 앞에 '0'을 채운다.)
*/
            int jobType = SalesOrdMngtData.getInt("GauceJobType", 0);
            String salesOrdNo = "";
            LData input = new LData();

            if(jobType == GauceDataRow.TB_JOB_INSERT) {

                LData result = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);
                salesOrdNo = result.getString("salesOrdNo");

                GauceUtil.modiColValue(SalesOrdMngtData, "salesOrdNo", salesOrdNo);
                GauceUtil.modiColValue(SalesOrdMngtListData, "salesOrdNo", salesOrdNo);
            } else {
                salesOrdNo = SalesOrdMngtData.getString("salesOrdNo", 0);
            }
            GauceUtil.modiColValue(SalesOrdMngtData, "salesOrdStatCd", OmConstants.SALES_ORD_STAT_CD_02);
            GauceUtil.fillColValue(SalesOrdMngtData, "oceanAirSctnCd", OmConstants.OCEAN_AIR_SCTN_CD_SEA);

/*
Tpl 해상수출판매오더 포워딩 헤더 정보를 Insert한다.
*/
            if(jobType == GauceDataRow.TB_JOB_INSERT) {
                LData param = new LData();
                param.setString("corpCd"        , SalesOrdMngtData.getString("corpCd"      , 0));
                param.setString("dptArCd"       , SalesOrdMngtData.getString("dptArCd"      , 0));
                param.setString("dptArTypeCd"   , SalesOrdMngtData.getString("dptArTypeCd"  , 0));
                param.setString("arvArCd"       , SalesOrdMngtData.getString("arvArCd"      , 0));
                param.setString("arvArTypeCd"   , SalesOrdMngtData.getString("arvArTypeCd"  , 0));
                param.setString("rptCustCd"     , SalesOrdMngtData.getString("rptCustCd"    , 0));
                param.setString("ordTypeCd"     , SalesOrdMngtData.getString("ordTypeCd"    , 0));
                param.setString("expImpDomSctnCd", SalesOrdMngtData.getString("expImpDomSctnCd" , 0));
                
                //2014-06-12 청구부서 화면에서 넘어온 값으로 iscomm_getbilgcustinfo_fw_fn 인수로 넘김
                param.setString("bilgCustCd", SalesOrdMngtData.getString("bilgCustCd", 0));

                LData ordType = commonDao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", param);

                //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
                param.setString("areaCd", SalesOrdMngtData.getString("podCd" , 0)); // 향 정보 : 수출:POD, 수입:POL
                param.setString("salesOfcrId", SalesOrdMngtData.getString("salesOfcrId" , 0));
                LData ctrtCustInfo = getBilgCustInfoFw(param);

                if( ctrtCustInfo != null ) {
                	GauceUtil.modiColValue(SalesOrdMngtData, "ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
                	GauceUtil.modiColValue(SalesOrdMngtData, "bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
                	GauceUtil.modiColValue(SalesOrdMngtData, "sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
                	//GauceUtil.modiColValue(SalesOrdMngtData, "salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
                }                
                //--------------------------------------------------------------------------------------------------
                /* 운송포워딩 인경우도 배차센터 없이 로그인사용자의 오더부서로 세팅함. cys. 2014.01.16
                if(ordType != null && ordType.getString("logisSvcSctnCd") != null) {
                    if(OmConstants.LOGIS_SVC_SCTN_CD_16.equals(ordType.getString("logisSvcSctnCd"))) {
                        LData exceDept = setOrdMngtExceDeptCd(param);
                        if(exceDept == null || exceDept.getString("result").equals("E") ){
                            throw new LBizException("오더관리실행부서 세팅오류");
                        } else {
                            GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceDeptCd", exceDept.getString("ordMngtExceDeptCd"));
                            GauceUtil.modiColValue(SalesOrdMngtData, "tranPlanCntrCd", exceDept.getString("tranPlanCntrCd"));
                        }
                    } else if(OmConstants.LOGIS_SVC_SCTN_CD_15.equals(ordType.getString("logisSvcSctnCd"))) {
                        GauceUtil.modiColValue(SalesOrdMngtData, "tranPlanCntrCd", "");
                    }
                }
                */
                param = new LData();
                param.setString("ordChrgDeptCd" , SalesOrdMngtData.getString("ordMngtExceDeptCd", 0));
                param.setString("custCd"        , SalesOrdMngtData.getString("rptCustCd", 0));
                param.setString("expImpDomSctnCd", SalesOrdMngtData.getString("expImpDomSctnCd" , 0));

                LData exceOfcr = commonDao.executeQueryForSingle("select/om/om05/orderUserMngt/retrieveOrdMngtExceOfceId", param);
                if(exceOfcr != null && exceOfcr.getString("userId") != null && !exceOfcr.getString("userId").equals("")) {
                    GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceOfcrId", exceOfcr.getString("userId"));
                }

                LData move = new LData();
                move.setString("dptArCd"            , SalesOrdMngtData.getString("dptArCd"          , 0));
                move.setString("dptArTypeCd"        , SalesOrdMngtData.getString("dptArTypeCd"      , 0));
                move.setString("arvArCd"            , SalesOrdMngtData.getString("arvArCd"          , 0));
                move.setString("arvArTypeCd"        , SalesOrdMngtData.getString("arvArTypeCd"      , 0));
                move.setString("expImpDomSctnCd"    , SalesOrdMngtData.getString("expImpDomSctnCd"  , 0));
                move.setString("custOrdTypeCd"      , "");
                move.setString("custMoveTypeCd"     , "");
                move.setString("ordTypeCd"          , SalesOrdMngtData.getString("ordTypeCd"        , 0));
                move.setString("rptCustCd"          , SalesOrdMngtData.getString("rptCustCd"        , 0));
                move.setString("custOfCustCd"       , "");
                move.setString("selfGdsCd"          , "");

                String moveType = retrieveMoveType(move);

                GauceUtil.fillColValue(SalesOrdMngtData, "moveTypeCd", moveType);

                dao2.setInsertQuery("cud/om/tb_om02001/createTplOceanExpSalesOrdFwd");
                dao2.addWithJobType(SalesOrdMngtData);

                dao2.setInsertQuery("cud/om/tb_om02003/createTplOceanExpSalesOrdFwd");
                dao2.addWithJobType(SalesOrdMngtData);

                try {
                    LData bookingNo = commonDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewBookingNo", SalesOrdMngtData.getLData(0));

                    if(bookingNo != null && bookingNo.getString("bookingNo") != null && !bookingNo.getString("bookingNo").equals("")) {
                        GauceUtil.modiColValue(SalesOrdMngtData, "bookingNo", bookingNo.getString("bookingNo"));
                    }
                } catch(Exception sse) {
                    GauceUtil.modiColValue(SalesOrdMngtData, "bookingNo", "BK001");
                }
                dao2.setInsertQuery("cud/om/tb_om02019/createBooking");
                dao2.addWithJobType(SalesOrdMngtData);

                dao2.setInsertQuery("cud/om/tb_om02002/createTplOceanExpSalesOrdFwd");
                dao2.addWithJobType(SalesOrdMngtListData);

                dao2.executeUpdate();

                LData paramData = new LData();
                paramData.setString("salesOrdNo", salesOrdNo);
                paramData.setString("salesOrdMdfReason", reqData.getString("salesOrdMdfReason"));
                paramData.setString("regrId", SalesOrdMngtData.getString("regrId"   , 0));
                paramData.setString("mdfrId", SalesOrdMngtData.getString("mdfrId"   , 0));
                paramData.set("LCompoundDao", cDao);

                setSalesOrdHistory(paramData);

            } else if(jobType == GauceDataRow.TB_JOB_UPDATE) {
                //수정모듈 호출
                String salesOrdStatCd = SalesOrdMngtData.getString("salesOrdStatCd" , 0);
                String salesOrdCnclYn = SalesOrdMngtData.getString("salesOrdCnclYn" , 0);
                salesOrdNo            = SalesOrdMngtData.getString("salesOrdNo"     , 0);

                if(salesOrdStatCd.equals(OmConstants.ORD_STAT_CD_COMP) ) {
                    throw new LBizException("판매오더가 완료되어 더 이상 진행할 수 없습니다.");

                } else if( salesOrdCnclYn.equals(OmConstants.COMMON_Y)) {
                    throw new LBizException("판매오더가 취소되어 더 이상 진행할 수 없습니다.");
                }

                LData check = checkTplOceanExpSalesOrdFwdUpdate(SalesOrdMngtData, SalesOrdMngtListData);

                if(check != null) {
                    LData param = new LData();
                    param.setString("corpCd"        , SalesOrdMngtData.getString("corpCd"      , 0));
                    param.setString("dptArCd"       , SalesOrdMngtData.getString("dptArCd"      , 0));
                    param.setString("dptArTypeCd"   , SalesOrdMngtData.getString("dptArTypeCd"  , 0));
                    param.setString("arvArCd"       , SalesOrdMngtData.getString("arvArCd"      , 0));
                    param.setString("arvArTypeCd"   , SalesOrdMngtData.getString("arvArTypeCd"  , 0));
                    param.setString("rptCustCd"     , SalesOrdMngtData.getString("rptCustCd"    , 0));
                    param.setString("ordTypeCd"     , SalesOrdMngtData.getString("ordTypeCd"    , 0));
                    param.setString("expImpDomSctnCd", SalesOrdMngtData.getString("expImpDomSctnCd" , 0));
                    //2014-06-12 청구부서 화면에서 넘어온 값으로 iscomm_getbilgcustinfo_fw_fn 인수로 넘김
                    param.setString("bilgCustCd", SalesOrdMngtData.getString("bilgCustCd", 0));

                    LData ordType = commonDao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", param);

                    /* 운송포워딩 인경우도 배차센터 없이 로그인사용자의 오더부서로 세팅함. cys. 2014.01.16
                    if(ordType != null && ordType.getString("logisSvcSctnCd") != null) {
                        if(OmConstants.LOGIS_SVC_SCTN_CD_16.equals(ordType.getString("logisSvcSctnCd"))) {
                            LData exceDept = setOrdMngtExceDeptCd(param);
                            if(exceDept == null || exceDept.getString("result").equals("E") ){
                                throw new LBizException("오더관리실행부서 세팅오류");
                            } else {
                                GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceDeptCd", exceDept.getString("ordMngtExceDeptCd"));
                                GauceUtil.modiColValue(SalesOrdMngtData, "tranPlanCntrCd", exceDept.getString("tranPlanCntrCd"));
                            }
                        } else if(OmConstants.LOGIS_SVC_SCTN_CD_15.equals(ordType.getString("logisSvcSctnCd"))) {
                            GauceUtil.modiColValue(SalesOrdMngtData, "tranPlanCntrCd", "");
                        }
                    }
                    */
                    
                    //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
                    param.setString("areaCd", SalesOrdMngtData.getString("podCd" , 0)); // 향 정보 : 수출:POD, 수입:POL
                    param.setString("salesOfcrId", SalesOrdMngtData.getString("salesOfcrId" , 0));
                    LData ctrtCustInfo1 = getBilgCustInfoFw(param);

                    if( ctrtCustInfo1 != null ) {
                    	GauceUtil.modiColValue(SalesOrdMngtData, "ctrtNo",      ctrtCustInfo1.getString("ctrtNo"));
                    	GauceUtil.modiColValue(SalesOrdMngtData, "bilgCustCd",  ctrtCustInfo1.getString("bilgCustCd"));
                    	GauceUtil.modiColValue(SalesOrdMngtData, "sellDeptCd",  ctrtCustInfo1.getString("sellDeptCd"));
                    	//GauceUtil.modiColValue(SalesOrdMngtData, "salesOfcrId", ctrtCustInfo1.getString("salesOfcrId"));
                    }                
                    //--------------------------------------------------------------------------------------------------
                    param = new LData();
                    param.setString("ordChrgDeptCd" , SalesOrdMngtData.getString("ordMngtExceDeptCd", 0));
                    param.setString("custCd"        , SalesOrdMngtData.getString("rptCustCd", 0));
                    param.setString("expImpDomSctnCd", SalesOrdMngtData.getString("expImpDomSctnCd" , 0));

                    LData exceOfcr = commonDao.executeQueryForSingle("select/om/om05/orderUserMngt/retrieveOrdMngtExceOfceId", param);
                    if(exceOfcr != null && exceOfcr.getString("userId") != null && !exceOfcr.getString("userId").equals("")) {
                        GauceUtil.modiColValue(SalesOrdMngtData, "ordMngtExceOfcrId", exceOfcr.getString("userId"));
                    }

                    dao2.setUpdateQuery("cud/om/tb_om02001/updateTplOceanExpSalesOrdFwd");
                    dao2.addWithJobType(SalesOrdMngtData);

                    dao2.setUpdateQuery("cud/om/tb_om02003/updateTplOceanExpSalesOrdFwd");
                    dao2.addWithJobType(SalesOrdMngtData);

                    if(SalesOrdMngtData.getLData(0).getString("bookingNo")==null || "".equals(SalesOrdMngtData.getLData(0).getString("bookingNo"))){
                        GauceUtil.modiColValue(SalesOrdMngtData, "bookingNo", "BK001");
                    }

                    dao2.setUpdateQuery("cud/om/tb_om02019/updateSalesOrdBooking");
                    dao2.addWithJobType(SalesOrdMngtData);

                    dao2.setInsertQuery("cud/om/tb_om02002/createTplOceanExpSalesOrdFwd");
                    dao2.setUpdateQuery("cud/om/tb_om02002/updateTplOceanExpSalesOrdFwd");
                    dao2.setDeleteQuery("cud/om/tb_om02002/deleteTplOceanExpSalesOrdFwd");
                    dao2.addWithJobType(SalesOrdMngtListData);
                    dao2.executeUpdate();

                    LData paramData = new LData();
                    paramData.setString("salesOrdNo", salesOrdNo);
                    paramData.setString("salesOrdMdfReason", reqData.getString("salesOrdMdfReason"));
                    paramData.setString("regrId", SalesOrdMngtData.getString("regrId"   , 0));
                    paramData.setString("mdfrId", SalesOrdMngtData.getString("mdfrId"   , 0));
                    paramData.set("LCompoundDao", cDao);

                    setSalesOrdHistory(paramData);

//class 2 변경인 경우  포워딩 실행오더 수정 전송
                    if(check.getBoolean("case2") ){
                        if(SalesOrdMngtData.getString("fwdEoNo" , 0) != null && !SalesOrdMngtData.getString("fwdEoNo"   , 0).equals("")) {
                            IOrdDivMngt divPbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
                            paramData.setString("bookingNo", SalesOrdMngtData.getString("bookingNo" , 0));
                            paramData.setString("trmsSctnCd", "U");
                            paramData.set("LCompoundDao", cDao);
                            divPbc.divideFwdEo(paramData);
                        }
                    }

                    IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);

/*  class 3 변경인 경우  작업경로가 생성된 라인아이템을 식별한 후
                        모든 작업경로를 삭제 -> 작업경로가 생성되어 있었던 라인아이템에 대해 기본작업경로 재생성.
*/
                    if(check.getBoolean("case3") ){

                        LMultiData itemData = commonDao.executeQuery("select/om/om03/workRouteMngt/retrieveTplWorkRouteItemList", paramData);

                        LMultiData items = null;
                        if(itemData != null && itemData.getDataCount() > 0) {
                            LMultiData params = new LMultiData();
                            params.add("IN_DS1", itemData);
                            params.add("INPUT", paramData);
                            params.add("LCompoundDao", cDao);

                            workPbc.deleteWorkRoute(params);

                            for(int i=0; i < itemData.getDataCount(); i++) {
                                for(int j=0; j < SalesOrdMngtListData.getDataCount(); j++ ) {
                                    LData master = new LData();
                                    LData item = new LData();
                                    items = new LMultiData();

                                    if(itemData.getString("lineNo", i).equals(SalesOrdMngtListData.getString("lineNo", j))) {
                                        master.setString("salesOrdNo"   , salesOrdNo);
                                        master.setString("lineNo"       , itemData.getString("lineNo",      i));
                                        master.setString("ordTypeCd"    , SalesOrdMngtData.getString("ordTypeCd", 0));
                                        master.setString("dptArCd"      , SalesOrdMngtListData.getString("dptArCd",     j));
                                        master.setString("dptArTypeCd"  , SalesOrdMngtListData.getString("dptArTypeCd", j));
                                        master.setString("dptArZipCd"   , SalesOrdMngtListData.getString("dptArZipCd",  j));
                                        master.setString("dptArZipAddr" , SalesOrdMngtListData.getString("dptArZipAddr",j));
                                        master.setString("dptArDtlAddr" , SalesOrdMngtListData.getString("dptArDtlAddr",j));
                                        master.setString("arvArCd"      , SalesOrdMngtListData.getString("arvArCd",     j));
                                        master.setString("arvArTypeCd"  , SalesOrdMngtListData.getString("arvArTypeCd", j));
                                        master.setString("bookingNo"    , SalesOrdMngtData.getString("bookingNo",       0));
                                        master.setString("strtReqYmd"   , SalesOrdMngtListData.getString("strtReqYmd",  j));
                                        master.setString("strtReqHm"    , SalesOrdMngtListData.getString("strtReqHm",   j));
                                        master.setString("aptdReqYmd"   , SalesOrdMngtListData.getString("aptdReqYmd",  j));
                                        master.setString("aptdReqHm"    , SalesOrdMngtListData.getString("aptdReqHm",   j));
                                        master.setString("regrId"       , SalesOrdMngtData.getString("regrId",          0));
                                        master.setString("mdfrId"       , SalesOrdMngtData.getString("mdfrId",          0));

                                        item.setString("salesOrdNo"     , salesOrdNo);
                                        item.setString("lineNo"         , SalesOrdMngtListData.getString("lineNo",      j));
                                        item.setString("custCd"         , SalesOrdMngtListData.getString("custCd",      j));
                                        item.setString("itemCd"         , SalesOrdMngtListData.getString("itemCd",      j));
                                        item.setString("basisUnitCd"    , SalesOrdMngtListData.getString("basisUnitCd", j));
                                        item.setDouble("ordQty"         , SalesOrdMngtListData.getDouble("ordQty",      j));
                                        item.setString("qtyUnitCd"      , SalesOrdMngtListData.getString("qtyUnitCd",   j));
                                        item.setDouble("ordWgt"         , SalesOrdMngtListData.getDouble("ordWgt",      j));
                                        item.setString("wgtUnitCd"      , SalesOrdMngtListData.getString("wgtUnitCd",   j));
                                        item.setDouble("ordCbm"         , SalesOrdMngtListData.getDouble("ordCbm",      j));
                                        item.setString("dptArCd"        , SalesOrdMngtListData.getString("dptArCd",     j));
                                        item.setString("dptArTypeCd"    , SalesOrdMngtListData.getString("dptArTypeCd", j));
                                        item.setString("arvArCd"        , SalesOrdMngtListData.getString("arvArCd",     j));
                                        item.setString("arvArTypeCd"    , SalesOrdMngtListData.getString("arvArTypeCd", j));
                                        item.setString("aptdReqYmd"     , SalesOrdMngtListData.getString("aptdReqYmd",  j));
                                        item.setString("aptdReqHm"      , SalesOrdMngtListData.getString("aptdReqHm",   j));
                                        item.setString("regrId"         , SalesOrdMngtData.getString("regrId",          0 ));
                                        item.setString("mdfrId"         , SalesOrdMngtData.getString("mdfrId",          0 ));

                                        items.addLData(item);

                                        master.set("LCompoundDao", cDao);
                                        workPbc.createBasisWorkRoute(master, items);
                                    }
                                }
                            }
                        }
                    }

/*class 4 변경인 경우  변경된 라인아이템이 작업경로가 생성된 아이템인 경우 : 작업경로 삭제 -> 기본작업경로 재생성.
                    단, 라인삭제인 경우 기본작업경로 재생성 안함.*/

                    if(SalesOrdMngtListData != null && SalesOrdMngtListData.getDataCount() > 0) {
                        for(int i=0; i < SalesOrdMngtListData.getDataCount(); i++) {
                            LData check2 = checkTplOceanExpSalesOrdFwdItemUpdate(SalesOrdMngtData, SalesOrdMngtListData.getLData(i));
                            if(check2.getBoolean("case4") ){
                                if(!SalesOrdMngtListData.getString("updFlag", i).equals("U")) {//그리드의 변경사항이 있는 경우
                                    if(SalesOrdMngtListData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                                    || SalesOrdMngtListData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE) {
                                        LData itemData = new LData();
                                        itemData.setString("salesOrdNo", salesOrdNo);
                                        itemData.setString("lineNo", SalesOrdMngtListData.getString("lineNo", i));
                                        LMultiData workRouteItem = commonDao.executeQuery("select/om/om03/workRouteMngt/retrieveTplWorkRouteItemList", itemData);

                                        if(workRouteItem != null && workRouteItem.getDataCount() > 0) {
                                            LMultiData params = new LMultiData();
                                            params.add("IN_DS1", workRouteItem);
                                            params.add("INPUT", paramData);
                                            params.add("LCompoundDao", cDao);
                                            workPbc.deleteWorkRoute(params);

                                            if(SalesOrdMngtListData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE) {
                                                LData master = new LData();
                                                LData item = new LData();
                                                LMultiData items = new LMultiData();

                                                master.setString("salesOrdNo"   , salesOrdNo);
                                                master.setString("lineNo"       , SalesOrdMngtListData.getString("lineNo",      i));
                                                master.setString("ordTypeCd"    , SalesOrdMngtData.getString("ordTypeCd", 0));
                                                master.setString("dptArCd"      , SalesOrdMngtListData.getString("dptArCd",     i));
                                                master.setString("dptArTypeCd"  , SalesOrdMngtListData.getString("dptArTypeCd", i));
                                                master.setString("dptArZipCd"   , SalesOrdMngtListData.getString("dptArZipCd",  i));
                                                master.setString("dptArZipAddr" , SalesOrdMngtListData.getString("dptArZipAddr",i));
                                                master.setString("dptArDtlAddr" , SalesOrdMngtListData.getString("dptArDtlAddr",i));
                                                master.setString("arvArCd"      , SalesOrdMngtListData.getString("arvArCd",     i));
                                                master.setString("arvArTypeCd"  , SalesOrdMngtListData.getString("arvArTypeCd", i));
                                                master.setString("bookingNo"    , SalesOrdMngtData.getString("bookingNo",       0));
                                                master.setString("strtReqYmd"   , SalesOrdMngtListData.getString("strtReqYmd",  i));
                                                master.setString("strtReqHm"    , SalesOrdMngtListData.getString("strtReqHm",   i));
                                                master.setString("aptdReqYmd"   , SalesOrdMngtListData.getString("aptdReqYmd",  i));
                                                master.setString("aptdReqHm"    , SalesOrdMngtListData.getString("aptdReqHm",   i));
                                                master.setString("regrId"       , SalesOrdMngtData.getString("regrId",          0));
                                                master.setString("mdfrId"       , SalesOrdMngtData.getString("mdfrId",          0));

                                                item.setString("salesOrdNo"     , salesOrdNo);
                                                item.setString("lineNo"         , SalesOrdMngtListData.getString("lineNo",      i));
                                                item.setString("custCd"         , SalesOrdMngtListData.getString("custCd",      i));
                                                item.setString("itemCd"         , SalesOrdMngtListData.getString("itemCd",      i));
                                                item.setString("basisUnitCd"    , SalesOrdMngtListData.getString("basisUnitCd", i));
                                                item.setDouble("ordQty"         , SalesOrdMngtListData.getDouble("ordQty",      i));
                                                item.setString("qtyUnitCd"      , SalesOrdMngtListData.getString("qtyUnitCd",   i));
                                                item.setDouble("ordWgt"         , SalesOrdMngtListData.getDouble("ordWgt",      i));
                                                item.setString("wgtUnitCd"      , SalesOrdMngtListData.getString("wgtUnitCd",   i));
                                                item.setDouble("ordCbm"         , SalesOrdMngtListData.getDouble("ordCbm",      i));
                                                item.setString("dptArCd"        , SalesOrdMngtListData.getString("dptArCd",     i));
                                                item.setString("dptArTypeCd"    , SalesOrdMngtListData.getString("dptArTypeCd", i));
                                                item.setString("arvArCd"        , SalesOrdMngtListData.getString("arvArCd",     i));
                                                item.setString("arvArTypeCd"    , SalesOrdMngtListData.getString("arvArTypeCd", i));
                                                item.setString("aptdReqYmd"     , SalesOrdMngtListData.getString("aptdReqYmd",  i));
                                                item.setString("aptdReqHm"      , SalesOrdMngtListData.getString("aptdReqHm",   i));
                                                item.setString("regrId"         , SalesOrdMngtData.getString("regrId",          0));
                                                item.setString("mdfrId"         , SalesOrdMngtData.getString("mdfrId",          0));

                                                items.addLData(item);

                                                master.set("LCompoundDao", cDao);
                                                workPbc.createBasisWorkRoute(master, items);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
/*
Tpl 해상수출판매오더 포워딩 라인아이템 정보를 Insert한다.
*/

            input.setString("salesOrdNo", salesOrdNo);
            input.setString("regrId", SalesOrdMngtData.getString("regrId",0));
            input.setString("mdfrId", SalesOrdMngtData.getString("mdfrId",0));
            input.set("LCompoundDao", cDao);

            changeSalesOrdStat(input);

            LMultiData dataHolder2 = new LMultiData();
            dataHolder2.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwd", input));
            dataHolder2.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwdItemList", input));
            dataHolder2.add("IN_DS3", dao.executeQuery("select/om/om03/workRouteMngt/retrieveTplSalesOrdDivHist", input));

            return dataHolder2;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveTplOceanExpSalesOrdFwd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }


    /** Tpl 해상수출판매오더포워딩의 운송분배를 지시하는 메소드.
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *       salesOrdNo, ordTypeCd, arvArCd, bookingNo, aptdReqYmd
    * @param multiData Command로 부턴 전달받은 input LMultiDataProtocol
    *
    *
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData divideTplOcenaExpTran(LData inputData1, LMultiData inputData2) throws LException {
        try{
            IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
            String salesOrdNo   = inputData1.getString("salesOrdNo");
            LCommonDao dao = new LCommonDao();
            laf.application.dao.LCompoundDao dao2 = new laf.application.dao.LCompoundDao();

            LMultiData items = null;
            if(inputData2 != null && inputData2.getDataCount() > 0) {
                for(int i=0; i < inputData2.getDataCount(); i++) {
                    LData master = new LData();
                    LData item = new LData();
                    items = new LMultiData();

                    master.setString("salesOrdNo"   , salesOrdNo);
                    master.setString("lineNo"       , inputData2.getString("lineNo",        i));
                    master.setString("ordTypeCd"    , inputData1.getString("ordTypeCd"      ));
                    master.setString("dptArCd"      , inputData2.getString("dptArCd",       i));
                    master.setString("dptArTypeCd"  , inputData2.getString("dptArTypeCd",   i));
                    master.setString("dptArZipCd"   , inputData2.getString("dptArZipCd",    i));
                    master.setString("dptArZipAddr" , inputData2.getString("dptArZipAddr",  i));
                    master.setString("dptArDtlAddr" , inputData2.getString("dptArDtlAddr",  i));
                    master.setString("arvArCd"      , inputData2.getString("arvArCd",       i));
                    master.setString("arvArTypeCd"  , inputData2.getString("arvArTypeCd",   i));
                    master.setString("bookingNo"    , inputData1.getString("bookingNo"      ));
                    master.setString("strtReqYmd"   , inputData2.getString("strtReqYmd",    i));
                    master.setString("strtReqHm"    , inputData2.getString("strtReqHm",     i));
                    master.setString("aptdReqYmd"   , inputData2.getString("aptdReqYmd",    i));
                    master.setString("aptdReqHm"    , inputData2.getString("aptdReqHm",     i));
                    master.setString("planVanningYn", OmConstants.COMMON_Y);
                    master.setString("regrId"       , inputData1.getString("regrId"         ));
                    master.setString("mdfrId"       , inputData1.getString("mdfrId"         ));

                    item.setString("salesOrdNo"     , salesOrdNo);
                    item.setString("lineNo"         , inputData2.getString("lineNo",        i));
                    item.setString("custCd"         , inputData2.getString("custCd",        i));
                    item.setString("itemCd"         , inputData2.getString("itemCd",        i));
                    item.setString("basisUnitCd"    , inputData2.getString("basisUnitCd",   i));
                    item.setDouble("ordQty"         , inputData2.getDouble("ordQty",        i));
                    item.setString("qtyUnitCd"      , inputData2.getString("qtyUnitCd",     i));
                    item.setDouble("ordWgt"         , inputData2.getDouble("ordWgt",        i));
                    item.setString("wgtUnitCd"      , inputData2.getString("wgtUnitCd",     i));
                    item.setDouble("ordCbm"         , inputData2.getDouble("ordCbm",        i));
                    item.setString("dptArCd"        , inputData2.getString("dptArCd",       i));
                    item.setString("dptArTypeCd"    , inputData2.getString("dptArTypeCd",   i));
                    item.setString("arvArCd"        , inputData2.getString("arvArCd",       i));
                    item.setString("arvArTypeCd"    , inputData2.getString("arvArTypeCd",   i));
                    item.setString("aptdReqYmd"     , inputData2.getString("aptdReqYmd",    i));
                    item.setString("aptdReqHm"      , inputData2.getString("aptdReqHm",     i));
                    item.setString("regrId"         , inputData1.getString("regrId"          ));
                    item.setString("mdfrId"         , inputData1.getString("mdfrId"          ));

                    items.addLData(item);

                    master.set("LCompoundDao", dao2);
                    workPbc.createBasisWorkRoute(master, items);
                }
            }

            LLog.err.println("salesOrdNo : " + inputData1.getString("salesOrdNo"));
            LLog.err.println("bookingNo  : " + inputData1.getString("bookingNo"));

            LData smsData = new LData();
            smsData.setString("salesOrdNo", inputData1.getString("salesOrdNo"));
            smsData.setString("bookingNo" , inputData1.getString("bookingNo"));
            smsData.setString("sctnCd", "01");
            smsData.set("LCompoundDao", dao2);
            sendTplTranSms(smsData);

            LData input = new LData();
            input.setString("salesOrdNo", salesOrdNo);
            LMultiData dataHolder2 = new LMultiData();
            dataHolder2.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveTplOceanExpSalesOrdFwdItemList", input));
            dataHolder2.add("IN_DS2", dao.executeQuery("select/om/om03/workRouteMngt/retrieveTplSalesOrdDivHist", input));

            return dataHolder2;


        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "divideTplOcenaExpTran()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    public void updateSalesOrd(LMultiData inputData, LData param) throws LException {
        LData       newSalesOrd             = (LData)inputData.get("salesOrd",          0);
        LMultiData  newSalesOrdItemTemp     = (LMultiData)inputData.get("salesOrdItem", 0);
        LData       newSalesOrdPrcl         = inputData.get("salesOrdPrcl"    , 0) == null ? null : (LData)inputData.get("salesOrdPrcl"         , 0);
        LMultiData  newSalesOrdItemPrclTemp = inputData.get("salesOrdItemPrcl", 0) == null ? null : (LMultiData)inputData.get("salesOrdItemPrcl", 0);
        LData       input                   = (LData)inputData.get("INPUT", 0);

        LLog.debug.println(" **** updateSalesOrd start***");
        // 오더완료시 제지 수출오더인 경우 리턴한다.
        if(newSalesOrd.getString("salesOrdCmptSctnCd") != null && !"".equals(newSalesOrd.getString("salesOrdCmptSctnCd"))) {
            String ifId = newSalesOrd.getString("ifId");
            if("IF_HPP_OM_ExportOrder".equals(ifId)) {
                return;
            } else {
                throw new LBizException("이미 완료된 오더이므로 수정할 수 없습니다.");
            }
        }

        LLog.debug.println("\nnewSalesOrdItemTemp  ******* \n"+newSalesOrdItemTemp);

        newSalesOrd.setString("regrId", input.getString("regrId"));
        newSalesOrd.setString("mdfrId", input.getString("mdfrId"));

        LMultiData newSalesOrdItem = new LMultiData();
        for(int i=0; i<newSalesOrdItemTemp.getDataCount(); i++){
            LData ordItem   = newSalesOrdItemTemp.getLData(i);//rjctReasonCd
            // 인터페이스로 수신받은 경우만
            if("N".equals("domMdfProcYn") && "N".equals("mdfDlyProcYn")) {
                ordItem.setString("ordReasonCd", ordItem.getString("rjctReasonCd"));
            }

            ordItem.setString("regrId"      , input.getString("regrId"));
            ordItem.setString("mdfrId"      , input.getString("mdfrId"));
            ordItem.setInt   ("GauceJobType", 0);
            newSalesOrdItem.addLData(ordItem);
        }

        if(newSalesOrdPrcl != null && newSalesOrdPrcl.size() > 0) {
            newSalesOrdPrcl.setString("regrId", input.getString("regrId"));
            newSalesOrdPrcl.setString("mdfrId", input.getString("mdfrId"));
        }

        LMultiData newSalesOrdItemPrcl = null;
        if(newSalesOrdItemPrclTemp != null && newSalesOrdItemPrclTemp.getDataCount() > 0) {
            newSalesOrdItemPrcl = new LMultiData();
            for(int i=0; i<newSalesOrdItemPrclTemp.getDataCount(); i++){
                LData ordItemPrcl   = newSalesOrdItemPrclTemp.getLData(i);
                ordItemPrcl.setString("regrId", input.getString("regrId"));
                ordItemPrcl.setString("mdfrId", input.getString("mdfrId"));
                newSalesOrdItemPrcl.addLData(ordItemPrcl);
            }
        }

        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);

        newSalesOrd.set("LCompoundDao", dao);
        //CompDaoUtil.deliverLCompoundDao(inputData, newSalesOrd);

        newSalesOrd.setString("salesOrdMdfReason", input.getString("input"));

        String aptdDlyCd = newSalesOrd.getString("aptdDlyCd");
        // 물량이 정상인 경우
        if("Y".equals(newSalesOrd.getString("ordVerifyYn"))) {
            // 납품보류 처리  ==> 보류해지(ZZ), 보류(ZZ이외)

            if(aptdDlyCd != null && !"".equals(aptdDlyCd) && !"ZZ".equals(aptdDlyCd)){

                LData ordLData  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", newSalesOrd);
                if(!aptdDlyCd.equals(ordLData.getString("aptdDlyCd"))) {

                    dao.add("cud/om/tb_om02001/updateSalesOrd"    , newSalesOrd);
                    dao.add("cud/om/tb_om02002/updateSalesOrdItem", newSalesOrdItem);
                    dao.executeUpdate();
                    LLog.debug.println(" **** setSalesOrdHistory 888888 start ***");
                    setSalesOrdHistory(newSalesOrd);
                    LLog.debug.println(" **** setSalesOrdHistory 888888 end ***");
                    processAptdDly(newSalesOrd, newSalesOrdItem); //보류처리

                    // 오더상태변경
                    changeSalesOrdStat(newSalesOrd);

                    return;
                }
            }
        }

        LLog.debug.println("\nnewSalesOrdItem  00000000000 \n"+newSalesOrdItem);

        if(newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)){//원발주처 변경시 창고에 재분배
            String headerCol10 = newSalesOrdPrcl.getString("col10")== null ? "" : newSalesOrdPrcl.getString("col10");
            newSalesOrd.setString("col10",headerCol10);
        }

        if(newSalesOrd.getString("rptCustCd").equals("P1927")){//여신초과여부 2014-09-30 papertec
            String headerCol18 = newSalesOrdPrcl.getString("col18")== null ? "" : newSalesOrdPrcl.getString("col18");
            newSalesOrd.setString("col18",headerCol18);
        }        
        
        newSalesOrdItem = confirmSalesOrdMdfPossYn(newSalesOrd, newSalesOrdItem);
        LLog.debug.println(" **** updateSalesOrd 111111 ***");

        LLog.debug.println("\nnewSalesOrdItem  11111 \n"+newSalesOrdItem);

        // 부분완료 처리체크 (라파즈는 취소시 부분완료처리)
        String cmptYn = "N";
        for (int z=0; z<newSalesOrdItem.getDataCount(); z++) {
            LData   chkData = newSalesOrdItem.getLData(z);
            if(!OmConstants.CUST_CO_CD_RP.equals(newSalesOrd.getString("rptCustCd")) && "Y".equals(chkData.getString("reasonYn"))) {
                newSalesOrdItem.modifyInt("GauceJobType", z, GauceDataRow.TB_JOB_UPDATE);
                cmptYn = "Y";

            // 라파즈 아이템 삭제시 부분완료 처리함
            } else if(OmConstants.CUST_CO_CD_RP.equals(newSalesOrd.getString("rptCustCd")) && "Y".equals(chkData.getString("delYn"))) {

                if("Y".equals(chkData.getString("giYn"))){
                    throw new LBizException("이미 GI처리 되었으므로 취소할 수 없습니다.(" + newSalesOrd.getString("custOrdNo") + "-" + chkData.getString("custOrdLineNo") + ")");
                }

                if("Y".equals(chkData.getString("grYn"))){
                    throw new LBizException("이미 GR처리 되었으므로 취소할 수 없습니다.(" + newSalesOrd.getString("custOrdNo") + "-" + chkData.getString("custOrdLineNo") + ")");
                }

                newSalesOrdItem.modifyString("ordReasonCd" , z, "01");
                newSalesOrdItem.modifyInt("GauceJobType", z, GauceDataRow.TB_JOB_UPDATE);
                cmptYn = "Y";
            }
            
            //2014-01-08 확정후 수정오더 전송시 체크로직 추가
	       	if(newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IL)
	                || (newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PS))){
		       	if("Y".equals(chkData.getString("confirmYn"))) {
		       		throw new LBizException("확정오더는 수정할 수 없습니다.");
		       	}
            }
	       	
            //2015-04-14 전주페이퍼 확정후 수정오더 전송시 체크로직 추가
	       	if( newSalesOrd.getString("ifId").equals("IF_NSK_OM_SalesOrder") && newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC) ) {
		       	if("Y".equals(chkData.getString("confirmYn"))) {
		       		throw new LBizException("확정오더는 수정할 수 없습니다.");
		       	}
	       	}

            //2015-04-24 제지, 홈데코  확정후 수정오더 전송시 체크로직 추가
	       	if( newSalesOrd.getString("ifId").equals("IF_HPP_OM_SalesOrder") && newSalesOrd.getString("ifId").equals("IF_HHP_OM_SalesOrder") ) {
		       	if("Y".equals(chkData.getString("confirmYn"))) {
		       		throw new LBizException("확정오더는 수정할 수 없습니다.");
		       	}
	       	}	       	
	       	
        }
        LLog.debug.println(" **** updateSalesOrd 2222 ***");

        // 부분완료 처리
        if("Y".equals(cmptYn)) {
            LMultiData cmptData = new LMultiData();
            CompDaoUtil.deliverLCompoundDao(inputData, cmptData);
            param.setString("custPartCmptYn", "Y");
            cmptData.add("IN_DS1",newSalesOrdItem);
            cmptData.add("IN_DS2",newSalesOrd);
            cmptData.add("INPUT" ,input);
            cmptData.add("PARAM" ,param);
            updateSalesOrdPartCmpt(cmptData);

            // 모든 아이템이 종결된 경우 리턴한다.(리턴하지 않을 경우 삭제 인터페이스가 생성됨)
            LData  itemInfo  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSaleOrdItemCmptCheck", newSalesOrd);
            if(itemInfo != null && itemInfo.getInt("cnt") == 0) {
                return;
            }
        }
        LLog.debug.println(" **** updateSalesOrd 33333 ***");
        // 오더유형변경여부를 체크한다.
        String ordTypeChgYn = "N";
        LData  oldSalesOrd  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveWorkRouteSalesOrdBasisInfo", newSalesOrd);
        if(!oldSalesOrd.getString("ordTypeCd").equals(newSalesOrd.getString("ordTypeCd"))) {
            ordTypeChgYn    = "Y";

            // 제지인 경우 오더유형변경불가 (예: 자가운송, CSN운송)
//          if(OmConstants.CUST_CO_CD_HP.equals(newSalesOrd.getString("rptCustCd"))) {
//              newSalesOrd.setString("ordTypeCd", oldSalesOrd.getString("ordTypeCd"));
//
//              ordTypeChgYn = "N"; // 오더유형변경이 없는 상태로 수정
//          }
        }

        // 화면을 통한 내수 수정 프로세스 인 경우
        if("Y".equals(param.getString("domMdfProcYn")) || "Y".equals(param.getString("mdfDlyProcYn"))) {

            for (int z=0; z<newSalesOrdItem.getDataCount(); z++) {
                LData   chkData = newSalesOrdItem.getLData(z);
                // 오더유형이 변경되었거나 추가된 아이템이 아니면서 변경내용이 존재하는 경우
                if( "Y".equals(ordTypeChgYn) ||
                   ("N".equals(chkData.getString("itemInsYn")) && "Y".equals(chkData.getString("chkYn")))) {
                    if("Y".equals(chkData.getString("confirmYn"))) {
                        throw new LBizException(chkData.getString("confirmMsg")+"(라인번호 : " + chkData.getString("lineNo") + ")");
                    }
                    if("N".equals(chkData.getString("outputPoss")) ) {
                        throw new LBizException("해당 아이템의 할당 또는 출고실적이 발생되어 수정할 수 없습니다..(라인번호 : " + chkData.getString("lineNo") + ")");
                    }
                    if("N".equals(chkData.getString("transPoss")) ) {
                        throw new LBizException("해당 아이템의 배차 또는 출도착 실적이 발생되어 수정할 수 없습니다..(라인번호 : " + chkData.getString("lineNo") + ")");
                    }
                    if("N".equals(chkData.getString("inputPoss")) ) {
                        throw new LBizException("해당 아이템의 입고실적이 발생되어 수정할 수 없습니다..(라인번호 : " + chkData.getString("lineNo") + ")");
                    }
                    if("N".equals(chkData.getString("fisPoss")) ) {
                        throw new LBizException("국제물류 실적이 발생되어 수정할 수 없습니다.)");
                    }
                }
            }

            // 화면내 수정시 pckgQty값 환산로직
            if(newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NS)
                       || newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)
                       || newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DF)
                       || newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MX)
                       || newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IR)){

                LMultiData changeData = new LMultiData();
                if(newSalesOrd != null && newSalesOrdItem.getDataCount() > 0) {
                    changeData = changeQtyWgt(newSalesOrd,newSalesOrdItem);
                }
                LLog.debug.println("changeData=====>" + changeData);
                for(int i = 0;i<changeData.getDataCount();i++){
                    newSalesOrdItem.modify("pckgQty", i, changeData.get("pckgQty", i));
                }
            }
        }

        LLog.debug.println(" **** updateSalesOrd 444444 ***");
        // Interface로 내수 수정처리된 경우
        if(!"Y".equals(param.getString("domMdfProcYn")) && !"Y".equals(param.getString("mdfDlyProcYn"))) {

            boolean rsltYn       = false;
            for (int z=0; z<newSalesOrdItem.getDataCount(); z++) {
                LData   chkData = newSalesOrdItem.getLData(z);

                /************************ [ 수정 또는 취소 체크 로직 시작 ]************************* */
                if(newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IL)
                         || (newSalesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PS))){

                	//2014-01-08 확정후 수정오더 전송시 체크로직 추가
                	if("Y".equals(chkData.getString("confirmYn"))) {
                		throw new LBizException("확정오더는 수정할 수 없습니다.");
                	}
                	
                	// 주문재단 출고에 대한 재단오더에 확정유무 확인 = 재단오더.cust_ref_no = 주문재단출고오더번호
                    if(newSalesOrd.getString("custOrdTypeCd") != null
                      && "ZC1".equals(newSalesOrd.getString("custOrdTypeCd"))){
//                      String cutOrdNo = newSalesOrd.getString("custRefNo")==null?"":newSalesOrd.getString("custRefNo");
                        LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                        if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                          throw new LBizException("주문재단분 ["+cutOrdNo+"]오더에 대한 할당취소후 수정하시기 바랍니다.");
                            throw new LBizException("주문재단분 오더에 대한 할당취소후 수정하시기 바랍니다.");
                        }
                    }

                    // 재단오더에 대한 주문재단출고오더 확정유무 확인 = 주문재단출고오더.cust_ref_no = 주문재단
                    if(newSalesOrd.getString("custOrdTypeCd") != null
                      && "ZTD2".equals(newSalesOrd.getString("custOrdTypeCd"))){
//                      String cutOrdNo = newSalesOrd.getString("custRefNo")==null?"":newSalesOrd.getString("custRefNo");
                        LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                        if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                          throw new LBizException("주문출고 또는 직출고  ["+cutOrdNo+"]오더에 대한 확정취소후 수정하시기 바랍니다.");
                            throw new LBizException("주문출고 또는 직출고  오더에 대한 확정취소후 수정하시기 바랍니다.");
                        }
                    }

                    // 매입오더에대한 주문재단분(X), 직출고오더 확정유무 확인,
                    // 매입오더.cust_ref_no=직출고오더, 재단오더.cust_ref_no=직출고오더, 직수출오더.cust_ref_no=매입오더
                    if(newSalesOrd.getString("custOrdTypeCd") != null
                      && ("ZD".equals(newSalesOrd.getString("custOrdTypeCd"))
                          || "ZB".equals(newSalesOrd.getString("custOrdTypeCd"))
                          || "ZF".equals(newSalesOrd.getString("custOrdTypeCd")))){
//                          String cutOrdNo = newSalesOrd.getString("custRefNo")==null?"":newSalesOrd.getString("custRefNo");
                            LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                            if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                              throw new LBizException("직출고  ["+cutOrdNo+"]오더에 대한 확정취소후 수정하시기 바랍니다.");
                                throw new LBizException("직출고  오더에 대한 확정취소후 수정하시기 바랍니다.");
                            }
                    }

                    // 직출고오더에 대한 매입입고오더 확정유무 확인 = 직출고오더.cust_ref_no = 매입오더
                    if(newSalesOrd.getString("custOrdTypeCd") != null
                      && "ZC2".equals(newSalesOrd.getString("custOrdTypeCd"))){
//                      String cutOrdNo = newSalesOrd.getString("custRefNo")==null?"":newSalesOrd.getString("custRefNo");
                        LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                        if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                          throw new LBizException("매입  ["+cutOrdNo+"]오더에 대한 입고취소후 수정하시기 바랍니다.");
                            throw new LBizException("매입  오더에 대한 입고취소후 수정하시기 바랍니다.");
                        }
                    }

                    // 종결사유코드 : C1(납품종결), 그외는 취소, 오더전송시에는 C1는 전송안됨, 종결처리시 C1은 납품종결, 그외는 취소로 통합전산에서 인식.
                    for (int zz=0; zz<newSalesOrdItem.getDataCount(); zz++) {
                        LData   lItemData   = newSalesOrdItem.getLData(zz);

                        if(lItemData.getString("ordReasonCd")!=null){
                            // 납품종료가 아닌 오더취소시 체크
                            if(!"C1".equals(lItemData.getString("ordReasonCd"))){

                                // 주문재단 출고에 대한 재단오더에 확정유무 확인 = 재단오더.cust_ref_no = 주문재단출고오더번호
                                if(newSalesOrd.getString("custOrdTypeCd") != null
                                  && "ZC1".equals(newSalesOrd.getString("custOrdTypeCd"))){
//                                  String cutOrdNo = lItemData.getString("custRefNo")==null?"":lItemData.getString("custRefNo");
                                    LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                                    if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                                      throw new LBizException("주문재단분 ["+cutOrdNo+"]오더에 대한 할당취소후 취소하시기 바랍니다.");
                                        throw new LBizException("주문재단분 오더에 대한 할당취소후 취소하시기 바랍니다.");
                                    }else{
//                                      LData lCustOrdInfo  = dao.executeQueryForSingle("select/om/om02/salesOrd/getSalesNoByCutOrder", lItemData);

                                        LMultiData mCustOrdInfo = dao.executeQuery("select/om/om02/salesOrd/getSalesNoByCutOrder", lItemData);
                                        LData lCustOrdInfo = new LData();
                                        for (int j=0; j<mCustOrdInfo.getDataCount(); j++) {
                                            lCustOrdInfo = mCustOrdInfo.getLData(j);
                                            updateIfSalesOrdPartCmpt(lCustOrdInfo);
                                        }

                                    }
                                }

                                // 재단오더에 대한 주문재단출고오더 확정유무 확인 = 주문재단출고오더.cust_ref_no = 주문재단
                                if(newSalesOrd.getString("custOrdTypeCd") != null
                                  && "ZTD2".equals(newSalesOrd.getString("custOrdTypeCd"))){
//                                  String cutOrdNo = lItemData.getString("custRefNo")==null?"":lItemData.getString("custRefNo");
                                    LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                                    if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                                      throw new LBizException("주문출고 또는 직출고  ["+cutOrdNo+"]오더에 대한 확정취소후 취소하시기 바랍니다.");
                                        throw new LBizException("주문출고 또는 직출고  오더에 대한 확정취소후 취소하시기 바랍니다.");
                                    }
                                }

                                // 매입오더에대한 주문재단분(X), 직출고오더 확정유무 확인,
                                // 매입오더.cust_ref_no=직출고오더, 재단오더.cust_ref_no=직출고오더, 직수출오더.cust_ref_no=매입오더
                                if(newSalesOrd.getString("custOrdTypeCd") != null
                                  && ("ZD".equals(newSalesOrd.getString("custOrdTypeCd"))
                                      || "ZB".equals(newSalesOrd.getString("custOrdTypeCd"))
                                      || "ZF".equals(newSalesOrd.getString("custOrdTypeCd")))){
//                                      String cutOrdNo = lItemData.getString("custRefNo")==null?"":lItemData.getString("custRefNo");
                                        LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                                        if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                                          throw new LBizException("직출고  ["+cutOrdNo+"]오더에 대한 확정취소후 취소하시기 바랍니다.");
                                            throw new LBizException("직출고  오더에 대한 확정취소후 취소하시기 바랍니다.");
                                        }
                                }

                                // 직출고오더에 대한 매입입고오더 확정유무 확인 = 직출고오더.cust_ref_no = 매입오더
                                if(newSalesOrd.getString("custOrdTypeCd") != null
                                  && "ZC2".equals(newSalesOrd.getString("custOrdTypeCd"))){
//                                  String cutOrdNo = lItemData.getString("custRefNo")==null?"":lItemData.getString("custRefNo");
                                    LData  lCutOrdStat  = dao.executeQueryForSingle("select/om/om02/salesOrd/getCutOrderDcsnCnt", newSalesOrd);
                                    if("Y".equals(lCutOrdStat.getString("dcsnYn"))){
//                                      throw new LBizException("매입  ["+cutOrdNo+"]오더에 대한 입고취소후 취소하시기 바랍니다.");
                                        throw new LBizException("매입  오더에 대한 입고취소후 취소하시기 바랍니다.");
                                    }
                                }
                            }
                        }
                    }
                }
                /************************ [ 수정 또는 취소 체크 로직 끝 ]************************* */

                // 추가된 아이템이 아니면서 변경내용이 존재하는 경우만
                if("N".equals(chkData.getString("itemInsYn")) && "Y".equals(chkData.getString("chkYn"))) {
                    if("Y".equals(chkData.getString("confirmYn"))) {
                        rsltYn = true;
                        break;
                    }

                    if("N".equals(chkData.getString("outputPoss")) ||
                       "N".equals(chkData.getString("transPoss"))  ||
                       "N".equals(chkData.getString("inputPoss"))  ||
                       "N".equals(chkData.getString("fisPoss"))) {
                        rsltYn = true;
                        break;
                    }

                    LLog.debug.println(" **** updateSalesOrd 555555 ***");
                // 추가된 아이템이 아니면서 변경내용이 없는 경우 (입고에 대한 인터페이스 수정시 팔레트 수량 유지)
                } else if("N".equals(chkData.getString("itemInsYn")) && "N".equals(chkData.getString("chkYn"))){
                    newSalesOrdItem.modifyDouble("palletQty"    , z, newSalesOrdItem.getDouble("palletQtyOld", z));
                }

                if("Y".equals(ordTypeChgYn)) {
                    if("Y".equals(chkData.getString("confirmYn"))  ||
                       "N".equals(chkData.getString("outputPoss")) ||
                       "N".equals(chkData.getString("transPoss"))  ||
                       "N".equals(chkData.getString("inputPoss"))  ||
                       "N".equals(chkData.getString("fisPoss"))) {
                        rsltYn = true;
                        break;
                    }
                }
            }


            LLog.debug.println(" **** updateSalesOrd 666666 ***");
            // 확정또는 실적이 생성된 경우
            if(rsltYn) {
                if("IF_HPP_OM_POChange".equals(newSalesOrd.getString("ifId")) ||
                   "IF_HPP_OM_TransferOrder".equals(newSalesOrd.getString("ifId")) ||
                   "IF_HHP_OM_POChange".equals(newSalesOrd.getString("ifId")) ||
                   "CSN".equals(newSalesOrd.getString("ifId")) ||   // 화면내에서 수정 할시 로직 추가 2009.11.11 cys.
                   "IF_HHP_OM_TransferOrder".equals(newSalesOrd.getString("ifId")) ) {
                    throw new LBizException("실적이 발생되었으므로 수정할 수 없습니다.");
                }

                // 수정보류구분코드를 세팅함
                newSalesOrd.setString("mdfDlySctnCd", "01");

/*      수정보류 SMS 전송로직시작 */
/*              LData lSmsSendInfo = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSmsSendInfo", newSalesOrd);
                if(lSmsSendInfo != null) {
                    LData lParamData = new LData();
                    LMultiData mParamData = new LMultiData();

                    int rcvCnt = lSmsSendInfo.getInt("rcvTelCnt");

                    if(rcvCnt > 0){

                        if(rcvCnt == 1){
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv1Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv1Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv1Tel3"));

                            mParamData.addLData(lParamData);
                        }else if(rcvCnt == 2){
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv1Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv1Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv1Tel3"));
                            mParamData.addLData(lParamData);
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv2Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv2Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv2Tel3"));
                            mParamData.addLData(lParamData);
                        }else if(rcvCnt == 3){
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv1Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv1Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv1Tel3"));
                            mParamData.addLData(lParamData);
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv2Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv2Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv2Tel3"));
                            mParamData.addLData(lParamData);
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv3Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv3Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv3Tel3"));
                            mParamData.addLData(lParamData);
                        }else if(rcvCnt == 4){
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv1Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv1Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv1Tel3"));
                            mParamData.addLData(lParamData);
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv2Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv2Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv2Tel3"));
                            mParamData.addLData(lParamData);
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv3Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv3Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv3Tel3"));
                            mParamData.addLData(lParamData);
                            lParamData.setString("rcvTel1",lSmsSendInfo.getString("rcv4Tel1"));
                            lParamData.setString("rcvTel2",lSmsSendInfo.getString("rcv4Tel2"));
                            lParamData.setString("rcvTel3",lSmsSendInfo.getString("rcv4Tel3"));
                            mParamData.addLData(lParamData);
                        }

                        LData lTempData = new LData();
                        for (int z=0; z<mParamData.getDataCount(); z++) {
                            lTempData = mParamData.getLData(z);
                            lTempData.setString("sndTel1", lSmsSendInfo.getString("sndTel1"));
                            lTempData.setString("sndTel2", lSmsSendInfo.getString("sndTel2"));
                            lTempData.setString("sndTel3", lSmsSendInfo.getString("sndTel3"));
                            String custOrdNo = newSalesOrd.getString("custOrdNo");
                            String msg = "["+custOrdNo+"] 확정된 오더에 대해 수정이 불가하니 확정을 초기상태로 변경바람";

                            lTempData.setString("sendMsg", msg);
                            lTempData.setString("recvName", "고객");

                            dao.add("cud/om/smsdata/createSmsdata"      , lTempData);
                            dao.executeUpdate();
                        }
                    }
                }
*/
  // 수정보류 SMS 전송로직 끝

                if(!newSalesOrd.getString("salesOrdNo").equals("S000224783")){
                    // 이력생성
                    dao.add("cud/om/tb_om02011h/createTbOm02011h"       , newSalesOrd);
                    dao.add("cud/om/tb_om02014h/createTbOm02014h"       , newSalesOrdPrcl);
                    LLog.debug.println(" **** updateSalesOrd 7777777 ***");
                    LLog.debug.println(" **** updateSalesOrd 7777777 : newSalesOrd***" + newSalesOrd);
                    if("01".equals(newSalesOrd.getString("expImpDomSctnCd")) || "02".equals(newSalesOrd.getString("expImpDomSctnCd"))) {
                        dao.add("cud/om/tb_om02013h/createTbOm02013h"   , newSalesOrd);
                    }
                    dao.executeUpdate();

                    LLog.debug.println(" **** updateSalesOrd 888888 ***");

                    dao.add("cud/om/tb_om02012h/createTbOm02012h"       , newSalesOrdItem);
                    dao.add("cud/om/tb_om02015h/createTbOm02015h"       , newSalesOrdItemPrcl);
                    dao.executeUpdate();
                }

                return;
            }
        }
        LLog.debug.println(" **** updateSalesOrd 9999999999 ***");
        int itemChgCnt = 0;
        LMultiData  newSalesOrdItem1    = new LMultiData();
        for (int z=0; z<newSalesOrdItem.getDataCount(); z++) {
            LData item = newSalesOrdItem.getLData(z);
            // 삭제된 아이템 제외
            if((item.getString("delYn")       == null || "N".equals(item.getString("delYn"))       ) &&
               (item.getString("ordReasonCd") == null ||  "".equals(item.getString("ordReasonCd")) ) ) {

                // 실적생성 아이템 제외
                if("N".equals(item.getString("confirmYn") ) &&
                   "Y".equals(item.getString("outputPoss")) &&
                   "Y".equals(item.getString("transPoss") ) &&
                   "Y".equals(item.getString("inputPoss") ) &&
                   "Y".equals(item.getString("fisPoss")   ) ) {

                    //화면을 통한 내수 수정 프로세스 인 경우
                    if("Y".equals(param.getString("domMdfProcYn")) || "Y".equals(param.getString("mdfDlyProcYn"))) {
                        // 헤더의 납기요청일과 요청시분을 고치면 아이템쪽도 업데이트함  2010.5.25 cys.
                        item.setString("aptdReqYm", newSalesOrd.getString("aptdReqYm"));
                        item.setString("aptdReqHm", newSalesOrd.getString("aptdReqHm"));
                    }
                        newSalesOrdItem1.addLData(item);
                   }
            }

            // 변경된 아이템개수 카운트
            if("Y".equals(item.getString("chkYn")) || "Y".equals(item.getString("addYn"))) {
                itemChgCnt++;
            }
        }
        LLog.debug.println(" **** updateSalesOrd 00000000000000 ***");

        //오더 수정
        dao.add("cud/om/tb_om02001/updateSalesOrd"          , newSalesOrd);
        dao.add("cud/om/tb_om02004/mergeTbOm02004"          , newSalesOrdPrcl);
        if("01".equals(newSalesOrd.getString("expImpDomSctnCd")) || "02".equals(newSalesOrd.getString("expImpDomSctnCd"))) {
            dao.add("cud/om/tb_om02003/updateSalesOrdFis"   , newSalesOrd);
        }
        dao.executeUpdate();
        LLog.debug.println(" **** updateSalesOrd 01111111111 ***");
        for(int z=0; z<newSalesOrdItem.getDataCount(); z++) {
            LData ordItem     = newSalesOrdItem.getLData(z);

            //화면을 통한 내수 수정 프로세스 인 경우
            if("Y".equals(param.getString("domMdfProcYn")) || "Y".equals(param.getString("mdfDlyProcYn"))) {
                // 헤더의 납기요청일과 요청시분을 고치면 아이템쪽도 업데이트함 2010.5.25 cys.
                ordItem.setString("aptdReqYm", newSalesOrd.getString("aptdReqYm"));
                ordItem.setString("aptdReqHm", newSalesOrd.getString("aptdReqHm"));
            }

            LLog.debug.println("\n ordItem  11111 \n"+ordItem);

            LData ordItemPrcl = newSalesOrdItemPrcl.getLData(z);
            if(ordItem.getString("addYn") == null || "N".equals(ordItem.getString("addYn"))) {
                dao.add("cud/om/tb_om02002/updateSalesOrdItem"      , ordItem);
                dao.add("cud/om/tb_om02005/mergeTbOm02005"          , ordItemPrcl);
                dao.executeUpdate();
            }
        }
        LLog.debug.println(" **** updateSalesOrd 02222222 ***");
        for(int z=0; z<newSalesOrdItem.getDataCount(); z++) {
            LData ordItem     = newSalesOrdItem.getLData(z);
            LData ordItemPrcl = newSalesOrdItemPrcl.getLData(z);

            //화면을 통한 내수 수정 프로세스 인 경우
            if("Y".equals(param.getString("domMdfProcYn")) || "Y".equals(param.getString("mdfDlyProcYn"))) {
                // 헤더의 납기요청일과 요청시분을 고치면 아이템쪽도 업데이트함 2010.5.25 cys.
                ordItem.setString("aptdReqYm", newSalesOrd.getString("aptdReqYm"));
                ordItem.setString("aptdReqHm", newSalesOrd.getString("aptdReqHm"));
            }

            if("Y".equals(ordItem.getString("addYn"))) {
                dao.add("cud/om/tb_om02002/createSalesOrd"  , ordItem);
                dao.add("cud/om/tb_om02005/createTbOm02005" , ordItemPrcl);
                dao.executeUpdate();

                LLog.debug.println(" **** updateSalesOrd 01234222222222222222 ***");
            }
        }
        LLog.debug.println(" **** updateSalesOrd 033333333 ***");


        // 디테일이 없는 경우는 제외 : 디테일이 없는 경우는 수정이 들어오면 무조건 오더취소됨.
        if(!"IF_SFC_OM_ShippingRequest".equals(newSalesOrd.getString("ifId"))
         && !"IF_CII_OM_ShippingRequest".equals(newSalesOrd.getString("ifId"))) {
            // 모든 아이템 삭제시 오더취소처리
            dao.add("cud/om/tb_om02001/updateSalesOrdAutoCancel", newSalesOrd);
            dao.executeUpdate();
        }

        LLog.debug.println(" **** updateSalesOrd 044444444444 ***");
        LData cancelSO = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdCancelYn", newSalesOrd);

        if(cancelSO != null && cancelSO.getString("salesOrdCnclYn") != null && cancelSO.getString("salesOrdCnclYn").equals("Y")) {
            //모든 아이템이 삭제되면 분배된것도 취소처리한다.
            // 오더분배가 존재하는 경우 삭제한다.
            LData paramData = new LData();
            paramData.setString("salesOrdNo", newSalesOrd.getString("salesOrdNo"));
            paramData.setString("regrId"    , newSalesOrd.getString("regrId"));
            paramData.setString("mdfrId"    , newSalesOrd.getString("mdfrId"));

            LMultiData itemData = dao.executeQuery("select/om/om03/workRouteMngt/retrieveDivWorkRouetList", paramData);
            if(itemData != null && itemData.getDataCount() > 0) {
                LMultiData params = new LMultiData();
                params.add("IN_DS1" , itemData);
                params.add("INPUT"  , paramData);
                IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
                CompDaoUtil.deliverLCompoundDao(newSalesOrd, params);
                workPbc.deleteWorkRoute(params);
            }
            LLog.debug.println(" **** updateSalesOrd 0555555555 ***");
            if(!"Y".equals(param.getString("mdfDlyProcYn"))) {
                // 이력생성
                setSalesOrdHistory(newSalesOrd);
            }
            return;
        }
        LLog.debug.println(" **** updateSalesOrd 06666666666 ***");
        CompDaoUtil.deliverLCompoundDao(inputData, newSalesOrd);

        if("Y".equals(param.getString("mdfDlyProcYn"))) {

            newSalesOrd.setString("mdfDlySctnCd", "02");
            dao.add("cud/om/tb_om02011h/updateTbOm02011h"   , newSalesOrd);
            dao.executeUpdate();
        }
        LLog.debug.println(" **** updateSalesOrd 0777777777 ***");

        if("Y".equals(newSalesOrd.getString("ordVerifyYn"))) {

            // 변경된 아이템이 존재하는 경우, 보류해지된 경우, 수정보류처리인 경우, 오더유형이 변경된 경우
            if(itemChgCnt > 0 || "ZZ".equals(aptdDlyCd) || "Y".equals(param.getString("mdfDlyProcYn")) || "Y".equals(ordTypeChgYn)) {
                // 가용재고확인후 분배처리
                createSalesOrdRest(newSalesOrd, newSalesOrdItem1);
            }

            if("IF_CII_OM_ShippingRequest".equals(newSalesOrd.getString("ifId"))) {
                LData divideData = new LData();
                divideData.set("LCompoundDao", dao);
                divideData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                divideData.setString("salesOrdNo", newSalesOrd.getString("salesOrdNo"));
                divideData.setString("bookingNo", newSalesOrd.getString("bookingNo"));
                divideData.setString("custCd", newSalesOrd.getString("custCd"));
                divideData.setString("regrId", newSalesOrd.getString("regrId"));
                divideData.setString("mdfrId", newSalesOrd.getString("mdfrId"));
                //2015-01-22 제일모직 전자재료 부문 SDI 로직으로  변경
                divideData.setString("divCode", newSalesOrd.getString("col23"));

                IOrdDivMngt ordDivMngt  = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                ordDivMngt.divideFwdEo(divideData);

                divideData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_CREATE);
                ordDivMngt.divideFwdEo(divideData);
            }
            LLog.debug.println(" **** updateSalesOrd 088888888 ***");
        } else {
            // 오더분배가 존재하는 경우 삭제한다.
            LData paramData = new LData();
            paramData.setString("salesOrdNo", newSalesOrd.getString("salesOrdNo"));
            paramData.setString("regrId"    , newSalesOrd.getString("regrId"));
            paramData.setString("mdfrId"    , newSalesOrd.getString("mdfrId"));

            LMultiData itemData = dao.executeQuery("select/om/om03/workRouteMngt/retrieveDivWorkRouetList", paramData);
            if(itemData != null && itemData.getDataCount() > 0) {
                LMultiData params = new LMultiData();
                params.add("IN_DS1" , itemData);
                params.add("INPUT"  , paramData);
                IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
                CompDaoUtil.deliverLCompoundDao(newSalesOrd, params);
                workPbc.deleteWorkRoute(params);
            }
        }

        LLog.debug.println("\nnewSalesOrdItem1  22222 \n"+newSalesOrdItem1);
        LLog.debug.println(" **** updateSalesOrd 099999999999 ***");
        // 자동완료를 체크함
        if("Y".equals(cmptYn)) {
            newSalesOrd.setString("salesOrdCmptSctnCd", OmConstants.SALES_ORD_CMPT_SCTN_CD_CUST);
        }
        processSalesOrdAutoCmpt(newSalesOrd);
        LLog.debug.println(" **** updateSalesOrd 001111111111 ***");
        // 판매오더상태 변경
        changeSalesOrdStat(newSalesOrd);
        LLog.debug.println(" **** updateSalesOrd 00222222222 ***");
        if(!"Y".equals(param.getString("mdfDlyProcYn"))) {
            // 이력생성
            LLog.debug.println(" **** setSalesOrdHistory 99999 start ***");
            setSalesOrdHistory(newSalesOrd);
            LLog.debug.println(" **** setSalesOrdHistory 99999 end ***");
        }

        LLog.debug.println(" **** updateSalesOrd end***");
    }

    private void updateSalesOrdDataManual(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

        LData salesOrd              = (LData)inputData.get("salesOrd");
        LMultiData salesOrdItem     = (LMultiData)inputData.get("salesOrdItem");
//      LData salesOrdPrcl          = (LData)inputData.get("salesOrdPrcl");
//      LMultiData salesOrdItemPrcl = (LMultiData)inputData.get("salesOrdItemPrcl");
        LData workRoute             = (LData)inputData.get("workRoute");
        LData input                 = (LData)inputData.get("INPUT");
        try{
            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveSalesOrdHistoryCnt", salesOrd);
            LData result = commonDao.executeQueryForSingle();

            salesOrd.setInt         ("cnt"      , result.getInt("cnt"));
            salesOrdItem.addInt     ("cnt"      , result.getInt("cnt"));
//          salesOrdPrcl.setInt     ("cnt"      , result.getInt("cnt"));
//          salesOrdItemPrcl.addInt ("cnt"      , result.getInt("cnt"));

            salesOrd.setString      ("mdfDlySctnCd", "1");
            salesOrd.setString      ("regrId"   , input.getString("regrId"));
            salesOrd.setString      ("mdfrId"   , input.getString("mdfrId"));

            salesOrdItem.addString("regrId", input.getString("regrId"));
            salesOrdItem.addString("mdfrId", input.getString("mdfrId"));

            LMultiData salesFis = new LMultiData();
            if(workRoute.getString("fisYn").equals("Y")) {
                LData salesOrdFis   = (LData)inputData.get("salesOrdFis");
                LMultiData booking  = (LMultiData)inputData.get("booking");

                salesOrdFis.setInt      ("cnt", result.getInt("cnt"));
                booking.addInt          ("cnt", result.getInt("cnt"));
                dao.add("cud/om/tb_om02013h/createSalesOrdFisInfo", salesOrdFis);
                dao.add("cud/om/tb_om02019/createBooking", booking);

                salesFis.addLData(salesOrdFis);
            }

            dao.executeUpdate();

            LMultiData salesOrds = new LMultiData();
            salesOrds.addLData(salesOrd);

            createSalesOrdHistory(salesOrds, salesOrdItem, salesFis, null, null);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "updateSalesOrdDataManual()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    private void updateSalesOrdData(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

        LData salesOrd              = (LData)inputData.get("salesOrd");
        LMultiData salesOrdItem     = (LMultiData)inputData.get("salesOrdItem");

        LData salesOrdFis           = (LData)inputData.get("salesOrdFis");
        LMultiData booking          = (LMultiData)inputData.get("booking");
        LData workRoute             = (LData)inputData.get("workRoute");
        LData param                 = (LData)inputData.get("param");
        LData input                 = (LData)inputData.get("INPUT");

        if(salesOrd != null) {
            salesOrd.setString      ("mdfrId", input.getString("mdfrId"));
        }

        if(salesOrdItem != null && salesOrdItem.getDataCount() > 0) {
            salesOrdItem.addString  ("mdfrId", input.getString("mdfrId"));
        }

        if(salesOrdFis != null) {
            salesOrdFis.setString("mdfrId", input.getString("mdfrId"));
        }

        if(booking!= null && booking.getDataCount() > 0) {
            booking.addString("mdfrId", input.getString("mdfrId"));
        }

        try{
            dao.add("cud/om/tb_om02001/updateSalesOrd"          , salesOrd);
            if(salesOrdItem != null) {
                dao.add("cud/om/tb_om02002/updateSalesOrdItem"      , salesOrdItem);
            }

            if(workRoute.getString("fisYn").equals("Y")) {

                if(salesOrdFis  != null)
                    dao.add("cud/om/tb_om02003/updateSalesOrdFis", salesOrdFis);

                if(booking != null)
                    dao.add("cud/om/tb_om02019/updateSalesOrdBooking", booking);
            }
            dao.executeUpdate();

            if(param.getString("mdfDlyProcYn").equals("Y")) {
                salesOrd.setString          ("mdfDlySctnCd", "2");
                dao.add("cud/om/tb_om02011h/updateTbOm02011h", salesOrd);

                dao.executeUpdate();
            } else {
                salesOrd.setString("regrId", input.getString("mdfrId"));
                setSalesOrdHistory(salesOrd);
            }

        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "updateSalesOrdData()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    //실행오더 수정
    private void modifyEo(LData inputData) throws LException {
        try {
            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            LData param = new LData();
            LData salesOrd              = (LData)inputData.get("salesOrd");
            LMultiData workRouteSeq     = (LMultiData)inputData.get("workRouteSeq");

            param.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
            param.setString("workRouteSeq", workRouteSeq.getString("workRouteSeq", 0));
            param.setString("regrId", salesOrd.getString("regrId"));
            param.setString("mdfrId", salesOrd.getString("mdfrId"));

            pbc.updateEo(param);
        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "modifyEo()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    //작업경로 취소
    private void cancelWorkRoute(LData inputData) throws LException {
        try {
            IWorkRouteMngt pbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);
            LMultiData param = new LMultiData();
            LData salesOrd              = (LData)inputData.get("salesOrd");
            LMultiData workRouteSeq     = (LMultiData)inputData.get("workRouteSeq");

            param.add("IN_DS1", workRouteSeq);
            param.add("INPUT", salesOrd);
            pbc.deleteWorkRoute(param);

        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelWorkRoute()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    //작업경로 생성
    private void createWorkRoute(LData inputData) throws LException {
        try {
            IWorkRouteMngt pbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);

            LData salesOrd              = (LData)inputData.get("salesOrd");
            LData input                 = (LData)inputData.get("INPUT");
            LMultiData salesOrdItem     = (LMultiData)inputData.get("salesOrdItem");
            GauceUtil.fillColValue(salesOrdItem, "regrId", input.getString("regrId"));
            GauceUtil.fillColValue(salesOrdItem, "mdfrId", input.getString("mdfrId"));
            salesOrd.set("LCompoundDao", inputData.get("LCompoundDao"));
            pbc.createBasisWorkRoute(salesOrd, salesOrdItem);//기본작업경로 생성

        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createWorkRoute()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /** 내수판매오더 수정가능 여부 확인 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LMultiDataProtocol
    *        salesOrd, salesOrdItem, salesOrdPrcl, salesOrdItemPrcl,salesOrdFis, booking
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData confirmSalesOrdMdfPossYn(LData newSalesOrd, LMultiData newSalesOrdItemList) throws LException {

        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(newSalesOrd);

        LData       eoCreat                  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveEoCreatYn", newSalesOrd);

        LMultiData  mdfMultiData             = new LMultiData();

        String itemInsYn = "N";
        for(int i=0; i < newSalesOrdItemList.getDataCount(); i++) {
            LData itemData = newSalesOrdItemList.getLData(i);
            itemData.setString("giYn"           , "N"); // GI여부
            itemData.setString("grYn"           , "N"); // GR여부
            itemData.setString("outputPoss"     , "Y"); // 출고수정가능여부
            itemData.setString("transPoss"      , "Y"); // 운송수정가능여부
            itemData.setString("inputPoss"      , "Y"); // 입고수정가능여부
            itemData.setString("fisPoss"        , "Y"); // 국제수정가능여부
            itemData.setString("chkYn"          , "N"); // 아이템단위 변경여부
            itemData.setString("msg"            , "");  // 메시지
            itemData.setString("reasonYn"       , "N"); // 사유존재여부
            itemData.setString("confirmYn"      , "N"); // 오더확정여부
            itemData.setString("confirmMsg"     , "");  // 메시지
            itemData.setString("itemInsYn"      , "N"); // 아이템추가존재여부
            itemData.setString("stockYn"        , "Y"); // 가용재고존재여부
            itemData.setDouble("ordQtyOld"      , 0.0);
            itemData.setDouble("ordWgtOld"      , 0.0);
            itemData.setDouble("ordCbmOld"      , 0.0);
            itemData.setString("qtyUnitCdOld"   , ""); //수량단위코드
            itemData.setString("wgtUnitCdOld"   , ""); //중량단위코드
            itemData.setString("itemCdOld"      , "" ); // 아이템
            itemData.setString("batNoOld"       , "" ); // 배치번호
            itemData.setString("plantCdOld"     , "" ); // 생산처코드
            itemData.setString("pculCdOld"      , "" ); // 특성
            itemData.setString("mnCdOld"        , "" ); // 호기
            itemData.setString("dptArCdOld"     , "" ); // 출발지
            itemData.setString("arvArCdOld"     , "" ); // 도착지
            itemData.setString("aptdReqYmdOld"      , "" ); // 납기요청일자
            itemData.setString("ordVerifyYnOld" , "Y" );// 검증여부
            itemData.setString("dcsnYn"         , "N" );// 확정여부
            itemData.setDouble("palletQtyOld"   , 0.0); // 팔레트수량

            mdfMultiData.addLData(itemData);

            if("Y".equals(itemData.getString("addYn"))) {
                itemInsYn = "Y";
            }

            //LLog.debug.println(itemData);
        }

        // 고객거래선및 공급처 수정여부를 체크한다.
        String headerChkYn = "N";
        LData oldSalesOrd  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdList", newSalesOrd);
        headerChkYn = checkMdfHeaderData(newSalesOrd, oldSalesOrd);

        for(int i=0; i < mdfMultiData.getDataCount(); i++) {
            mdfMultiData.modifyString("itemInsYn", i, itemInsYn);
        }

        // 오더확정여부 체크
        for(int i=0; i < newSalesOrdItemList.getDataCount(); i++) {
            LData cnfrmData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrderConfirmYn", newSalesOrdItemList.getLData(i));
            mdfMultiData.modifyString("confirmYn", i, cnfrmData.getString("confirmYn"));
            if("Y".equals(cnfrmData.getString("tmYn")) && "N".equals(cnfrmData.getString("wmYn"))) {
                mdfMultiData.modifyString("confirmMsg", i, "OTM에서 오더확정이 되었으므로 수정할 수 없습니다.");
            } else if("N".equals(cnfrmData.getString("tmYn")) && "Y".equals(cnfrmData.getString("wmYn"))) {
                mdfMultiData.modifyString("confirmMsg", i, "WM에서 오더확정이 되었으므로 수정할 수 없습니다.");
            } else if("Y".equals(cnfrmData.getString("tmYn")) && "Y".equals(cnfrmData.getString("wmYn"))) {
                mdfMultiData.modifyString("confirmMsg", i, "OTM및WM에서 오더확정이 되었으므로 수정할 수 없습니다.");
            }
        }

        // 물량, 아이템 추가
        for(int i=0; i < newSalesOrdItemList.getDataCount(); i++) {
            String chkYn     = "N";
            String msg       = "";
            String reasonYn  = "N";
            LData newSalesOrdItem = newSalesOrdItemList.getLData(i);
            LData oldSalesOrdItem = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdItemInfo", newSalesOrdItem);

            if(newSalesOrdItem != null && oldSalesOrdItem != null && oldSalesOrdItem.getString("lineNo") != null && !"".equals(oldSalesOrdItem.getString("lineNo"))) {

                double ordQtyOld    = 0.0;
                double ordWgtOld    = 0.0;
                double ordCbmOld    = 0.0;
                double palletQtyOld = 0.0;

                // 분배가 생성되었는지 확인
                if("Y".equals(oldSalesOrdItem.getString("divYn"))) {
                    ordQtyOld = oldSalesOrdItem.getString("ordQty") == null ? 0.0 : Double.parseDouble(oldSalesOrdItem.getString("ordQty"));
                    ordWgtOld = oldSalesOrdItem.getString("ordWgt") == null ? 0.0 : Double.parseDouble(oldSalesOrdItem.getString("ordWgt"));
                    ordCbmOld = oldSalesOrdItem.getString("ordCbm") == null ? 0.0 : Double.parseDouble(oldSalesOrdItem.getString("ordCbm"));
                }

                palletQtyOld = oldSalesOrdItem.getString("palletQty") == null ||
                               "".equals(oldSalesOrdItem.getString("palletQty")) ? 0.0 : Double.parseDouble(oldSalesOrdItem.getString("palletQty"));

                String itemCdOld      = oldSalesOrdItem.getString("itemCd")      == null ? "" : oldSalesOrdItem.getString("itemCd");
                String batNoOld       = oldSalesOrdItem.getString("batNo")       == null ? "" : oldSalesOrdItem.getString("batNo");
                String plantCdOld     = oldSalesOrdItem.getString("plantCd")     == null ? "" : oldSalesOrdItem.getString("plantCd");
                String pculCdOld      = oldSalesOrdItem.getString("pculCd")      == null ? "" : oldSalesOrdItem.getString("pculCd");
                String mnCdOld        = oldSalesOrdItem.getString("mnCd")        == null ? "" : oldSalesOrdItem.getString("mnCd");
                String dptArCdOld     = oldSalesOrdItem.getString("dptArCd")     == null ? "" : oldSalesOrdItem.getString("dptArCd");

                String arvArCdOld     = oldSalesOrdItem.getString("arvArCd")     == null ? "" : oldSalesOrdItem.getString("arvArCd");
                String aptdReqYmdOld      = oldSalesOrdItem.getString("aptdReqYmd")      == null ? "" : oldSalesOrdItem.getString("aptdReqYmd");

                String ordVerifyYnOld = oldSalesOrdItem.getString("ordVerifyYn") == null ? "" : oldSalesOrdItem.getString("ordVerifyYn");
                String qtyUnitCdOld   = oldSalesOrdItem.getString("qtyUnitCd")   == null ? "" : oldSalesOrdItem.getString("qtyUnitCd");
                String wgtUnitCdOld   = oldSalesOrdItem.getString("wgtUnitCd")   == null ? "" : oldSalesOrdItem.getString("wgtUnitCd");

                String ordReasonCdNew = newSalesOrdItem.getString("ordReasonCd") == null ? "" : newSalesOrdItem.getString("ordReasonCd");
                String ordReasonCdOld = oldSalesOrdItem.getString("ordReasonCd") == null ? "" : oldSalesOrdItem.getString("ordReasonCd");

                if(!"".equals(ordReasonCdNew) && !ordReasonCdNew.equals(ordReasonCdOld)) {
                    reasonYn = "Y";
                } else if("".equals(ordReasonCdNew) && !"".equals(ordReasonCdOld)) {
                    mdfMultiData.modifyString("ordReasonCd" , i, ordReasonCdOld); // 수정시 기존 종결코드를 없앨 수 없다.
                }

//              String custCd = oldSalesOrdItem.getString("custCd") == null ? "" : oldSalesOrdItem.getString("custCd");
//              if(custCd!=null && !"".equals(custCd) && custCd.equals(OmConstants.CUST_CO_CD_CB)){
//                  String col01New = newSalesOrdItem.getString("col01") == null ? "" : newSalesOrdItem.getString("col01");
//                  String col01Old = oldSalesOrdItem.getString("col01") == null ? "" : oldSalesOrdItem.getString("col01");
//                  mdfMultiData.modifyString("col01Old"    , i, col01Old);
//              }

                mdfMultiData.modifyDouble("ordQtyOld"       , i, ordQtyOld);
                mdfMultiData.modifyDouble("ordWgtOld"       , i, ordWgtOld);
                mdfMultiData.modifyDouble("ordCbmOld"       , i, ordCbmOld);
                mdfMultiData.modifyString("itemCdOld"       , i, itemCdOld);
                mdfMultiData.modifyString("batNoOld"        , i, batNoOld);
                mdfMultiData.modifyString("plantCdOld"      , i, plantCdOld);
                mdfMultiData.modifyString("pculCdOld"       , i, pculCdOld);
                mdfMultiData.modifyString("mnCdOld"         , i, mnCdOld);
                mdfMultiData.modifyString("dptArCdOld"      , i, dptArCdOld);
                mdfMultiData.modifyString("arvArCdOld"      , i, arvArCdOld);
                mdfMultiData.modifyString("aptdReqYmdOld"       , i, aptdReqYmdOld);
                mdfMultiData.modifyString("ordVerifyYnOld"  , i, ordVerifyYnOld);
                mdfMultiData.modifyString("qtyUnitCdOld"    , i, qtyUnitCdOld);
                mdfMultiData.modifyString("wgtUnitCdOld"    , i, wgtUnitCdOld);
                mdfMultiData.modifyString("dcsnYn"          , i, oldSalesOrdItem.getString("dcsnYn"));
                mdfMultiData.modifyDouble("palletQtyOld"    , i, palletQtyOld);

                // header 변경여부 체크
                if("Y".equals(headerChkYn)) {
                    chkYn = "Y";
                } else {
                    chkYn = checkMdfItemData(newSalesOrdItem, oldSalesOrdItem);
                }
            }

            mdfMultiData.modifyString("chkYn"    , i, chkYn);
            mdfMultiData.modifyString("msg"      , i, msg);
            mdfMultiData.modifyString("reasonYn" , i, reasonYn);
        }

        // 오더아이템 실적생성여부 확인
        for(int i=0; i < newSalesOrdItemList.getDataCount(); i++) {
            LData newSalesOrdItem = newSalesOrdItemList.getLData(i);
            LData ordItemRslt     = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveDomSalesOrdMdfPossYn", newSalesOrdItem);

            mdfMultiData.modifyString("outputPoss", i, ordItemRslt.getString("outputPoss") == null ? "Y" : ordItemRslt.getString("outputPoss"));
            mdfMultiData.modifyString("transPoss" , i, ordItemRslt.getString("transPoss")  == null ? "Y" : ordItemRslt.getString("transPoss"));
            mdfMultiData.modifyString("inputPoss" , i, ordItemRslt.getString("inputPoss")  == null ? "Y" : ordItemRslt.getString("inputPoss"));
            mdfMultiData.modifyString("giYn"      , i, ordItemRslt.getString("giYn")       == null ? "N" : ordItemRslt.getString("giYn"));
            mdfMultiData.modifyString("grYn"      , i, ordItemRslt.getString("grYn")       == null ? "N" : ordItemRslt.getString("grYn"));
        }

        // 수출입 실적생성여부 확인
        if("Y".equals(eoCreat.getString("fisYn"))) {
            if(!newSalesOrd.getString("custCd").equals(OmConstants.CUST_CO_CD_NC)
            && !newSalesOrd.getString("custCd").equals(OmConstants.CUST_CO_CD_HP)
            && !("Y".equals(ART_YN) && newSalesOrd.getString("custCd").equals(OmConstants.CUST_CO_CD_AT))
            ){// 전주페이퍼, 한솔제지인 경우 수정시 FIS 실적 확인하지 않음 2009.07.16, 08.13 cys.
                LData fisRslt = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveSalesOrdFisMdfPossYn", newSalesOrd);
                for(int i=0; i < newSalesOrdItemList.getDataCount(); i++) {
                    mdfMultiData.modifyString("fisPoss", i, fisRslt.getString("fisYn"));
                }
            }
        } else {
            for(int i=0; i < newSalesOrdItemList.getDataCount(); i++) {
                mdfMultiData.modifyString("fisPoss", i, "Y"); //확정이 아닌 것으로 판단 : 수정 가능으로 판단시킴
            }
        }

        //LLog.debug.println(LCollectionUtility.toDebugString(mdfMultiData));
        return mdfMultiData;
    }

    private String checkMdfItemData(LData newItem, LData oldItem) {

        double ordQtyOld        = oldItem.getString("ordQty")      == null ? 0.0 : Double.parseDouble(oldItem.getString("ordQty"));
        double ordWgtOld        = oldItem.getString("ordWgt")      == null ? 0.0 : Double.parseDouble(oldItem.getString("ordWgt"));
        double ordCbmOld        = oldItem.getString("ordCbm")      == null ? 0.0 : Double.parseDouble(oldItem.getString("ordCbm"));
        double admtOld          = oldItem.getString("admt")        == null ? 0.0 : Double.parseDouble(oldItem.getString("admt"));
        double palletQtyOld     = oldItem.getString("palletQty")   == null ? 0.0 : Double.parseDouble(oldItem.getString("palletQty"));
        String itemCdOld        = oldItem.getString("itemCd")      == null ? "" : oldItem.getString("itemCd");
        String batNoOld         = oldItem.getString("batNo")       == null ? "" : oldItem.getString("batNo");
        String plantCdOld       = oldItem.getString("plantCd")     == null ? "" : oldItem.getString("plantCd");
        String pculCdOld        = oldItem.getString("pculCd")      == null ? "" : oldItem.getString("pculCd");
        String mnCdOld          = oldItem.getString("mnCd")        == null ? "" : oldItem.getString("mnCd");
        String dptArCdOld       = oldItem.getString("dptArCd")     == null ? "" : oldItem.getString("dptArCd");
        String arvArCdOld       = oldItem.getString("arvArCd")     == null ? "" : oldItem.getString("arvArCd");
        String itemGradeCdOld   = oldItem.getString("itemGradeCd") == null ? "" : oldItem.getString("itemGradeCd");
        String prdtReqNoOld     = oldItem.getString("prdtReqNo")   == null ? "" : oldItem.getString("prdtReqNo");
        String prdtPrarYmdOld   = oldItem.getString("prdtPrarYmd") == null ? "" : oldItem.getString("prdtPrarYmd");
        String lotNoOld         = oldItem.getString("lotNoCd")     == null ? "" : oldItem.getString("lotNoCd");
        String aptdReqYmdOld    = oldItem.getString("aptdReqYmd")  == null ? "" : oldItem.getString("aptdReqYmd");
        String aptdReqHmOld     = oldItem.getString("aptdReqHm")   == null ? "" : oldItem.getString("aptdReqHm");
        String delYnOld         = oldItem.getString("delYn")       == null ? "" : oldItem.getString("delYn");
        String qtyUnitCdOld     = oldItem.getString("qtyUnitCd")   == null ? "" : oldItem.getString("qtyUnitCd");
        String wgtUnitCdOld     = oldItem.getString("wgtUnitCd")   == null ? "" : oldItem.getString("wgtUnitCd");
        String ordVerifyYnOld   = oldItem.getString("ordVerifyYn") == null ? "" : oldItem.getString("ordVerifyYn");
        String rmkOld           = oldItem.getString("rmk")         == null ? "" : oldItem.getString("rmk");

        double ordQtyNew        = newItem.getString("ordQty")      == null ? 0.0 : Double.parseDouble(newItem.getString("ordQty"));
        double ordWgtNew        = newItem.getString("ordWgt")      == null ? 0.0 : Double.parseDouble(newItem.getString("ordWgt"));
        double ordCbmNew        = newItem.getString("ordCbm")      == null ? 0.0 : Double.parseDouble(newItem.getString("ordCbm"));
        double admtNew          = newItem.getString("admt")        == null ? 0.0 : Double.parseDouble(newItem.getString("admt"));
        double palletQtyNew     = newItem.getString("palletQty")   == null ? 0.0 : Double.parseDouble(newItem.getString("palletQty"));
        String itemCdNew        = newItem.getString("itemCd")      == null ? "" : newItem.getString("itemCd");
        String batNoNew         = newItem.getString("batNo")       == null ? "" : newItem.getString("batNo");
        String plantCdNew       = newItem.getString("plantCd")     == null ? "" : newItem.getString("plantCd");
        String pculCdNew        = newItem.getString("pculCd")      == null ? "" : newItem.getString("pculCd");
        String mnCdNew          = newItem.getString("mnCd")        == null ? "" : newItem.getString("mnCd");
        String dptArCdNew       = newItem.getString("dptArCd")     == null ? "" : newItem.getString("dptArCd");
        String arvArCdNew       = newItem.getString("arvArCd")     == null ? "" : newItem.getString("arvArCd");
        String itemGradeCdNew   = newItem.getString("itemGradeCd") == null ? "" : newItem.getString("itemGradeCd");
        String prdtReqNoNew     = newItem.getString("prdtReqNo")   == null ? "" : newItem.getString("prdtReqNo");
        String prdtPrarYmdNew   = newItem.getString("prdtPrarYmd") == null ? "" : newItem.getString("prdtPrarYmd");
        String lotNoNew         = newItem.getString("lotNoCd")     == null ? "" : newItem.getString("lotNoCd");
        String aptdReqYmdNew    = newItem.getString("aptdReqYmd")  == null ? "" : newItem.getString("aptdReqYmd");
        String aptdReqHmNew     = newItem.getString("aptdReqHm")   == null ? "" : newItem.getString("aptdReqHm");
        String delYnNew         = newItem.getString("delYn")       == null ? "" : newItem.getString("delYn");
        String qtyUnitCdNew     = newItem.getString("qtyUnitCd")   == null ? "" : newItem.getString("qtyUnitCd");
        String wgtUnitCdNew     = newItem.getString("wgtUnitCd")   == null ? "" : newItem.getString("wgtUnitCd");
        String ordVerifyYnNew   = newItem.getString("ordVerifyYn") == null ? "" : newItem.getString("ordVerifyYn");
        String rmkNew           = newItem.getString("rmk")         == null ? "" : newItem.getString("rmk");


        // 커피빈일 경우 유통기한이 변경되었을때 작업경로 새로 만들어준다.
        String custCd = oldItem.getString("custCd") == null ? "" : oldItem.getString("custCd");
        if(custCd!=null && !"".equals(custCd) && custCd.equals(OmConstants.CUST_CO_CD_CB)){
            String col01New = newItem.getString("col01") == null ? "" : newItem.getString("col01");
            String col01Old = oldItem.getString("col01") == null ? "" : oldItem.getString("col01");
            if(!col01Old.equals(col01New))      return "Y";

//          LLog.debug.println("******oldItem "+oldItem );
//          LLog.debug.println("******newItem "+newItem );
        }

        if(ordQtyOld    != ordQtyNew)               return "Y";
        if(ordWgtOld    != ordWgtNew)               return "Y";
        if(ordCbmOld    != ordCbmNew)               return "Y";
        if(admtOld      != admtNew  )               return "Y";
        if(palletQtyOld != palletQtyNew)            return "Y";

        if(!itemCdOld.equals(itemCdNew))            return "Y";
        if(!batNoOld.equals(batNoNew))              return "Y";
        if(!plantCdOld.equals(plantCdNew))          return "Y";
        if(!pculCdOld.equals(pculCdNew))            return "Y";
        if(!mnCdOld.equals(mnCdNew))                return "Y";
        if(!dptArCdOld.equals(dptArCdNew))          return "Y";
        if(!arvArCdOld.equals(arvArCdNew))          return "Y";
        if(!itemGradeCdOld.equals(itemGradeCdNew))  return "Y";
        if(!prdtReqNoOld.equals(prdtReqNoNew))      return "Y";
        if(!prdtPrarYmdOld.equals(prdtPrarYmdNew))  return "Y";
        if(!lotNoOld.equals(lotNoNew))              return "Y";
        if(!aptdReqYmdOld.equals(aptdReqYmdNew))    return "Y";
        if(!aptdReqHmOld.equals(aptdReqHmNew))      return "Y";
        if(!delYnOld.equals(delYnNew))              return "Y";
        if(!qtyUnitCdOld.equals(qtyUnitCdNew))      return "Y";
        if(!wgtUnitCdOld.equals(wgtUnitCdNew))      return "Y";
        if(!ordVerifyYnOld.equals(ordVerifyYnNew))  return "Y";
        if(!rmkOld.equals(rmkNew))                  return "Y";

        return "N";
    }

    private String checkMdfHeaderData(LData newOrd, LData oldOrd) {

        String custOfCustCdOld  = oldOrd.getString("custOfCustCd") == null ? "" : oldOrd.getString("custOfCustCd");
        String supPlCdOld       = oldOrd.getString("supPlCd")      == null ? "" : oldOrd.getString("supPlCd");

        String custOfCustCdNew  = newOrd.getString("custOfCustCd") == null ? "" : newOrd.getString("custOfCustCd");
        String supPlCdNew       = newOrd.getString("supPlCd")      == null ? "" : newOrd.getString("supPlCd");

        if(!custOfCustCdOld.equals(custOfCustCdNew))    return "Y";
        if(!supPlCdOld.equals(supPlCdNew))              return "Y";

        String aptdReqYmdOld    = oldOrd.getString("aptdReqYmd") == null ? "" : oldOrd.getString("aptdReqYmd");
        String arvArCdOld       = oldOrd.getString("arvArCd")      == null ? "" : oldOrd.getString("arvArCd");

        String aptdReqYmdNew  = newOrd.getString("aptdReqYmd") == null ? "" : newOrd.getString("aptdReqYmd");
        String arvArCdNew       = newOrd.getString("arvArCd")      == null ? "" : newOrd.getString("arvArCd");

        if(!aptdReqYmdOld.equals(aptdReqYmdNew))    return "Y";
        if(!arvArCdOld.equals(arvArCdNew))              return "Y";


        String arvArZipCdOld  = oldOrd.getString("arvArZipCd")     == null ? "" : oldOrd.getString("arvArZipCd");
        String arvArZipCdNew  = newOrd.getString("arvArZipCd")     == null ? "" : newOrd.getString("arvArZipCd");

        if(!arvArZipCdOld.equals(arvArZipCdNew))                return "Y";

        if(newOrd.getString("custCd").equals(OmConstants.CUST_CO_CD_NC)){
            String col10Old   = oldOrd.getString("col10")   == null ? "" : oldOrd.getString("col10"); // 원발주처 비교
            String col10New   = newOrd.getString("col10")   == null ? "" : newOrd.getString("col10");
            if(!col10Old.equals(col10New))              return "Y";
        }

        //페이퍼텍 여신초과 여부 업데이트 2014-09-30
        if(newOrd.getString("custCd").equals("P1927")){
            String col18Old   = oldOrd.getString("col18")   == null ? "" : oldOrd.getString("col18"); // 여신촤과 비교
            String col18New   = newOrd.getString("col18")   == null ? "" : newOrd.getString("col18");
            if(!col18Old.equals(col18New))              return "Y";
        }        
        
        return "N";
    }

    /** 수정보류 판매오더 상세조회 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData retrieveMdfDlySalesOrdDtl(LData inputData) throws LException {

        try{
            // 오더접근권한 체크
            retrieveOrdAccessAuth(inputData);

            LCommonDao dao = new LCommonDao();
            LMultiData dataHolder = new LMultiData();

            LMultiData result       = dao.executeQuery("select/om/om02/salesOrd/retrieveMdfDlyCheck", inputData);
            LMultiData dlyData      = (LMultiData)result.get("OBJECT_TO_GDRs", 0);

            int maxChgSeq   = dlyData.getInt("maxChgSeq", 0);
            int dlyChgSeq   = dlyData.getInt("dlyChgSeq", 0);
            int dlyChgcnt   = dlyData.getInt("dlyChgCnt", 0);
            int mdfChgSeq   = dlyData.getInt("mdfChgSeq", 0);

            if( maxChgSeq == 0) {
                throw new LBizException("존재하지 않는 오더번호입니다.");
            }
            else if( dlyChgcnt == 0) {
                throw new LBizException("수정보류가 발생된 오더번호가 아닙니다.");
            }
            else if( dlyChgSeq != maxChgSeq) {
                throw new LBizException("이미 자동으로 신규 수정이 반영된 상태이므로 수정처리할 수 없습니다.");
            }
            else if( mdfChgSeq != maxChgSeq) {
                throw new LBizException("이미 반영된 상태이므로 수정처리할 수 없습니다.");
            }

            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceHist", inputData));
            dataHolder.add("IN_DS3", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtItemList", inputData));
            dataHolder.add("IN_DS4", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceItemHist", inputData));
            dataHolder.add("IN_DS5", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdPrclTitle", inputData));
            dataHolder.add("IN_DS6", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtItemPrclTitle", inputData));
            return dataHolder;

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveMdfDlySalesOrdDtl()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }

    /** 수정보류 판매오더 수정반영 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData applyMdfDlySalesOrdDtl(LMultiData inputData) throws LException {
        LMultiData header   = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData item     = (LMultiData)inputData.get("IN_DS2",0 );
        LData input         = (LData)inputData.get("INPUT", 0);
        try{

            LCompoundDao comDao = new LCompoundDao();
            comDao.setInsertQuery("cud/om/tb_om02011h/updateSalesOrdHistory");
            comDao.addWithJobType(header);
            comDao.setUpdateQuery("cud/om/tb_om02012h/updateSalesOrdItemHistory");
            comDao.addWithJobType(item);
            comDao.executeUpdate();

            laf.application.dao.LCommonDao dao2 = new laf.application.dao.LCommonDao();
            LData salesOrd              = dao2.executeQueryForSingle("select/om/om02/salesOrd/retrieveMdfDlySalesOrdHistory", input);
            LData salesOrdPrcl          = dao2.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdPrclHistory"  , salesOrd);
            LMultiData salesOrdItem     = dao2.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemHistory"           , salesOrd);
            LMultiData salesOrdItemPrcl = dao2.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemPrclHistory"       , salesOrd);

            LMultiData dataHolder1 = new LMultiData();
            dataHolder1.add("salesOrd"          , salesOrd);
            dataHolder1.add("salesOrdPrcl"      , salesOrdPrcl);
            dataHolder1.add("salesOrdItemPrcl"  , salesOrdItemPrcl);

            LMultiData salesOrdItem1 = new LMultiData();
            LData      temp          = null;
            if(salesOrdItem != null && salesOrdItem.getDataCount() > 0) {
                for(int i=0; i < salesOrdItem.getDataCount(); i++) {
                    temp = new LData();
                    Set itemSet = salesOrdItem.getLData(i).keySet();
                    Iterator itemIte = itemSet.iterator();
                    while(itemIte.hasNext()){
                        String dataKey = itemIte.next().toString();
                        if(dataKey != null) {
                            if(dataKey.equals("ordQty") || dataKey.equals("ordWgt") ||
                               dataKey.equals("ordCbm") || dataKey.equals("admt") ) {
                                temp.setDouble(dataKey, Double.parseDouble(salesOrdItem.getString(dataKey, i)));
                            } else {
                                temp.setString(dataKey, salesOrdItem.getString(dataKey, i));
                            }
                        }
                    }
                    salesOrdItem1.addLData(temp);
                }
            }
            dataHolder1.add("salesOrdItem"      , salesOrdItem1);

            dataHolder1.add("salesOrdFis"       , null);
            dataHolder1.add("booking"           , null);

            LData param = new LData();
            param.setString("regrId"            , input.getString("regrId"));
            param.setString("mdfrId"            , input.getString("mdfrId"));
            dataHolder1.add("INPUT"             , param);

            LData paramData = new LData();
            paramData.setString("domMdfProcYn", "N");
            paramData.setString("mdfDlyProcYn", "Y");

            updateSalesOrd(dataHolder1, paramData);

            return null;

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "applyMdfDlySalesOrdDtl()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

    }

    /** 수정보류 판매오더 수정거부 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData rejectMdfDlySalesOrdDtl(LData inputData) throws LException {

        try{
            laf.application.dao.LCompoundDao dao2 = new laf.application.dao.LCompoundDao();
            inputData.setString("mdfDlySctnCd", "03");
            dao2.add("cud/om/tb_om02011h/updateTbOm02011h", inputData);
            dao2.executeUpdate();

            return null;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "rejectMdfDlySalesOrdDtl()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

    }

    /** [판매오더생성]고객오더에의한 판매오더 생성하는 메소드.
     *  @param 고객오더, 고객오더아이템리스트
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LData createSalesOrd(LData inputData, LMultiData multi) throws LException{
//        LCommonDao dao = new LCommonDao();

        LData retVal = new LData();
        retVal.setString("result", "S");
        retVal.setString("message", "");
        retVal.setString("salesOrdNo", "");
        //String custCd = inputData.getString("custCd");
//        String custOrdTypeCd = inputData.getString("custOrdTypeCd");
        LData salesOrd = null;
        LMultiData salesOrdItem = null;
        laf.application.dao.LCompoundDao compoundDao = CompDaoUtil.getTransaction(inputData);


        // CO의 종류가 ImportBL이면 판매오더를 생성하지 않는다. 헤더ADMT와 아이템총ADMT의 합 일치여부만 체크.

        try{
            String ifId = inputData.getString("ifId");
            if(ifId.equals("IF_HPP_OM_ImportBL")
                    || ifId.equals("IF_HHP_OM_ImportBL")
                    || ifId.equals("IF_NSK_OM_ImportOrder")){

                String itemAdmtCol = "col02";
                if(ifId.equals("IF_HHP_OM_ImportBL")) itemAdmtCol = "ordWgt";
                double itemAdmt = 0;
                for(int i=0;i<multi.getDataCount();i++){
                    itemAdmt += Double.parseDouble(multi.getString(itemAdmtCol, i));
                }
                if(Double.parseDouble(inputData.getString("admt")) != itemAdmt){
                    retVal.setString("result", "E");
                    retVal.setString("message", "헤더 ADMT와 아이템 ADMT가 일치하지 않음");
                    throw new LBizException("헤더 ADMT와 아이템 ADMT가 일치하지 않음");
                }

                return retVal;
            }

            /* 판매오더매핑조회 call( 고객오더헤더정보, 고객오더아이템리스트)
             * return : 판매오더헤더정보, 판매오더아이템리스트
             * */

            //LLog.debug.println("salesOrd 시작************ ");

            ICustCdMpng pbc     = (ICustCdMpng) PbcUtil.getPbc(ICustCdMpng.class);
            LMultiData result   = pbc.retrieveSalesOrdMpng(inputData, multi);

            //LLog.debug.println("salesOrd 시작  result*********** "+result);
//          int cnt = result.getDataCount();
            //if(result == null || result.getDataCount() < 2){
            //    retVal.setString("result", "E");
            //    retVal.setString("message", "판매오더매핑조회 call오류");
            //    return retVal;
            //}

            salesOrd            = (LData)result.getLData("so",          0);
            salesOrdItem        = (LMultiData)result.get("soMulti",     0);

//          LLog.debug.println("salesOrd ************* : "+salesOrd);
//          LLog.debug.println("salesOrdItem ************* : "+salesOrdItem);

            /* 1. 법인코드 세팅
               'HCSN' */
            String corpCd = getCorpCd(salesOrd);
            salesOrd.setString("corpCd", corpCd);

//          salesOrd.setString("corpCd", OmConstants.COMMON_CORP_CD);

            /* 2. 공통 필수항목 체크
               헤더: 오더유형코드(checker), 고객오더번호, 계약고객코드(checker,파트너)
               아이템: 고객오더라인번호, 고객코드(대표고객코드), 아이템코드(checker)
               -> 공통 필수항목이 없으면 오류 발생*/
            LData tempData = new LData();
            IChecker ordTypeChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 8);
            tempData.setString("ordTypeCd", salesOrd.getString("ordTypeCd"));
//          LLog.debug.println("tempData ************* : "+tempData);

            if(!ordTypeChecker.isExist(tempData)) {
                retVal.setString("result", "E");
                retVal.setString("message", "존재하지 않는 오더유형코드:"+salesOrd.getString("ordTypeCd"));
                //return retVal;
                throw new LBizException("존재하지 않는 오더유형코드:"+salesOrd.getString("ordTypeCd"));
            }

            if(salesOrd.getString("custOrdNo") == null || salesOrd.getString("custOrdNo").equals("")){
                retVal.setString("result", "E");
                retVal.setString("message", "고객오더번호 누락");
                throw new LBizException("고객오더번호 누락");
            }

            IChecker ptnCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 3);
            tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));
            if(!ptnCdChecker.isExist(tempData)) {
                retVal.setString("result", "E");
                retVal.setString("message", "존재하지 않는 계약고객코드:" + salesOrd.getString("ctrtCustCd"));
                throw new LBizException("존재하지 않는 계약고객코드:"+salesOrd.getString("ctrtCustCd"));
            }

            if(salesOrd.getString("custOfCustCd") != null && !"".equals(salesOrd.getString("custOfCustCd"))){
                LData custOfcustCdChkParam = new LData();
                laf.application.dao.LCompoundDao custOfcustCdChkDao = new laf.application.dao.LCompoundDao();
                custOfcustCdChkParam.setString("ptnCd"     , salesOrd.getString("rptCustCd"));
                custOfcustCdChkParam.setString("custPtnCd", salesOrd.getString("custOfCustCd"));
                LData ptnCd = custOfcustCdChkDao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveChkCustPtnExistYn", custOfcustCdChkParam);

                // 전주페이퍼 수출인 경우 고객거래선을 둘째자리부터 조회하도록 수정 : 전주에서 내려줄때 수출 내수 구분을 모르고 전송하기때문
                if(salesOrd.getString("rptCustCd").equals("P1100") && salesOrd.getString("ifId").equals("IF_NSK_OM_ExportOrder")){
                    ptnCd = custOfcustCdChkDao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveChkCustPtnNskExistYn", custOfcustCdChkParam);
                }

                if(ptnCd == null || ptnCd.getString("ptnCd") == null || ptnCd.getString("ptnCd").equals("")){
                    retVal.setString("result", "E");
                    retVal.setString("message", "존재하지 않는 고객거래선코드:" + salesOrd.getString("custOfCustCd"));
                    throw new LBizException("존재하지 않는 고객거래선코드:"+salesOrd.getString("custOfCustCd"));
                }
            }

            /* 3. 오더유형 속성 조회
               수출입내수구분, 물류서비스구분, 가용재고확인여부(계약고객속성도 고려해서 함께 조회함),
               긴급관리여부
             수출입내수구분 ->값세팅
            */
            laf.application.dao.LCompoundDao dao1 = new laf.application.dao.LCompoundDao();
            LData ordTypeData   = dao1.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSalesOrd", salesOrd);
            tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));

            LData ptnMasterData             = dao1.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnInfoDtlSalesOrd", tempData);
            String availStockConfYn         = ordTypeData.getString("availStockConfYn"); //가용재고확인여부
            String masterAvailStockConfYn   = ptnMasterData.getString("availStockConfYn") == null ? "N" : ptnMasterData.getString("availStockConfYn");//가용재고확인여부 파트너마스터
            String logisSvcSctnCd           = ordTypeData.getString("logisSvcSctnCd");//물류서비스구분
            String expImpDomSctnCd          = ordTypeData.getString("expImpDomSctnCd");//수출입내수구분
            String exprMngtYn               = ordTypeData.getString("exprMngtYn");//긴급관리여부
            salesOrd.setString("expImpDomSctnCd", expImpDomSctnCd);
            String logisArCd = ordTypeData.getString("logisArCd"); //물류지역구분

            String cargoFormCd = salesOrd.getString("cargoFormCd");

            if(OmConstants.EXP_IMP_EXPORT.equals(expImpDomSctnCd) && !(OmConstants.CARGO_FORM_BULK.equals(cargoFormCd) || OmConstants.CARGO_FORM_CONTAINER.equals(cargoFormCd)) ) {
                retVal.setString("result", "E");
                retVal.setString("message", "화물형태 누락");
                throw new LBizException("화물형태 누락");
            }

            LLog.debug.println("*******salesOrdItem : "+salesOrdItem);

            IChecker itemCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 5);
            for(int i = 0;i<salesOrdItem.getDataCount();i++){
                if(salesOrdItem.getString("custOrdLineNo", i) == null || salesOrdItem.getString("custOrdLineNo", i).equals("")){
                    retVal.setString("result", "E");
                    retVal.setString("message", "고객오더라인번호 누락");
                    throw new LBizException("고객오더라인번호 누락");
                }
                tempData.setString("ptnCd", salesOrdItem.getString("custCd",i));
                tempData.setString("itemCd", salesOrdItem.getString("itemCd",i));
                if(!itemCdChecker.isExist(tempData)) {
                    retVal.setString("result", "E");
                    retVal.setString("message", "존재하지 않는 아이템코드:" + salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
                    throw new LBizException("존재하지 않는 아이템코드:"+ salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
                }

//              // (제지 or 전주페이퍼) and (not(수입)) and (기본단위코드==수량) and (newWgt == null or netWgt == 0) 이면 접수오류
//              if(OmConstants.CUST_CO_CD_HP.equals(salesOrd.getString("rptCustCd")) || OmConstants.CUST_CO_CD_NC.equals(salesOrd.getString("rptCustCd")) ) {
//                  if(!OmConstants.EXP_IMP_INCOME.equals(salesOrd.getString("expImpDomSctnCd"))) {
//                      LData tmpData = new LData();
//                      tmpData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                      tmpData.setString("itemCd", salesOrdItem.getString("itemCd", i));
//                      LData itemMasterData = compoundDao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfoSalesOrd", tmpData);
//                      if(itemMasterData != null && itemMasterData.getString("basisUnitCd") != null && !itemMasterData.getString("basisUnitCd").equals("")) {
//                          LData commCode = new LData();
//                          commCode.setString("kind", "BASIC_UNIT_CD");
//                          commCode.setString("code", itemMasterData.getString("basisUnitCd"));
//                          LData basisUnit = compoundDao.executeQueryForSingle("select/pbf/comm/srch/retrievePopupCodeSet", commCode);
//                          String basisUnitKind = basisUnit.getString("fltrConts1");
//                          if(OmConstants.BASIC_ATTR_QTY.equals(basisUnitKind)) {
//
//                              if(itemMasterData != null && itemMasterData.getString("netWgt") == null || Double.parseDouble(itemMasterData.getString("netWgt")) == 0) {
//                                  retVal.setString("result", "E");
//                                  retVal.setString("message", "순중량이 존재하지 않는 아이템코드:" + salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
//                                  throw new LBizException("순중량이 존재하지 않는 아이템코드:"+ salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
//                              }
//                          }
//                      }
//                  }
//              }

//              if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP) && salesOrd.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_EXPORT)){
//                  //한솔제지 수출오더만 예외
//
//              }
//              else if(salesOrdItem.getDouble("ordQty", i) <= 0 && salesOrdItem.getDouble("ordWgt", i) <= 0
//                      && salesOrdItem.getDouble("ordCbm", i) <= 0 && salesOrdItem.getDouble("admt", i) <= 0){
//                  retVal.setString("result", "E");
//                  retVal.setString("message", "오더량 누락:" + "라인" +salesOrdItem.getString("custOrdLineNo", i));
//                  throw new LBizException("오더량 누락:" + "라인" +salesOrdItem.getString("custOrdLineNo", i));
//              }
            }

            /* 4. 작업정보관리유형코드 결정
               인터페이스ID 별로 결정됨

               IF_HPP_SalesOrder, IF_HPP_PO, IF_HPP_TransferOrder, IF_HPP_STOReq,
               IF_HPP_ExportOrder,IF_HHP_SalesOrder, IF_HHP_OM_TransferOrder, IF_HHP_PO
               --> 아이템별 '02'

               기타 case --> '01'
            */

            if(ifId.equals("IF_HPP_OM_SalesOrder")
                || ifId.equals("IF_HPP_OM_PO")
                || ifId.equals("IF_HPP_OM_TransferOrder")
                || ifId.equals("IF_HPP_OM_STOReq")
                || ifId.equals("IF_HPP_OM_ExportOrder")
                || ifId.equals("IF_HHP_OM_SalesOrder")
                || ifId.equals("IF_HHP_OM_TransferOrder")
                || ifId.equals("IF_PPG_OM_Order")
                || ifId.equals("IF_HHP_OM_PO")
                || ifId.equals("IF_HPL_OM_SalesOrder")
                ){
                salesOrd.setString("workInfoMngtTypeCd","02");
            }else salesOrd.setString("workInfoMngtTypeCd","01");

            /* 5.물류서비스구분별 필수항목 체크 및 validation
               출발지, 도착지코드, 작업장코드를 마스터에서 조회.
               마스터에 없는 코드이면 오류

               case : 입고 01
                 필수: 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 운송 03
                 필수: 출발지코드, 도착지코드, 납기요청일자

               case : 운송입고 05
                 필수: 출발지코드, 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 출고 02
                 필수: 출발지코드, 납기요청일자
                 출발지 종류가 '센터'가 아니면 오류

               case : 출고운송 04
                 필수: 출발지코드, 도착지코드, 납기요청일자
                 출발지 종류가 '센터'가 아니면 오류

               case : 출고운송입고 06
                 필수: 출발지코드, 도착지코드, 납기요청일자
                 출발지,도착지 종류가 '센터'가 아니면 오류

               case : 항만하역 07
                 필수: 작업장코드, 선박명, 항차

               case : 항만하역입고 08
                 필수: 작업장코드, 도착지코드, 선박명, 항차
                 도착지 종류가 '센터'가 아니면 오류

               case : 운송항만하역 13
                 필수: 출발지코드, 도착지코드, 납기요청일자, 작업장코드, 선박명, 항차

               case : 출고운송항만하역 14
                 필수: 출발지코드, 도착지코드, 납기요청일자, 작업장코드, 선박명, 항차
                 출발지 종류가 '센터'가 아니면 오류

               case : 항만하역입고출고운송 09
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
                 출발지 종류가 '센터'가 아니면 오류

               case : 항만하역입고출고운송입고 10
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
                 출발지,도착지 종류가 '센터'가 아니면 오류

               case : 항만하역운송 11
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자

               case : 항만하역운송입고 12
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 포워딩 15
                 필수: 해상항공구분코드

               case : 포워딩운송 20
                 필수: 해상항공구분코드, 출발지코드, 도착지코드, 납기요청일자

               case : 포워딩운송입고 21
                 필수: 해상항공구분코드, 출발지코드, 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 운송포워딩 16
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드

               case : 출고운송포워딩 17
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
                 출발지 종류가 '센터'가 아니면 오류

               case : 운송포워딩입고 18
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
                 도착지 종류가 '센터'가 아니면 오류

               case : 출고운송포워딩입고 19
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
                 출발지,도착지 종류가 '센터'가 아니면 오류
             */

            //String logisSvcSctnCd = inputData.getString("logisSvcSctnCd")== null ? "0" : inputData.getString("logisSvcSctnCd");
            String workPlCd = salesOrd.getString("workPlCd"); //작업장코드
            if(workPlCd != null && !workPlCd.equals("")){
                IChecker workPlCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 7);
                tempData.setString("corpCd", salesOrd.getString("corpCd"));
                tempData.setString("workPlCd", workPlCd);
                if(!workPlCdChecker.isExist(tempData)) workPlCd = "";
            }

            // 사용 안함 START  -- retrievePtnWorkPlCdCheck 도 잘못 되어 있음 : 파악 필요
            if(!workPlCd.equals("")){
                tempData.setString("corpCd", salesOrd.getString("corpCd"));
                tempData.setString("workPlCd", workPlCd);
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                LData workPlCdData = dao1.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrievePtnWorkPlCdCheck", tempData);
                if(workPlCdData == null || workPlCdData.isEmpty() || !workPlCdData.getString("workPlCd").equals(workPlCd))
                        throw new LBizException("고객에 속한 작업장이 아님:"+ workPlCd);
            }
            // 사용안함 END

            String shipNm = salesOrd.getString("shipNm")== null ? "" : salesOrd.getString("shipNm");//선박명
            String portCnt = salesOrd.getString("portCnt")== null ? "" : salesOrd.getString("portCnt");//항차
            String oceanAirSctnCd = salesOrd.getString("oceanAirSctnCd")== null ? "" : salesOrd.getString("oceanAirSctnCd");//해상항공구분코드
            String dptArKind = ""; //출발지 종류
            String arvArKind = ""; //도착지종류
            String dptArDept = ""; //출발지작업장 부서
            String arvArDept = ""; //도착지작업장 부서
            String dptArCd = ""; //출발지코드
            String arvArCd = ""; //도착지코드
            String aptdReqYmd = ""; //납기요청일자
            String arvWmYn = "N";
            String dptWmYn = "N";
            LData dptArCdData = null;
            LData arvArCdData = null;
            String workInfoMngtTypeCd = salesOrd.getString("workInfoMngtTypeCd");
            String custOrdLineNo = "";

            LMultiData loopData = new LMultiData();
            if(workInfoMngtTypeCd.equals("01")){
                loopData.addLData(salesOrd);
                for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    custOrdLineNo = ":라인" +salesOrdItem.getString("custOrdLineNo", i);
                    dptArCd = salesOrdItem.getString("dptArCd",i) == null ? "" : salesOrdItem.getString("dptArCd",i); //출발지코드
                    arvArCd = salesOrdItem.getString("arvArCd",i) == null ? "" : salesOrdItem.getString("arvArCd",i); //도착지코드
                    aptdReqYmd = salesOrdItem.getString("aptdReqYmd",i) == null ? "" : salesOrdItem.getString("aptdReqYmd",i); //납기요청일자
                    tempData.setString("code", dptArCd);
                    tempData.setString("workSctnCd", salesOrdItem.getString("dptArTypeCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    dptArCdData = dao1.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
                    tempData.setString("code", arvArCd);
                    // 지류유통 조건 추가 2012-12-04
                    //if( OmConstants.HPL_USE_YN.equals("Y") && "IF_HPL_OM_CutOrder".equals(salesOrd.getString("ifId"))
                    //  && "ZDS".equals(salesOrd.getString("custOrdTypeCd")) )
                    //    tempData.setString("workSctnCd", salesOrdItem.getString("dptArTypeCd",i));
                    //else
                    //  tempData.setString("workSctnCd", salesOrdItem.getString("arvArTypeCd",i));
                    tempData.setString("workSctnCd", salesOrdItem.getString("arvArTypeCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    arvArCdData = dao1.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);

                    if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
                        dptArKind = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
                        dptArCd = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
                        dptArDept = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
                        dptWmYn = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");
                    }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {
                        retVal.setString("message", "존재하지않는출발지코드" + dptArCd+":"+custOrdLineNo);
                        throw new LBizException("존재하지않는출발지코드"+ dptArCd+":"+custOrdLineNo);
                    }
                    if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
                        arvArKind = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
                        arvArCd = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
                        arvArDept = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
                        arvWmYn = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");
                    }else{
                        retVal.setString("message", "존재하지않는도착지코드" + arvArCd+":"+custOrdLineNo);
                        throw new LBizException("존재하지않는도착지코드"+ arvArCd+":"+custOrdLineNo);
                    }

                    if(salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                        if(salesOrdItem.getString("arvArZipCd",i).equals("")
                        && salesOrdItem.getString("arvArZipAddr",i).equals("")
                        && salesOrdItem.getString("arvArDtlAddr",i).equals("") ){
                                salesOrdItem.modifyString("arvArZipCd", i, arvArCdData.getString("centerZipCd"));
                                salesOrdItem.modifyString("arvArZipAddr", i, arvArCdData.getString("centerZipAddr"));
                                salesOrdItem.modifyString("arvArDtlAddr", i, arvArCdData.getString("centerDtlAddr"));
                        }
                    }
                    if(salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){

                        if(salesOrdItem.getString("dptArZipCd",i).equals("")
                        && salesOrdItem.getString("dptArZipAddr",i).equals("")
                        && salesOrdItem.getString("dptArDtlAddr",i).equals("") ){
                                salesOrdItem.modifyString("dptArZipCd", i, dptArCdData.getString("centerZipCd"));
                                salesOrdItem.modifyString("dptArZipAddr", i, dptArCdData.getString("centerZipAddr"));
                                salesOrdItem.modifyString("dptArDtlAddr", i, dptArCdData.getString("centerDtlAddr"));

                        }
                    }
                }
            }else{
                for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    loopData.addLData(salesOrdItem.getLData(i));
                }

                    dptArCd = salesOrd.getString("dptArCd") == null ? "" : salesOrd.getString("dptArCd"); //출발지코드
                    arvArCd = salesOrd.getString("arvArCd") == null ? "" : salesOrd.getString("arvArCd"); //도착지코드
                    aptdReqYmd = salesOrd.getString("aptdReqYmd") == null ? "" : salesOrd.getString("aptdReqYmd"); //납기요청일자
                    tempData.setString("code", dptArCd);
                    tempData.setString("workSctnCd", salesOrd.getString("dptArTypeCd"));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    dptArCdData = dao1.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
                    tempData.setString("code", arvArCd);
                    tempData.setString("workSctnCd", salesOrd.getString("arvArTypeCd"));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    arvArCdData = dao1.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);

                    if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
                        dptArKind = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
                        dptArCd = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
                        dptArDept = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
                        dptWmYn = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");
                    }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {

                        if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)){
                            retVal.setString("message", "[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는출발지코드" + dptArCd);
                            throw new LBizException("[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는출발지코드"+ dptArCd);
                        }else{
                            retVal.setString("message", "존재하지않는출발지코드" + dptArCd);
                            throw new LBizException("존재하지않는출발지코드"+ dptArCd);
                        }
                    }

                    if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
                        arvArKind = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
                        arvArCd = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
                        arvArDept = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
                        arvWmYn = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");
                    }else{
                        if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)){
                            retVal.setString("message", "[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는도착지코드" + arvArCd);
                            throw new LBizException("[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는도착지코드"+ arvArCd);
                        }else{
                            retVal.setString("message", "존재하지않는도착지코드" + arvArCd);
                            throw new LBizException("존재하지않는도착지코드"+ arvArCd);
                        }
                    }

                    if(salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                        if(salesOrd.getString("arvArZipCd").equals("")
                        && salesOrd.getString("arvArZipAddr").equals("")
                        && salesOrd.getString("arvArDtlAddr").equals("") ){
                            salesOrd.setString("arvArZipCd", arvArCdData.getString("centerZipCd"));
                            salesOrd.setString("arvArZipAddr", arvArCdData.getString("centerZipAddr"));
                            salesOrd.setString("arvArDtlAddr", arvArCdData.getString("centerDtlAddr"));
                        }else if(salesOrd.getString("arvArZipCd").equals("")
                        && !salesOrd.getString("arvArZipAddr").equals("")
                        && !salesOrd.getString("arvArDtlAddr").equals("") ){
                            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                                || ("Y".equals(ART_YN) && salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                                    ){
                                if("1024".equals(salesOrd.getString("ordTypeCd"))
                                || "1026".equals(salesOrd.getString("ordTypeCd"))){
                                    throw new LBizException("해당도착지코드에 대해 우편번호 존재하지 않음"+ arvArCd);
                                }
                            }
                        }
                    }
                    if(salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){

                        if(salesOrd.getString("dptArZipCd").equals("")
                        && salesOrd.getString("dptArZipAddr").equals("")
                        && salesOrd.getString("dptArDtlAddr").equals("") ){
                            salesOrd.setString("dptArZipCd", dptArCdData.getString("centerZipCd"));
                            salesOrd.setString("dptArZipAddr", dptArCdData.getString("centerZipAddr"));
                            salesOrd.setString("dptArDtlAddr", dptArCdData.getString("centerDtlAddr"));

                        }
                    }
            }

            //출도착지 담당자 셋팅
            if(salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                tempData.setString("custPtnCd", salesOrd.getString("dptArCd"));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                LData ofcrData = dao1.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                if(salesOrd.getString("dptArOfcrNm").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("dptArOfcrNm", ofcrData.getString("ordOfcrNm"));
                    }
                }
                if(salesOrd.getString("dptArOfcrTelNo").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("dptArOfcrTelNo", ofcrData.getString("rptTelNo"));
                    }
                }
            }

            if(salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                tempData.setString("custPtnCd", salesOrd.getString("arvArCd"));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                LData ofcrData = dao1.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                if(salesOrd.getString("arvArOfcrNm").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("arvArOfcrNm", ofcrData.getString("ordOfcrNm"));
                    }
                }
                if(salesOrd.getString("arvArOfcrTelNo").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("arvArOfcrTelNo", ofcrData.getString("rptTelNo"));
                    }
                }
            }
            for(int i = 0;i<salesOrdItem.getDataCount();i++){
                if(salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                    tempData.setString("custPtnCd", salesOrdItem.getString("dptArCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    LData ofcrData = dao1.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                    if(salesOrdItem.getString("dptArOfcrNm",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("dptArOfcrNm", i, ofcrData.getString("ordOfcrNm"));
                        }
                    }
                    if(salesOrdItem.getString("dptArOfcrTelNo",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("dptArOfcrTelNo", i, ofcrData.getString("rptTelNo"));
                        }
                    }
                }
                if(salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                    tempData.setString("custPtnCd", salesOrdItem.getString("arvArCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    LData ofcrData = dao1.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                    if(salesOrdItem.getString("arvArOfcrNm",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("arvArOfcrNm", i, ofcrData.getString("ordOfcrNm"));
                        }
                    }
                    if(salesOrdItem.getString("arvArOfcrTelNo",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("arvArOfcrTelNo", i, ofcrData.getString("rptTelNo"));
                        }
                    }

                    // DMT일 경우 도착지 거래선의 핸드폰 번호를 헤더에 매핑
                    if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DT)){
                        salesOrd.setString("custOfcrTelNo", ofcrData.getString("ofcrTelNo"));
                    }

                }
            }

            for(int i = 0;i<loopData.getDataCount();i++){
                if(workInfoMngtTypeCd.equals("01")){

                }else{
                    custOrdLineNo = ":라인" +loopData.getString("custOrdLineNo", i);
                }

                dptArCd = loopData.getString("dptArCd",i) == null ? "" : loopData.getString("dptArCd",i); //출발지코드
                arvArCd = loopData.getString("arvArCd",i) == null ? "" : loopData.getString("arvArCd",i); //도착지코드
                aptdReqYmd = loopData.getString("aptdReqYmd",i) == null ? "" : loopData.getString("aptdReqYmd",i); //납기요청일자
                tempData.setString("code", dptArCd);
                tempData.setString("workSctnCd", loopData.getString("dptArTypeCd",i));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                dptArCdData = dao1.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
                tempData.setString("code", arvArCd);
                tempData.setString("workSctnCd", loopData.getString("arvArTypeCd",i));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                arvArCdData = dao1.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);

                if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
                    dptArKind = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
                    dptArCd = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
                    dptArDept = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
                    dptWmYn = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");
                }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()){
                    retVal.setString("message", "존재하지않는출발지코드" + dptArCd+":"+custOrdLineNo);
                    throw new LBizException("존재하지않는출발지코드"+ dptArCd+":"+custOrdLineNo);
                }
                if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
                    arvArKind = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
                    arvArCd = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
                    arvArDept = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
                    arvWmYn = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");
                }else if(!arvArCd.equals("") && arvArCdData != null && arvArCdData.isEmpty()){
                    retVal.setString("message", "존재하지않는도착지코드" + arvArCd+":"+custOrdLineNo);
                    throw new LBizException("존재하지않는도착지코드"+ arvArCd+":"+custOrdLineNo);
                }

                if(loopData.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                        || loopData.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                    if(loopData.getString("arvArZipCd",i).equals("")
                    && loopData.getString("arvArZipAddr",i).equals("")
                    && loopData.getString("arvArDtlAddr",i).equals("") ){
                        if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                            salesOrd.setString("arvArZipCd", arvArCdData.getString("centerZipCd"));
                            salesOrd.setString("arvArZipAddr", arvArCdData.getString("centerZipAddr"));
                            salesOrd.setString("arvArDtlAddr", arvArCdData.getString("centerDtlAddr"));
                        }else{
                            salesOrdItem.modifyString("arvArZipCd", i, arvArCdData.getString("centerZipCd"));
                            salesOrdItem.modifyString("arvArZipAddr", i, arvArCdData.getString("centerZipAddr"));
                            salesOrdItem.modifyString("arvArDtlAddr", i, arvArCdData.getString("centerDtlAddr"));
                        }
                    }
                }
                if(loopData.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                        || loopData.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){

                    if(loopData.getString("dptArZipCd",i).equals("")
                    && loopData.getString("dptArZipAddr",i).equals("")
                    && loopData.getString("dptArDtlAddr",i).equals("") ){
                        if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                            salesOrd.setString("dptArZipCd", dptArCdData.getString("centerZipCd"));
                            salesOrd.setString("dptArZipAddr", dptArCdData.getString("centerZipAddr"));
                            salesOrd.setString("dptArDtlAddr", dptArCdData.getString("centerDtlAddr"));
                        }else{
                            salesOrdItem.modifyString("dptArZipCd", i, dptArCdData.getString("centerZipCd"));
                            salesOrdItem.modifyString("dptArZipAddr", i, dptArCdData.getString("centerZipAddr"));
                            salesOrdItem.modifyString("dptArDtlAddr", i, dptArCdData.getString("centerDtlAddr"));
                        }

                    }
                }

                switch(Integer.parseInt(logisSvcSctnCd)){

                    case 1:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락" + custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 3:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                    break;

                    case 5:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 2:
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 4:
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 6:
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 7:
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }

                    break;

                    case 8:
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 13:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 14:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        break;

                    case 9:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 10:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 11:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 12:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                        break;

                    case 15:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 20:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        break;

                    case 21:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 16:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                    break;

                    case 17:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 18:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                        break;

                    case 19:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    default:
                    break;
                }
            }

            /* 6. 오더요청고객 세팅
               오더요청고객코드에 값이 안넘어온 경우 계약고객코드와 동일하게 세팅함.
             */
            if(salesOrd.getString("ordReqCustCd") == null || salesOrd.getString("ordReqCustCd").equals(""))
                salesOrd.setString("ordReqCustCd", salesOrd.getString("ctrtCustCd"));


            /* 7. 계약번호 및 관련 정보 조회
               고객오더유형별계약조회 오퍼레이션 사용
               계약번호, 영업사원ID,  세팅함.  받음.

               리턴값의 건수가 1건 이상인 경우에는
               계약번호, 영업사원ID, 를 세팅하지 않고 다음으로 넘어간다.

               리턴값의 건수가 0건인 경우에는
               오류 발생
             */
/* 주석처리함. cys. 2013-12-17
            LMultiData ctrtTmp      = new LMultiData();

            //계약정보 Setting - 다차원 분석 요청 2013-12-17
            if( "Y".equals(OmConstants.INH_YN)  ) {
                tempData.setString("corpCd",            salesOrd.getString("corpCd"));
                tempData.setString("rptCustCd",         salesOrd.getString("rptCustCd"));
                tempData.setString("expImpDomSctnCd",   salesOrd.getString("expImpDomSctnCd"));
                tempData.setString("ordTypeCd",         salesOrd.getString("ordTypeCd"));

                LLog.debug.println("dptWmYn : " + dptWmYn);
                LLog.debug.println("arvWmYn : " + arvWmYn);

                if(!dptWmYn.equals("Y")){
                    tempData.setString("arvArTypeCd",       salesOrd.getString("arvArTypeCd"));
                    tempData.setString("arvArCd",           salesOrd.getString("arvArCd"));
                }
                else {
                    tempData.setString("dptArTypeCd",       salesOrd.getString("dptArTypeCd"));
                    tempData.setString("dptArCd",           salesOrd.getString("dptArCd"));
                }
                //tempData.setString("arvArTypeCd",         salesOrd.getString("arvArTypeCd"));
                //tempData.setString("arvArCd",             salesOrd.getString("arvArCd"));
                if(salesOrdItem.getDataCount() > 0)
                    tempData.setString("plantCd",           salesOrdItem.getString("plantCd",0));
                else
                    tempData.setString("plantCd",           "");
                tempData.setString("moveTypeCd",        salesOrd.getString("moveTypeCd"));


                LData ctrtCustInfo = getBilgCustInfoInh(tempData);

                if( ctrtCustInfo != null ) {
                    tempData.setString("ctrtNo",        ctrtCustInfo.getString("ctrtNo"));
                }
                else {
                    retVal.setString("result", "E");
                    retVal.setString("message", "고객오더유형별계약조회오류");
                    throw new LBizException("고객오더유형별계약조회오류");
                }

                ctrtTmp      = retrieveCustOrdTypeEachCtrtInh(tempData);
            }
            else {
                ctrtTmp      = retrieveCustOrdTypeEachCtrt(salesOrd);
            }

            LLog.debug.println("ctrtTmp : " + ctrtTmp);


            //LMultiData ctrtTmp      = retrieveCustOrdTypeEachCtrt(salesOrd);
            //LMultiData ctrtTmp      = retrieveCustOrdTypeEachCtrt(tempData);
            LMultiData ctrtData     = (LMultiData)ctrtTmp.get("OBJECT_TO_GDRs",0);

            String ordChrgDeptCd = ""; //오더담당부서코드

            if(ctrtData.getDataCount()==1){
                salesOrd.setString("ctrtNo", ctrtData.getLData(0).getString("code"));
                salesOrd.setString("sellDeptCd", ctrtData.getLData(0).getString("sellDeptCd"));
                salesOrd.setString("salesOfcrId", ctrtData.getLData(0).getString("salesOfcrId"));
                salesOrd.setString("bilgCustCd", ctrtData.getLData(0).getString("bilgCd"));
                ordChrgDeptCd = ctrtData.getLData(0).getString("ordChrgDeptCd");
            }else if(ctrtData.getDataCount() > 1){}
            else{
                retVal.setString("result", "E");
                retVal.setString("message", "고객오더유형별계약조회오류");
                throw new LBizException("고객오더유형별계약조회오류");
            }
*/

            /* 8. 수출입내수구분코드 세팅
               오더유형코드의 수출입내수구분코드 세팅
               수출입내수구분이 01,02인데 화물형태코드가 비어있으면 오류

              Z03을 받기 위하여..이부분 주석처리함. 2008.03.06 Lee K

             */
//          if((salesOrd.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_EXPORT)
//                  || salesOrd.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_INCOME))
//                  && salesOrd.getString("cargoFormCd").equals("")){
//              retVal.setString("result", "E");
//              retVal.setString("message", "수출입내수구분코드 세팅오류:화물형태코드누락");
//              throw new LBizException("수출입내수구분코드 세팅오류:화물형태코드누락");
//
//          }
            /* 9. 오더관리실행부서세팅
               if 출발지 작업장 유형이 센터인 경우 -> 출발지 작업장에 매핑된 부서
               else
                  if 도착지 작업장 유형이 센터인 경우 -> 도착지 작업장에 매핑된 부서
                  else
                     계약서에 정의된 오더 부서
                  end if
               end if
               부서가 없으면 오류
             */

            LData OrdMngtExceDeptCdData = setOrdMngtExceDeptCd(salesOrd);
            //계약정보 Setting - 다차원 분석 요청 2013-12-17
            //LData OrdMngtExceDeptCdData = setOrdMngtExceDeptCd(tempData);
            salesOrd.setString("ordMngtExceDeptCd", OrdMngtExceDeptCdData.getString("ordMngtExceDeptCd"));
            salesOrd.setString("tranPlanCntrCd", OrdMngtExceDeptCdData.getString("tranPlanCntrCd"));
            if(OrdMngtExceDeptCdData.getString("result").equals("E") || salesOrd.getString("ordMngtExceDeptCd")==null || salesOrd.getString("ordMngtExceDeptCd").equals("")){
                retVal.setString("result", "E");
                retVal.setString("message", "오더관리실행부서 세팅오류:");
                if(OrdMngtExceDeptCdData.getString("message")!=null && !OrdMngtExceDeptCdData.getString("message").equals(""))
                    throw new LBizException(OrdMngtExceDeptCdData.getString("message"));
                else
                    throw new LBizException("오더관리실행부서 세팅오류:");
            }

//          LLog.debug.println("salesOrd  00000000 : " + salesOrd);

            /* 10. 오더관리실행담당자ID 세팅(TB_OM05006)
               계약고객코드, 오더관리실행부서코드, 수출입내수구분코드로 오더관리담당자 기준정보에서 main 담당자 조회
               조건에 맞는 담당자가 없으면 세팅 안함.
               조회조건: 부서코드, 대표고객코드, 수출입내수구분코드, 주요담당자여부 = 'Y'인 사람 조회
             */
            tempData.setString("ordChrgDeptCd", salesOrd.getString("ordMngtExceDeptCd"));
            tempData.setString("custCd", salesOrd.getString("rptCustCd"));
            tempData.setString("expImpDomSctnCd", salesOrd.getString("expImpDomSctnCd"));
            LData ofcrIdData = dao1.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdMngtExceOfcrId", tempData);

            if(ofcrIdData.getString("userId")!=null && !ofcrIdData.getString("userId").equals(""))
                salesOrd.setString("ordMngtExceOfcrId", ofcrIdData.getString("userId"));

            /* 11. 판매오더상태 세팅
               02. 생성으로 세팅
             */
            salesOrd.setString("salesOrdStatCd", "02");

            /* 12. 고객담당자정보 세팅
               if 고객오더 정보에 고객담당자 정보가 있는 경우
                  고객오더에 있는 대로 세팅. (하나라도 있으면 담당자명과 전화번호 모두 주는대로 세팅함)

               else 둘다 없는 경우(기준정보테이블 미정)
                  계약고객코드, 오더관리실행부서코드, 수출입내수구분코드로 담당자 조회하여 세팅함.
                  조건에 맞는 담당자가 없으면 세팅 안함
             */
            if((salesOrd.getString("custOfcrNm")    != null && !salesOrd.getString("custOfcrNm").equals("")) ||
               (salesOrd.getString("custOfcrTelNo") != null && !salesOrd.getString("custOfcrTelNo").equals(""))){
                //salesOrd.setString("custOfcrNm", inputData.getString("custOfcrNm"));
                //salesOrd.setString("custOfcrTelNo", inputData.getString("custOfcrTelNo"));
            }else{

            }


            //

            /* 14. 장기오더여부 판단 (장기오더여부 판단 대상은 출고오더만 판단)(오더유형의 물류서비스구분이 출고가 낀것.
                작업정보관리유형이 '01'이면 헤더 납기일자로 1번만 작업함.
                작업정보관리유형이 '02'이면 아이템별 납기일자로 아이템별로 작업함
                납기일자가 고객오더접수일자 D+2일이상 큰 경우 장기오더여부에 'Y'로 세팅함.
             */
            if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_09)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_10)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_14)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_17)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_19)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_28)){
                if(salesOrd.getString("custOrdRecpDate") != null && !salesOrd.getString("custOrdRecpDate").equals("")){

                    if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                        String custOrdRecpDate = pbf.fw.support.util.DateUtil.addDays(salesOrd.getString("custOrdRecpDate").substring(0, 8),2);
                        if(salesOrd.getString("aptdReqYmd").compareTo(custOrdRecpDate)>=0)
                            salesOrd.setString("ltrmOrdYn","Y");
                    }else{
                        for(int i = 0;i<salesOrdItem.getDataCount();i++){
                            if(salesOrdItem.getString("aptdReqYmd",i).compareTo(pbf.fw.support.util.DateUtil.addDays(salesOrd.getString("custOrdRecpDate").substring(0, 8),2))>=0)
                                salesOrd.setString("ltrmOrdYn","Y");
                        }
                    }
                }
            }
            /* 15. 긴급여부판단 (긴급관리여부가 'Y' 이고 대기오더가 'Y'가 아닌 경우에만 실행함)
               작업정보관리유형이 '01'이면 헤더 납기일자로 1번만 작업함.
               작업정보관리유형이 '02'이면 아이템별 납기일자로 아이템별로 작업함

               마감긴급여부 판단 기준:
               납기일자가 당일인 경우에만 처리함.
               센터별고객별 마감시간 정보(OM05004)를 읽어서 C/O 접수 일시와 비교하여 긴급 여부 세팅.

               리드타임긴급여부 판단 기준:(권역테이블 MA01007)
               납기일자가 당일인 경우에만 처리함.
               출발지코드와 도착지 우편번호를 사용하여 권역 테이블에서 평균 리드타임 조회
               C/O접수일시 + 리드타임을 하여 납기일시보다 커지면 긴급으로 세팅.
             */
            String backOrdYn = "N";
            //if(salesOrd.getString("backOrdYn")!= null)
            //  backOrdYn = salesOrd.getString("backOrdYn");
            //else
            //  salesOrd.setString("backOrdYn","N");

            // IF로 들어오는 입고오더에 대해서 전부 대기오더로 생성함, 취소처리
//          if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB) ) {
//              if(  "11".equals(salesOrd.getString("custOrdTypeCd"))
//                || "12".equals(salesOrd.getString("custOrdTypeCd"))
//                ||  "1".equals(salesOrd.getString("custOrdTypeCd"))
//                ||  "2".equals(salesOrd.getString("custOrdTypeCd"))
//                ||  "3".equals(salesOrd.getString("custOrdTypeCd"))){
//
//                  backOrdYn = "Y";
//                  salesOrd.setString("backOrdYn","Y");
//                  salesOrd.setString("salesOrdCmptSctnCd","02");
//                  salesOrd.setString("salesOrdCnclYn","Y");
//                  salesOrd.setString("salesOrdStatCd","06");
//
//                  for(int i = 0;i<salesOrdItem.getDataCount();i++){
//                      salesOrdItem.modifyString("ordReasonCd",i,"2");
//                  }
//              }
//          }

            // 수배송TPL에 대해 오더변경(일괄자가운송전환/일괄CSN운송전환) 대상자에 대한 대기오더처리
//          if(  !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
//            && !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
//            && !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)
//            && !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)
//            ) {
//              LData wlYnInfo = dao1.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnCdWlYn", salesOrd);
//              if("Y".equals(wlYnInfo.getString("ltmYn"))) {
//                  LData ordTypeChgYn = dao1.executeQueryForSingle("select/om/om02/salesOrd/getOrdTypeChgYn", salesOrd);
//                  if("Y".equals(ordTypeChgYn.getString("ordTypeChgYn"))) {
//                      backOrdYn = "Y";
//                      salesOrd.setString("backOrdYn","Y");
//                  }
//              }
//          }

            if(exprMngtYn.equals("Y") && !backOrdYn.equals("Y")){
                if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                    if(salesOrd.getString("aptdReqYmd").equals(pbf.fw.support.util.DateUtil.getCurrentDateString("yyyyMMdd"))){

                        tempData.setString("workCntrCd", salesOrd.getString("dptArCd"));
                        tempData.setString("custCd", salesOrd.getString("rptCustCd"));
                        tempData.setString("useYn", "Y");
                        LData orderCloseBasisData   = dao1.executeQueryForSingle("select/om/om05/orderCloseBasisMng/retrieveOrderCloseBasisMngList", tempData);

                        if(orderCloseBasisData.getString("clsStdHms") != null &&
                           salesOrd.getString("custOrdRecpDate").substring(8, 12).compareTo(orderCloseBasisData.getString("clsStdHms"))>0)
                            salesOrd.setString("clsExprYn","Y"); //마감긴급
                        salesOrd.setString("leadTimeExprYn","N");
                        tempData.setString("workPlCd", salesOrd.getString("dptArCd"));
                        tempData.setString("corpCd", salesOrd.getString("corpCd"));
                        tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                        tempData.setString("ordTypeCd", salesOrd.getString("ordTypeCd"));
                        if(salesOrd.getString("arvArZipCd")!=null && !salesOrd.getString("arvArZipCd").equals("") && !salesOrd.getString("arvArZipCd").equals(" ")){
                            tempData.setString("zipArCd", salesOrd.getString("arvArZipCd").substring(0, 3));

                            LData avgOpMasterData = dao1.executeQueryForSingle("select/ma/ma01/regnCdMngt/retrieveAvgOpHms", tempData);
                            if(avgOpMasterData != null && avgOpMasterData.containsKey("avgOpHms") && !avgOpMasterData.getString("avgOpHms").equals(""))
                                if(Double.parseDouble(salesOrd.getString("custOrdRecpDate")) + Double.parseDouble(avgOpMasterData.getString("avgOpHms")) >
                                    Double.parseDouble(salesOrd.getString("aptdReqYmd") + salesOrd.getString("aptdReqHm") + "00"))
                                //if((salesOrd.getString("custOrdRecpDate").concat(avgOpMasterData.getString("avgOpHms"))).compareTo(salesOrd.getString("aptdReqYmd")) >0)
                                    salesOrd.setString("leadTimeExprYn","Y"); //리드타임긴급
                        }

                    }
                }else{

//                  LLog.debug.println("salesOrd : " + salesOrd);
//                  LLog.debug.println("salesOrdItem : " + salesOrdItem);

                    for(int i = 0;i<salesOrdItem.getDataCount();i++){
                        if(salesOrdItem.getString("aptdReqYmd",i).equals(pbf.fw.support.util.DateUtil.getCurrentDateString("yyyyMMdd"))){

                            tempData.setString("workCntrCd", salesOrdItem.getString("dptArCd",i));
                            LData orderCloseBasisData   = dao1.executeQueryForSingle("select/om/om05/orderCloseBasisMng/retrieveOrderCloseBasisMngList", tempData);
                            if(orderCloseBasisData.getString("clsStdHms") != null &&
                               salesOrd.getString("custOrdRecpDate").substring(8, 12).compareTo(orderCloseBasisData.getString("clsStdHms"))>0)
                                salesOrdItem.modifyString("clsExprYn",i,"Y"); //마감긴급
                            salesOrdItem.modifyString("leadTimeExprYn",i,"N");
                            tempData.setString("workPlCd", salesOrdItem.getString("dptArCd",i));
                            tempData.setString("corpCd", salesOrd.getString("corpCd"));
                            tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                            tempData.setString("ordTypeCd", salesOrd.getString("ordTypeCd"));
                            if(salesOrdItem.getString("arvArZipCd", i)!=null && !salesOrdItem.getString("arvArZipCd", i).equals("")
                                && !salesOrdItem.getString("arvArZipCd", i).equals(" ")){
                                LLog.debug.println("arvArZipCd : [" + salesOrdItem.getString("arvArZipCd",i)+"]");
                                tempData.setString("zipArCd", salesOrdItem.getString("arvArZipCd",i).substring(0, 3));

                                LData avgOpMasterData = dao1.executeQueryForSingle("select/ma/ma01/regnCdMngt/retrieveAvgOpHms", tempData);
                                if(avgOpMasterData != null && avgOpMasterData.containsKey("avgOpHms") && !avgOpMasterData.getString("avgOpHms").equals(""))
                                    if(Double.parseDouble(salesOrd.getString("custOrdRecpDate")) + Double.parseDouble(avgOpMasterData.getString("avgOpHms")) >
                                    Double.parseDouble(salesOrdItem.getString("aptdReqYmd",i) + salesOrdItem.getString("aptdReqHm",i) + "00"))
                                    //if((salesOrd.getString("custOrdRecpDate").concat(avgOpMasterData.getString("avgOpHms"))).compareTo(salesOrdItem.getString("aptdReqYmd",i)) >0)
                                        salesOrdItem.modifyString("leadTimeExprYn",i,"Y"); //리드타임긴급
                            }

                        }
                    }
                }
            }


            /* 16. 아이템별 작업관리 유형의 헤더정보 조정 (아이템별 작업관리인 경우에만 실행)
                아이템별 납기일시 중 가장 늦은 납기일시를 헤더에 세팅
                아이템별로 하나라도 긴급이나 장기오더가 있으면 헤더에도 'Y'로
             */
            if(salesOrd.getString("workInfoMngtTypeCd").equals("02")){
                for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    if(salesOrdItem.getString("aptdReqYmd",i).concat(salesOrdItem.getString("aptdReqHm",i)).compareTo(salesOrd.getString("aptdReqYmd").concat(salesOrd.getString("aptdReqHm")))>0){
                        salesOrd.setString("aptdReqYmd", salesOrdItem.getString("aptdReqYmd",i));
                        salesOrd.setString("aptdReqHm", salesOrdItem.getString("aptdReqHm",i));
                    }

                    if(salesOrdItem.getString("leadTimeExprYn",i).equals("Y"))
                        salesOrd.setString("leadTimeExprYn", "Y");
                    if(salesOrdItem.getString("clsExprYn",i).equals("Y"))
                        salesOrd.setString("clsExprYn", "Y");
                    if(salesOrdItem.getString("ltrmOrdYn",i).equals("Y"))
                        salesOrd.setString("ltrmOrdYn", "Y");
                }
            }

            /* 17. 신규판매오더번호 조회 오퍼레이션 호출
             */
            LData salesOrdNoData = dao1.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewSalesOrdNo", salesOrd);
            String salesOrdNo = salesOrdNoData.getString("salesOrdNo");
            salesOrd.setString("salesOrdNo", salesOrdNo);

            //등록자정보는 어디에서?????????
            salesOrd.setString("regrId", OmConstants.COMMON_USER);
            salesOrd.setString("mdfrId", OmConstants.COMMON_USER);

            int lineNo = 10;
            for(int i = 0;i<salesOrdItem.getDataCount("salesOrdNo");i++){
                salesOrdItem.modifyString("salesOrdNo",i, salesOrdNo);
                salesOrdItem.modifyString("regrId",i, "ssydev");
                salesOrdItem.modifyString("mdfrId",i, "ssydev");
                salesOrdItem.modifyString("lineNo",i, Integer.toString(lineNo));
                salesOrdItem.addString("saveData", "N");
                
                //2015-12-24 제지 수출오더일 때 라인번호 채번룰 변경 +1 증가
                if( salesOrd.getString("ifId").equals("IF_HPP_OM_ExportOrder") ){
                	lineNo += 1;	
                }
                else {                
                    lineNo += 10;
                }
            }

            //movetype setting
            LData move = new LData();
            move.setString("dptArCd"            , salesOrd.getString("dptArCd"          ));
            move.setString("dptArTypeCd"        , salesOrd.getString("dptArTypeCd"      ));
            move.setString("arvArCd"            , salesOrd.getString("arvArCd"          ));
            move.setString("arvArTypeCd"        , salesOrd.getString("arvArTypeCd"      ));
            move.setString("expImpDomSctnCd"    , salesOrd.getString("expImpDomSctnCd"  ));
            move.setString("custOrdTypeCd"      , salesOrd.getString("custOrdTypeCd"    ));
            move.setString("custMoveTypeCd"     , salesOrd.getString("custMoveTypeCd"   ));
            move.setString("ordTypeCd"          , salesOrd.getString("ordTypeCd"        ));
            move.setString("rptCustCd"          , salesOrd.getString("rptCustCd"        ));
            move.setString("custOfCustCd"       , salesOrd.getString("custOfCustCd"     ));

            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC) ) {
                String selfGdsCd = "";
                if(salesOrdItem.containsKey("col04")){ //전주페이퍼인 경우
                        selfGdsCd = salesOrdItem.getString("col04", 0);
                }
                move.setString("selfGdsCd"          , selfGdsCd);

            }else
                move.setString("selfGdsCd"          , "");

            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV) || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)) {
                String transValue = "";
                if(salesOrd.containsKey("col01")){ //이브자리인 경우 : 직송값
                    transValue = salesOrd.getString("col01");
                }
                move.setString("transValue"         , transValue);

            }else {
                move.setString("transValue"         , "");
            }

            String moveTypeCd = retrieveMoveType(move);

            //2013-05-02 장항항 원부자재 출고오더 오더유형및 이동유형 변경
            String jDptArCd = salesOrd.getString("dptArCd");
            String jcustMoveTypeCd = salesOrd.getString("custMoveTypeCd");

            if( (salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                    || ("Y".equals(ART_YN) && salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)))
                &&jDptArCd != null && ("5500".equals(jDptArCd) || "5550".equals(jDptArCd))
                && jcustMoveTypeCd != null && "Z03".equals(jcustMoveTypeCd) ) {
                moveTypeCd = "2103";
            }

            //2013-11-07 아트원 roll-out 입고오더인 경우 분배
            if( "Y".equals(OmConstants.INH_YN)
                && salesOrd.getString("custOrdTypeCd") != null
                && salesOrd.getString("custOrdTypeCd").equals("ZH")
                && salesOrd.getString("col05") != null
                && !salesOrd.getString("col05").equals("")
                && salesOrd.getString("col05").equals("G00")
            ) {
                moveTypeCd = "1410";
            }
            //LLog.debug.println(salesOrd.getString("col05")+"****moveType LEEPJ**********############### :"+moveTypeCd);

            salesOrd.setString("moveTypeCd", moveTypeCd);

            //수량중량 검증
            if(!salesOrdItem.containsKey("basisUnitCd")){
                for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    salesOrdItem.addString("basisUnitCd", "EA");
                    LLog.debug.println("basisUnitCd ******************* => EA *****");
                }
            }
            for(int i = 0;i<salesOrdItem.getDataCount();i++){
                tempData.setString("ptnCd", salesOrdItem.getString("custCd", i));
                tempData.setString("itemCd", salesOrdItem.getString("itemCd", i));
                LData itemMasterData = dao1.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfoSalesOrd", tempData);
                if(itemMasterData != null && !itemMasterData.isEmpty()){
                    salesOrdItem.modifyString("basisUnitCd", i, itemMasterData.getString("basisUnitCd"));
                    LLog.debug.println("itemMasterData 11111 : " + itemMasterData);
                    if(itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_EV)||itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_SS)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem.modifyString("basisUnitCd", i, "EA");
                        }
                    }else if(itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_PG)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem.modifyString("basisUnitCd", i, "KG");
                        }
                    }else if(itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_SC)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem.modifyString("basisUnitCd", i, "KG");
                        }
                    }else if(itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_CB)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem.modifyString("basisUnitCd", i, "EA");
                        }
                    }
                }
            }

            salesOrd.set("LCompoundDao", compoundDao);
//          LLog.debug.println("salesOrdItem *******************");
//          LLog.debug.println("salesOrdItem 11111 : " + salesOrdItem);
//          LLog.debug.println("salesOrdItem *******************");
            LMultiData changeData = new LMultiData();
            if(salesOrdItem != null && salesOrdItem.getDataCount() > 0) {
                changeData = changeQtyWgt(salesOrd,salesOrdItem);
            }
            LLog.debug.println("changeData=====>" + changeData);
            
            String ordVerifyYn = "Y";
            for(int i = 0;i<changeData.getDataCount();i++){
                if(changeData.getString("workFlag", i).equals("S")){
                	
                	if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HW)){
                		
                	}else{
                		salesOrdItem.modify("ordQty"   , i, changeData.get("ordQty"   , i));
                		salesOrdItem.modify("ordWgt"   , i, changeData.get("ordWgt"   , i));
                	}
                    
                	salesOrdItem.modify("ordCbm"   , i, changeData.get("ordCbm"   , i));
                	salesOrdItem.modify("qtyUnitCd", i, changeData.get("qtyUnitCd", i));
                	salesOrdItem.modify("wgtUnitCd", i, changeData.get("wgtUnitCd", i));
/*                	
                    salesOrdItem.modify("ordQty"   , i, changeData.get("ordQty"   , i));
                    salesOrdItem.modify("ordCbm"   , i, changeData.get("ordCbm"   , i));
                    salesOrdItem.modify("qtyUnitCd", i, changeData.get("qtyUnitCd", i));
                    salesOrdItem.modify("ordWgt"   , i, changeData.get("ordWgt"   , i));
                    salesOrdItem.modify("wgtUnitCd", i, changeData.get("wgtUnitCd", i));
*/
                    if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NS)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DF)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MX)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IR)){
                        salesOrdItem.modify("pckgQty", i, changeData.get("pckgQty", i));
                    }

                }else if(!salesOrdItem.containsKey("ordReasonCd") || salesOrdItem.getString("ordReasonCd", i) == null || "".equals(salesOrdItem.getString("ordReasonCd", i))){
                    salesOrdItem.modify("ordVerifyYn", i, "N");
                    salesOrdItem.modify("col30", i, changeData.get("workMessage", i));
                    ordVerifyYn = "N";
                }

                //  전주페이퍼일경우 오더유형이 국내내수판매반품운송입고 이고 호기값이 널일경우 오더검증여부로 세팅
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)){
                    if(salesOrd.getString("custOrdTypeCd").equals("D") || salesOrd.getString("ordTypeCd").equals("1033")){
                        if(!salesOrdItem.containsKey("mnCd") || salesOrdItem.getString("mnCd", i) == null || "".equals(salesOrdItem.getString("mnCd", i))){
                            salesOrdItem.modify("ordVerifyYn", i, "N");
                            salesOrdItem.modify("col30", i, "호기값 누락");
                            ordVerifyYn = "N";
                        }
                    }
                }

                //  전주페이퍼일경우 오더유형이 국내내수판매반품운송입고 이고 특성값이 널일경우 오더검증여부로 세팅
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)){
                    if(salesOrd.getString("custOrdTypeCd").equals("D") || salesOrd.getString("ordTypeCd").equals("1033")){
                        if(!salesOrdItem.containsKey("pculCd") || salesOrdItem.getString("pculCd", i) == null || "".equals(salesOrdItem.getString("pculCd", i))){
                            salesOrdItem.modify("ordVerifyYn", i, "N");
                            salesOrdItem.modify("col30", i, "특성값 누락");
                            ordVerifyYn = "N";
                        }
                    }
                }

                // 이브자리에 대해 입출고오더(오더유형:1)에 대해 직송여부가 직송(3)인 경우 오더생성만 함
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)){
                    if(salesOrd.getString("custOrdTypeCd").equals("1")
                      &&(salesOrd.getString("custMoveTypeCd").equals("01") || salesOrd.getString("custMoveTypeCd").equals("03"))
                      && salesOrd.getString("col01").equals("3")){
                        salesOrdItem.modify("ordVerifyYn", i, "N");
                        salesOrdItem.modify("col30", i, "입출고오더에 대해 직송(3)인 경우");
                        ordVerifyYn = "N";

                    }
                }

                // 커피빈에 대해서 출고오더유형은 권역코드가 필수
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)){
                    if((salesOrd.getString("custOrdTypeCd").equals("O1") || salesOrd.getString("custOrdTypeCd").equals("OUT1"))
                      && "".equals(salesOrd.getString("col04"))){
                        salesOrdItem.modify("ordVerifyYn", i, "N");
                        salesOrdItem.modify("col30", i, "거래선 권역코드 NULL");
                        ordVerifyYn = "N";

                    }
                }

//              // 운송분배여부 체크
//              LData transEoYn = dao1.executeQueryForSingle("select/om/om02/salesOrd/retrieveEoCreatYn", salesOrd);
//              // 거래선에 우편번호가 누락된다면 오더검증로직 추가
//              if("Y".equals(transEoYn.getString("transYn"))){
//                  if(salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//                      if("".equals(salesOrdItem.getString("dptArZipCd", i))
//                         || " ".equals(salesOrdItem.getString("dptArZipCd", i))){
//                          salesOrdItem.modify("ordVerifyYn", i, "N");
//                          salesOrdItem.modify("col30", i, "출발지우편번호 누락");
//                          ordVerifyYn = "N";
//                      }
//
//                  }else if(salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//                      if("".equals(salesOrdItem.getString("arvArZipCd", i))
//                         || " ".equals(salesOrdItem.getString("arvArZipCd", i))){
//                          salesOrdItem.modify("ordVerifyYn", i, "N");
//                          salesOrdItem.modify("col30", i, "도착지우편번호 누락");
//                          ordVerifyYn = "N";
//                      }
//                  }
//              }

            }

            salesOrd.setString("ordVerifyYn", ordVerifyYn);


            //청구고객/매출부서 셋팅 ISCOMM_GETBILGCUSTINFO_FN
              //p_corp_cd               VARCHAR2, /* 법인코드,           필수 */
              //p_ctrt_cust_cd          VARCHAR2, /* 계약고객코드,       필수 */
              //p_exp_imp_dom_sctn_cd   VARCHAR2, /* 수출입내수구분코드, 필수 */
              //p_ord_type_cd           VARCHAR2, /* 오더유형코드,       필수 */
              //p_dpt_ar_type_cd        VARCHAR2, /* 출발지유형코드 */
              //p_dpt_ar_cd             VARCHAR2, /* 출발지코드     */
              //p_arv_ar_type_cd        VARCHAR2, /* 도착지유형코드 */
              //p_arv_ar_cd             VARCHAR2, /* 도착지코드     */
              //p_plant_cd              VARCHAR2, /* 생산처코드     */
              //p_move_type_cd          VARCHAR2  /* 이동유형코드   */
            tempData.setString("corpCd",            salesOrd.getString("corpCd"));
            tempData.setString("rptCustCd",         salesOrd.getString("rptCustCd"));
            tempData.setString("expImpDomSctnCd",   salesOrd.getString("expImpDomSctnCd"));
            tempData.setString("ordTypeCd",         salesOrd.getString("ordTypeCd"));
            tempData.setString("dptArTypeCd",       salesOrd.getString("dptArTypeCd"));
            tempData.setString("dptArCd",           salesOrd.getString("dptArCd"));
            tempData.setString("arvArTypeCd",       salesOrd.getString("arvArTypeCd"));
            tempData.setString("arvArCd",           salesOrd.getString("arvArCd"));
            if(salesOrdItem.getDataCount() > 0)
                tempData.setString("plantCd",           salesOrdItem.getString("plantCd",0));
            else
                tempData.setString("plantCd",           "");
            tempData.setString("moveTypeCd",        salesOrd.getString("moveTypeCd"));
            
            //2015-01-22 제일모직 전자재료 부문 SDI 로직으로  변경
            tempData.setString("divCode",        salesOrd.getString("col23"));

            //2015-05-21 CFS 적송오더의 경우 KRPUS->KRPUS 로 처리가 되는데 생산처 코드가 없어 강제로 plantcd 넣어줌.
            if( (salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP) || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                && salesOrd.getString("custMoveTypeCd").equals("Z27") 
                && StringUtil.isNull(tempData.getString("plantCd")).equals("") 
                && !StringUtil.isNull(inputData.getString("workCntrCd")).equals("") ) {

                /**       
                2000  - 02(장항)
                3000  - 03(대전)
                5000  - 11(천안)
                8000  - 07(신탄진)
                
                P200 - 07(신탄진)
                P300 - 06(오산)
                **/
            	
            	if( inputData.getString("workCntrCd").equals("2000") ) {
            		tempData.setString("plantCd",           "02");
            	}
            	else if( inputData.getString("workCntrCd").equals("3000") ) {
            		tempData.setString("plantCd",           "03");
            	}
            	else if( inputData.getString("workCntrCd").equals("5000") ) {
            		tempData.setString("plantCd",           "11");
            	}
            	else if( inputData.getString("workCntrCd").equals("P200") ) {
            		tempData.setString("plantCd",           "07");
            	}
            	else if( inputData.getString("workCntrCd").equals("P300") ) {
            		tempData.setString("plantCd",           "06");
            	}
            	else if( inputData.getString("workCntrCd").equals("8000") ) {
            		tempData.setString("plantCd",           "07");
            	}
            }	
                     
            /* 주석처리. cys. 2013-12-17
            tempData.setString("clasCd",        "BILG_CUST_SCTN_CD");
            tempData.setString("comnCd",        salesOrd.getString("col02"));
            LData custBilgCustCd = dao1.executeQueryForSingle("select/ma/ma01/comnCdMngt/retrieveBilgCustCd", tempData);

            LData bilgCustCdData = dao1.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfo", tempData);
            if(bilgCustCdData != null && !bilgCustCdData.isEmpty()){

                if(custBilgCustCd != null && !custBilgCustCd.isEmpty()){
                    salesOrd.setString("bilgCustCd", custBilgCustCd.getString("bilgCustCd"));
                }else{

                    if("ERROR".equals(bilgCustCdData.getString("bilgCustCd"))){
                        throw new LBizException("청구고객_매출부서 매핑오류");
                    }
                    salesOrd.setString("bilgCustCd", bilgCustCdData.getString("bilgCustCd"));
                }

                salesOrd.setString("sellDeptCd", bilgCustCdData.getString("sellDeptCd")); // 매출부서

            }
            */

            //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoInh(tempData);
            if( ctrtCustInfo != null ) {
            	salesOrd.setString("ctrtNo", ctrtCustInfo.getString("ctrtNo"));
            	salesOrd.setString("bilgCustCd", ctrtCustInfo.getString("bilgCustCd"));
            	salesOrd.setString("sellDeptCd", ctrtCustInfo.getString("sellDeptCd"));
            	salesOrd.setString("salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
             }   
            
            //--------------------------------------------------------------------------------------------------
            
            //laf.application.dao.LCompoundDao dao2 = new laf.application.dao.LCompoundDao();
            compoundDao.add("cud/om/tb_om02001/createSalesOrdAuto", salesOrd);
            compoundDao.executeUpdate();

            compoundDao.add("cud/om/tb_om02004/createTbOm02004", salesOrd);
            compoundDao.executeUpdate();

            compoundDao.add("cud/om/tb_om02002/createSalesOrd", salesOrdItem);
            compoundDao.executeUpdate();

            compoundDao.add("cud/om/tb_om02005/createTbOm02005", salesOrdItem);
            compoundDao.executeUpdate();


            // 이브자리에 대해 입출고오더(오더유형:1)에 대해 직송여부가 직송(3)인 경우 오더생성만 함 : 오더 확정 보냄
            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)){
                if(salesOrd.getString("custOrdTypeCd").equals("1")
                  &&(salesOrd.getString("custMoveTypeCd").equals("01") || salesOrd.getString("custMoveTypeCd").equals("03"))
                  && salesOrd.getString("col01").equals("3")){

                    // 자동완료처리 함
                    salesOrd.setString("salesOrdStatCd"     , OmConstants.SALES_ORD_STAT_CD_06);
                    salesOrd.setString("salesOrdCmptSctnCd" , OmConstants.SALES_ORD_CMPT_SCTN_CD_AUTO);

                    compoundDao.add("cud/om/tb_om02001/updateSalesOrdCmpt", salesOrd);
                    compoundDao.executeUpdate();

                    // 오더확정정보 송신(이브자리) : 확정
                    IStepEachRsltMngt evePbc    = (IStepEachRsltMngt) PbcUtil.getPbc(IStepEachRsltMngt.class);
                    salesOrd.set("LCompoundDao",compoundDao);
                    evePbc.transferEveEtcOrdDcsn(salesOrd);

                }
            }

            if(salesOrd.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_EXPORT)
                    || salesOrd.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_INCOME)){
                //국제물류 insert
                compoundDao.add("cud/om/tb_om02003/createSalesOrd", salesOrd);
                compoundDao.executeUpdate();

                //SR전송 받은경우 om02019 생성(삼성토탈인 경우)
                if(salesOrd.getString("expCustOrdSctnCd") != null && OmConstants.EXP_CUST_ORD_SCTN_CD_SR.equals(salesOrd.getString("expCustOrdSctnCd"))) {
                    String shipCoBookingNo = salesOrd.getString("bookingNo");
                    salesOrd.setString("shipCoBookingNo", shipCoBookingNo);

                    if(salesOrd.getString("cyClsYmd") == null || salesOrd.getString("cyClsYmd").length() != 8 || !DateUtil.isValid(salesOrd.getString("cyClsYmd"))){
                        String cyClsYmd = DateUtil.addDays(salesOrd.getString("dptPortPrarYmd"),-2);
                        salesOrd.setString("cyClsYmd", cyClsYmd);
                    }

                    if(salesOrd.getString("cyClsHms") == null || salesOrd.getString("cyClsHms").length() != 6 || !DateUtil.isValid(salesOrd.getString("cyClsHms"), "HHmmss")){
                        salesOrd.setString("cyClsHms", "1700");
                    }else{
                        salesOrd.setString("cyClsHms", salesOrd.getString("cyClsHms").substring(0,4));
                    }

                    if(salesOrd.getString("srClsYmd") == null || salesOrd.getString("srClsYmd").length() != 8 || !DateUtil.isValid(salesOrd.getString("srClsYmd"))){
                        String srClsYmd = DateUtil.addDays(salesOrd.getString("dptPortPrarYmd"),-3);
                        salesOrd.setString("srClsYmd", srClsYmd);
                    }

                    if(salesOrd.getString("srClsHms") == null || salesOrd.getString("srClsHms").length() != 6 || !DateUtil.isValid(salesOrd.getString("srClsHms"), "HHmmss")){
                        salesOrd.setString("srClsHms", "1500");
                    }else{
                        salesOrd.setString("srClsHms", salesOrd.getString("srClsHms").substring(0,4));
                    }

                    try {
                        LData bookingNo = compoundDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewBookingNo", salesOrd);

                        if(bookingNo != null && bookingNo.getString("bookingNo") != null && !bookingNo.getString("bookingNo").equals("")) {
                            salesOrd.setString("bookingNo", bookingNo.getString("bookingNo"));
                        }
                    } catch(Exception sse) {
                        salesOrd.setString("bookingNo", "BK001");
                    }

                    if(salesOrd.getString("bookingYmd") == null || salesOrd.getString("bookingYmd").equals("")) {
                        salesOrd.setString("bookingYmd", DateUtil.getCurrentDateString());
                    }

                    compoundDao.add("cud/om/tb_om02019/createBooking", salesOrd);
                    compoundDao.executeUpdate();
                }

                else if((salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP) || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                		&& ("EMOR".equals(salesOrd.getString("custOrdTypeCd"))  || "EMKB".equals(salesOrd.getString("custOrdTypeCd")))
                		&& salesOrd.getString("ordTypeCd").equals("5083")
                    	&& salesOrd.getString("expTypeCd").equals("01") ) {
                    //제지, 아트원 직수출오더 부킹정보 자동생성 2015-03-30 국내외수출판매정상출고운송포워딩(5083)
                	
    				LLog.debug.println("*************booking 생성*****************"+salesOrd);
                	String shipCoBookingNo = salesOrd.getString("custOrdNo");
                    salesOrd.setString("shipCoBookingNo", shipCoBookingNo);
                    salesOrd.setString("dptPortPrarYmd", salesOrdItem.getString("dptPortPrarYmd",0));
                    
                    if(salesOrd.getString("cyClsYmd") == null || salesOrd.getString("cyClsYmd").length() != 8 || !DateUtil.isValid(salesOrd.getString("cyClsYmd"))){
                        String cyClsYmd = DateUtil.addDays(salesOrd.getString("dptPortPrarYmd"),-2);
                        salesOrd.setString("cyClsYmd", cyClsYmd);
                    }

                    if(salesOrd.getString("cyClsHms") == null || salesOrd.getString("cyClsHms").length() != 6 || !DateUtil.isValid(salesOrd.getString("cyClsHms"), "HHmmss")){
                        salesOrd.setString("cyClsHms", "1700");
                    }else{
                        salesOrd.setString("cyClsHms", salesOrd.getString("cyClsHms").substring(0,4));
                    }

                    if(salesOrd.getString("srClsYmd") == null || salesOrd.getString("srClsYmd").length() != 8 || !DateUtil.isValid(salesOrd.getString("srClsYmd"))){
                        String srClsYmd = DateUtil.addDays(salesOrd.getString("dptPortPrarYmd"),-3);
                        salesOrd.setString("srClsYmd", srClsYmd);
                    }

                    if(salesOrd.getString("srClsHms") == null || salesOrd.getString("srClsHms").length() != 6 || !DateUtil.isValid(salesOrd.getString("srClsHms"), "HHmmss")){
                        salesOrd.setString("srClsHms", "1500");
                    }else{
                        salesOrd.setString("srClsHms", salesOrd.getString("srClsHms").substring(0,4));
                    }

                    try {
                        LData bookingNo = compoundDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewBookingNo", salesOrd);

                        if(bookingNo != null && bookingNo.getString("bookingNo") != null && !bookingNo.getString("bookingNo").equals("")) {
                            salesOrd.setString("bookingNo", bookingNo.getString("bookingNo"));
                        }
                    } catch(Exception sse) {
                        salesOrd.setString("bookingNo", "BK001");
                    }

                    if(salesOrd.getString("bookingYmd") == null || salesOrd.getString("bookingYmd").equals("")) {
                        salesOrd.setString("bookingYmd", DateUtil.getCurrentDateString());
                    }
                    
                    double strBookingWgt = 0;
                    for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    	strBookingWgt = strBookingWgt + Double.parseDouble(salesOrdItem.getString("ordWgt", i));
                    }
                    
                    LData schdLData = compoundDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveFisSchdInfo", salesOrd);
                    
                    if( schdLData.isEmpty() ) {
                    	salesOrd.setString("schdNo", salesOrdItem.getString("schdNo", 0));
                    	schdLData = compoundDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveFisSchdInfo2", salesOrd);
                    }
                    	
                    
                    LData bookingLData = new LData();
                    bookingLData = salesOrd;
                    portCnt = schdLData.getString("schVoy")== null ? "" : schdLData.getString("schVoy");
                    
                    if( portCnt.length() > 10 ) portCnt = schdLData.getString("schVoy").substring(0,10);
                    
                    if( !schdLData.isEmpty() ) {
	                    bookingLData.setString("bookingWgt", String.valueOf(strBookingWgt));
	                    bookingLData.setString("wgtUnitCd", "KG");
	                    bookingLData.setString("schdNo", schdLData.getString("schMag"));
	                    bookingLData.setString("shipNm", schdLData.getString("schVsl"));
	                    bookingLData.setString("portCnt", portCnt);
	                    bookingLData.setString("shipCoCd", schdLData.getString("custId"));
	                    bookingLData.setString("shipCoNm", schdLData.getString("custNm"));
	                    bookingLData.setString("cntrKindCd1", "22GP");
	                    bookingLData.setString("cntrQty1", "1");
	                    bookingLData.setString("schdOfcrNm", "PIC");
	                    bookingLData.setString("schdType", "U"); 
                    }
                    else {
                    	bookingLData.setString("bookingWgt", String.valueOf(strBookingWgt));
	                    bookingLData.setString("wgtUnitCd", "KG");
	                    bookingLData.setString("schdNo", "SCHD001");
	                    bookingLData.setString("shipNm", "vessel");
	                    bookingLData.setString("portCnt", portCnt);
	                    bookingLData.setString("shipCoCd", "HJSC");
	                    bookingLData.setString("shipCoNm", "(주)한진해운");
	                    bookingLData.setString("cntrKindCd1", "22GP");
	                    bookingLData.setString("cntrQty1", "1");
	                    bookingLData.setString("schdOfcrNm", "PIC");
	                    bookingLData.setString("schdType", "U"); 
                    }
                    
                    
                    //compoundDao.add("cud/om/tb_om02019/createBooking", salesOrd);
                    //compoundDao.executeUpdate();

                    if(!saveBranchOceanExpSalesOrdFwdDir(bookingLData))  throw new LSysException("포워딩오더  Booking 정보 생성중 오류가 발생했습니다. ");
                }

            }
            
            LData changeSalesOrdStat = new LData();
            changeSalesOrdStat.setString("salesOrdStatCd","02");
            changeSalesOrdStat.setString("salesOrdNo",salesOrd.getString("salesOrdNo"));
            changeSalesOrdStat.setString("mdfrId",salesOrd.getString("mdfrId"));
            compoundDao.add("cud/om/tb_om01001/changeSalesOrdStat", changeSalesOrdStat);
            compoundDao.executeUpdate();

            LLog.debug.println("******************************");
            LLog.debug.println("*********salesOrd*************"+salesOrd);
            LLog.debug.println("******************************");


            //잔여작업 진행 가용재고, 납품보류, 분배
            if(salesOrd.getString("ordVerifyYn").equals("Y")){
                LMultiData restItemData   = new LMultiData();
                String ordReasonCd = "";
                int ordReasonCnt = 0;
                for(int i=0; i<salesOrdItem.getDataCount(); i++){
                    ordReasonCd = "";
                    LData item = salesOrdItem.getLData(i);

                    if (item.getString("ordReasonCd") != null && !item.getString("ordReasonCd").equals("")){
                        ordReasonCd = item.getString("ordReasonCd");
                    }
                    LLog.debug.println("ordReasonCd====>"+item.getString("ordReasonCd"));
                    if(ordReasonCd.length() > 0){
                        ordReasonCnt++;
                    }else{
                        restItemData.addLData(item);
                    }
                }

                salesOrd.set("LCompoundDao", compoundDao);

                if(restItemData.getDataCount() > 0){
                    LData salesOrdRestData = createSalesOrdRest(salesOrd,restItemData);
                    //LData salesOrdTemp = (LData)salesOrdRestData.get("salesOrd", 0);
                    //LMultiData salesOrdItemTemp = (LMultiData)salesOrdRestData.get("salesOrdItem", 0);
                    backOrdYn = salesOrdRestData.getString("backOrdYn");
                }

                if(ordReasonCnt > 0){
                    processSalesOrdCustCmpt(salesOrd);
                }
            }
            
            //if(true) throw new LSysException("LEEPJ>>>>>>>>>>>>>>>>>>>>>>>>>ERROR");
            
            /* 포워딩 실행오더를 분배하는 메소드 : 제지, 아트원,  직수출오더 부킹정보 자동생성 2015-03-30 국내외수출판매정상출고운송포워딩(5083)
             * return : void
             * */
            /**
            if((salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP) || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
            	&& salesOrd.getString("ordTypeCd").equals("5083")
            	&& salesOrd.getString("expTypeCd").equals("01")){
                LData divideData = new LData();
                divideData.set("LCompoundDao", compoundDao);
                divideData.setString("trmsSctnCd", "C");
                divideData.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
                divideData.setString("bookingNo", salesOrd.getString("bookingNo"));
                divideData.setString("regrId", salesOrd.getString("regrId"));
                divideData.setString("mdfrId", salesOrd.getString("mdfrId"));
                divideData.setString("ifYn", "X");
                IOrdDivMngt ordDivMngt  = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                ordDivMngt.divideFwdEoHP(divideData);
            }**/

            /* 포워딩 실행오더를 분배하는 메소드 : 삼성토탈
             * return : void
             * */
            if("IF_STC_OM_ShippingRequest".equals(salesOrd.getString("ifId"))){
                LData divideData = new LData();
                divideData.set("LCompoundDao", compoundDao);
                divideData.setString("trmsSctnCd", "C");
                divideData.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
                divideData.setString("bookingNo", salesOrd.getString("bookingNo"));
                divideData.setString("regrId", salesOrd.getString("regrId"));
                divideData.setString("mdfrId", salesOrd.getString("mdfrId"));
                IOrdDivMngt ordDivMngt  = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                ordDivMngt.divideFwdEo(divideData);
            }

            /* 포워딩 실행오더를 분배하는 메소드 : 제일모직
             * return : void
             * */
            if("IF_CII_OM_ShippingRequest".equals(salesOrd.getString("ifId"))){
                LData divideData = new LData();
                divideData.set("LCompoundDao", compoundDao);
                divideData.setString("trmsSctnCd", "C");
                divideData.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
                divideData.setString("bookingNo", salesOrd.getString("bookingNo"));
                divideData.setString("custCd", salesOrd.getString("custCd"));
                divideData.setString("regrId", salesOrd.getString("regrId"));
                divideData.setString("mdfrId", salesOrd.getString("mdfrId"));
                //2015-01-22 제일모직 전자재료 부문 SDI 로직으로  변경
                divideData.setString("divCode", salesOrd.getString("col23"));
                IOrdDivMngt ordDivMngt  = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                ordDivMngt.divideFwdEo(divideData);
            }
            
            /* 포워딩 실행오더를 분배하는 메소드 : 삼성SMD
             * return : void
             * */
            /*
            if("IF_SMD_OM_ShippingRequest".equals(salesOrd.getString("ifId"))){
                LData divideData = new LData();
                divideData.set("LCompoundDao", compoundDao);
                divideData.setString("trmsSctnCd", "C");
                divideData.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
                //divideData.setString("bookingNo", salesOrd.getString("bookingNo"));
                divideData.setString("regrId", salesOrd.getString("regrId"));
                divideData.setString("mdfrId", salesOrd.getString("mdfrId"));
                IOrdDivMngt ordDivMngt  = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                ordDivMngt.divideFwdEo(divideData);
            }
            */

            //지류유통 SMS 발송 2013-02-22
            if("IF_HPL_OM_SalesOrder".equals(salesOrd.getString("ifId"))
                || "IF_HPL_OM_STO".equals(salesOrd.getString("ifId"))
                || "IF_HPL_OM_PO".equals(salesOrd.getString("ifId"))){

                sendHplCustOrdStatSms(salesOrd);
            }


            salesOrd.set("LCompoundDao", compoundDao);
            setSalesOrdHistory(salesOrd);

            retVal.setString("salesOrdNo", salesOrdNo);
            retVal.setString("backOrdYn",backOrdYn);

            return retVal;

        } catch (LBizException be) {
            inputData.setString("errCd", "");
            inputData.setString("errConts", be.getMessage());
            laf.application.dao.LCommonDao dao3 = new laf.application.dao.LCommonDao();
            dao3.executeProcedure("cud/om/tb_om02001/callHistoryPrc", inputData);

            throw be;
        } catch (Exception se) {

            inputData.setString("errCd", "");
            inputData.setString("errConts", se.getMessage());
            laf.application.dao.LCommonDao dao3 = new laf.application.dao.LCommonDao();
            dao3.executeProcedure("cud/om/tb_om02001/callHistoryPrc", inputData);
            LLog.err.println(  this.getClass().getName() + "." + "createSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }


    /* 9. 오더관리실행부서세팅
       if 출발지 작업장 유형이 센터인 경우 -> 출발지 작업장에 매핑된 부서
       else
          if 도착지 작업장 유형이 센터인 경우 -> 도착지 작업장에 매핑된 부서
          else
             계약서에 정의된 오더 부서
          end if
       end if
       부서가 없으면 오류
       input parameter : dptArCd,arvArCd,dptArTypeCd,arvArTypeCd
       output parameter : ordMngtExceDeptCd, result, message
     */
    private LData setOrdMngtExceDeptCd(LData inputData) throws LException {
        try{
            LLog.debug.println("inputData : "+inputData);

            String dptArCd = "";
            String arvArCd = "";
            String dptArKind = "";
            String arvArKind = "";
            String dptArDept = "";
            String arvArDept = "";
            LData tempData = new LData();
            LData dptArCdData = null;
            LData arvArCdData = null;
            laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
            dptArCd = inputData.getString("dptArCd") == null ? "" : inputData.getString("dptArCd"); //출발지코드
            arvArCd = inputData.getString("arvArCd") == null ? "" : inputData.getString("arvArCd"); //도착지코드
            if(!dptArCd.equals("")){
                tempData.setString("code", dptArCd);
                tempData.setString("workSctnCd", inputData.getString("dptArTypeCd"));
                tempData.setString("ptnCd", inputData.getString("rptCustCd"));
                dptArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
                LLog.debug.println("************dptArCdData : "+dptArCdData);
            }
            if(!arvArCd.equals("")){
                tempData.setString("code", arvArCd);
                tempData.setString("workSctnCd", inputData.getString("arvArTypeCd"));
                tempData.setString("ptnCd", inputData.getString("rptCustCd"));
                arvArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
                LLog.debug.println("************arvArCdData : "+arvArCdData);
            }
            
            /*
            LMultiData ctrtTmp      = retrieveCustOrdTypeEachCtrt(inputData);
            LMultiData ctrtData     = (LMultiData)ctrtTmp.get("OBJECT_TO_GDRs",0);

            String expImpDomSctnCd = inputData.getString("expImpDomSctnCd"); //수출입내수구분
            if(expImpDomSctnCd==null || expImpDomSctnCd.equals("")){
                inputData.setString("result", "E");
                inputData.setString("message", "오더관리실행부서 세팅오류:수출입내수구분항목누락");
                return inputData;
            }
            String rptCustCd = inputData.getString("rptCustCd"); //대표고객
            if(rptCustCd==null || rptCustCd.equals("")){
                inputData.setString("result", "E");
                inputData.setString("message", "오더관리실행부서 세팅오류:대표고객항목누락");
                return inputData;
            }
            String ordChrgDeptCd = ""; //오더담당부서코드

            if(ctrtData.getDataCount()==1){
                ordChrgDeptCd = ctrtData.getLData(0).getString("ordChrgDeptCd");
            }else if(ctrtData.getDataCount() > 1){}
            else{
                inputData.setString("result", "E");
                inputData.setString("message", "고객오더유형별계약조회오류 세팅오류:");
                return inputData;

            }
			*/
            String rptCustCd = inputData.getString("rptCustCd"); //대표고객
            String expImpDomSctnCd = inputData.getString("expImpDomSctnCd"); //수출입내수구분
            String ordChrgDeptCd = ""; //오더담당부서코드
            
            if(dptArCdData != null && !dptArCdData.isEmpty()){
                dptArKind = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
                dptArCd = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
                /*
                if(dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) || dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO) || dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_PORT)){
                    LData param = new LData();
                    param.setString("workPlCd", dptArCd);
                    param.setString("corpCd", OmConstants.COMMON_CORP_CD);
                    LData dept = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveOrdChrgDeptCd", param);
                    dptArDept = dept.getString("ordChrgDeptCd") == null ? "" : dept.getString("ordChrgDeptCd");

                } else {
                    dptArDept = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
                }
                */

                //작업장 구분코드에 관계없이 오더담당부서로 오더실행부서코드로 세팅
                LData param = new LData();
                param.setString("workPlCd", dptArCd);
                if(inputData.getString("ptnCd") != null
                   && OmConstants.CUST_CO_CD_SD.equals(inputData.getString("rptCustCd"))){
                    param.setString("corpCd", OmConstants.CUST_CO_CD_CHINA);
                }else{
                    param.setString("corpCd", OmConstants.COMMON_CORP_CD);
                }

                LData dept = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveOrdChrgDeptCd", param);
                dptArDept = dept.getString("ordChrgDeptCd") == null ? "" : dept.getString("ordChrgDeptCd");

            }
            if(arvArCdData != null && !arvArCdData.isEmpty()){
                arvArKind = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
                arvArCd = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");

                /*
                if(arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) || arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO) || arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_PORT)){
                    LData param = new LData();
                    param.setString("workPlCd", arvArCd);
                    param.setString("corpCd", OmConstants.COMMON_CORP_CD);
                    LData dept = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveOrdChrgDeptCd", param);
                    arvArDept = dept.getString("ordChrgDeptCd") == null ? "" : dept.getString("ordChrgDeptCd");

                } else {
                    arvArDept = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
                }
                */

                // 작업장 구분코드에 관계없이 오더담당부서로 오더실행부서코드로 세팅
                LData param = new LData();
                param.setString("workPlCd", arvArCd);
                if(inputData.getString("ptnCd") != null
                   && OmConstants.CUST_CO_CD_SD.equals(inputData.getString("rptCustCd"))){
                    param.setString("corpCd", OmConstants.CUST_CO_CD_CHINA);
                }else{
                    param.setString("corpCd", OmConstants.COMMON_CORP_CD);
                }
                LData dept = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveOrdChrgDeptCd", param);
                arvArDept = dept.getString("ordChrgDeptCd") == null ? "" : dept.getString("ordChrgDeptCd");

            }

            if(expImpDomSctnCd.equals(OmConstants.EXP_IMP_DOMESTIC)){ //내수
                //오더유형에 물류서비스구분에 출고/출고운송/출고운송입고면 출발지
                //입고/운송입고면 도착지
                //운송이면  출도착지 유형에 따라서...
                LData ordType = dao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", inputData);
                String logisSvcSctnCd = "";
                if(ordType != null && ordType.getString("logisSvcSctnCd") != null && !ordType.getString("logisSvcSctnCd").equals("")) {
                    logisSvcSctnCd = ordType.getString("logisSvcSctnCd");
                }

                if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)
                ) {
                    inputData.setString("ordMngtExceDeptCd", dptArDept);
                    inputData.setString("tranPlanCntrCd",dptArCd);

                } else if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT_TRANS)
                ) {
                    inputData.setString("ordMngtExceDeptCd", arvArDept);
                    inputData.setString("tranPlanCntrCd",arvArCd);
                } else {
//                  LLog.debug.println("*******dptArKind   !!!!! *****"+dptArKind);

                    if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SC)){
                        //inputData.setString("ordMngtExceDeptCd", "0000151050"); // 부산센터
                    	inputData.setString("ordMngtExceDeptCd", "0000151030"); // 부산센터 => 글로벌운영팀 2015.02.05
                        inputData.setString("tranPlanCntrCd","4020"); // 성창부산
                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PU)){
                        inputData.setString("ordMngtExceDeptCd", "0000151110"); // 퓨리나
                        inputData.setString("tranPlanCntrCd","1800"); // 퓨리나
                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SP)){
                        inputData.setString("ordMngtExceDeptCd", "0000008001"); // 시노펙스
                        inputData.setString("tranPlanCntrCd","8001"); // 시노펙스

                    }else if(dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) || dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO) || dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_PORT)){
                        if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_LI)){//LIG Nex1
                            inputData.setString("ordMngtExceDeptCd", "0000HS2930"); // LIG NEX1
                            inputData.setString("tranPlanCntrCd","2930"); // 이천데포
                        }else{
                            inputData.setString("ordMngtExceDeptCd", dptArDept);
                            inputData.setString("tranPlanCntrCd",dptArCd);
                        }
                    }else if(arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) || arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO) || arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_PORT)){
                        if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_LI)){//LIG Nex1
                            inputData.setString("ordMngtExceDeptCd", "0000HS2930"); // LIG NEX1
                            inputData.setString("tranPlanCntrCd","2930"); // LIG NEX1
                        }else{
                            inputData.setString("ordMngtExceDeptCd", arvArDept);
                            inputData.setString("tranPlanCntrCd",arvArCd);
                        }

                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)){
                        inputData.setString("ordMngtExceDeptCd", "0000151180"); // 덕평물류센터
                        inputData.setString("tranPlanCntrCd","2900"); //덕평물류센터
                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PG)){
                        inputData.setString("ordMngtExceDeptCd", "0000300262"); // 부산센터(울산데포)
                        inputData.setString("tranPlanCntrCd","4220"); // PPG부산
                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_LI)){
                        inputData.setString("ordMngtExceDeptCd", "0000HS2930"); // LIG NEX1
                        inputData.setString("tranPlanCntrCd","2930"); // LIG NEX1

                    }else{
                        inputData.setString("ordMngtExceDeptCd", ordChrgDeptCd);
                        inputData.setString("tranPlanCntrCd",""); //추후 처리(계약서에 지정된 센터)
                    }
                }
            }else if(expImpDomSctnCd.equals(OmConstants.EXP_IMP_EXPORT)){ //수출
                if(rptCustCd.equals(OmConstants.CUST_CO_CD_NC)){// 노스케스코그
                    if(inputData.getString("ordTypeCd") != null
                            && (inputData.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_2058)
                                    || inputData.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_2060) )) {
                        inputData.setString("ordMngtExceDeptCd", "0000HS1310"); //청원센터
                        inputData.setString("tranPlanCntrCd","1310");           //청원데포
                    } else {
                        inputData.setString("ordMngtExceDeptCd", "0000160050"); //전주센터
                        inputData.setString("tranPlanCntrCd","1000");           //전주센터
                    }

                    // 전주, 청원 통합시  오더실행부서, 배차센터 세팅 - 통합시 사용됨
                    if(dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) || dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO)){
                        inputData.setString("ordMngtExceDeptCd", dptArDept);
                        inputData.setString("tranPlanCntrCd",dptArCd);
                    }else{
                        inputData.setString("ordMngtExceDeptCd", "0000160050"); //전주센터
                        inputData.setString("tranPlanCntrCd","1000");           //전주센터
                    }

                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_HH)){// 한솔홈데크
                    inputData.setString("ordMngtExceDeptCd", "0000160090"); //익산센터
                    inputData.setString("tranPlanCntrCd","1400");           //익산센터
                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_HP)){ // 한솔제지
                    if(dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) || dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO)){
                        inputData.setString("ordMngtExceDeptCd", dptArDept);
                        inputData.setString("tranPlanCntrCd",dptArCd);
                    }else{
                        //inputData.setString("ordMngtExceDeptCd", "0000151050"); //부산센터
                        inputData.setString("ordMngtExceDeptCd", "0000151030"); // 부산센터 => 글로벌운영팀 2015.02.05
                        inputData.setString("tranPlanCntrCd","4000");           //부산센터
                    }
                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_AT)){ // 아트원제지
                    if(dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) || dptArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO)){
                        inputData.setString("ordMngtExceDeptCd", dptArDept);
                        inputData.setString("tranPlanCntrCd",dptArCd);
                    }else{
                        inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 : 0000160030 -> 0000151030, cys. 2014.1.1
                        inputData.setString("ordMngtFwdDeptCd",  "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                        inputData.setString("ordMngtFwdOfcrId",  "20100084");   //이진현
                        inputData.setString("tranPlanCntrCd",    "4000");           //부산센터
                    }
                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_FC)){ // 삼성정밀화학
                    inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                    inputData.setString("ordMngtFwdDeptCd",  "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                    inputData.setString("ordMngtFwdOfcrId",  "20060003");   //김경아
                    inputData.setString("tranPlanCntrCd",    "4000");       //부산센터
                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_CI)){ // 제일모직
                    inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                    inputData.setString("ordMngtFwdDeptCd",  "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                    inputData.setString("ordMngtFwdOfcrId",  "20070385");   //이민영
                    inputData.setString("tranPlanCntrCd",    "4000");       //부산센터
                }else if(rptCustCd.equals("E1011") && inputData.getString("col23").equals("J120")){ // 2015-01-22 
                    inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                    inputData.setString("ordMngtFwdDeptCd",  "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                    inputData.setString("ordMngtFwdOfcrId",  "20070385");   //이민영
                    inputData.setString("tranPlanCntrCd",    "4000");       //부산센터
                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_MS)){      // 삼성매디슨
                    inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1
                    inputData.setString("ordMngtFwdDeptCd",  "0000151030"); //글로벌운영팀 0000160030 -> 0000151030, cys. 2014.1.1

                    String cargoFormCd = inputData.getString("plantCd")==null ? "" : inputData.getString("plantCd");
                    if("X01".equals(cargoFormCd)){//항공
                        inputData.setString("ordMngtFwdOfcrId",  "20070324");   //고진구
                        inputData.setString("tranPlanCntrCd",    "KRINC");      //인천항
                    }else if ("X02".equals(cargoFormCd)){//해상
                        inputData.setString("ordMngtFwdOfcrId",  "20100196");   //전세영
                        inputData.setString("tranPlanCntrCd",    "4000");       //인천항
                    }

                }else{
                    //inputData.setString("ordMngtExceDeptCd", "0000151050"); //부산센터
                    inputData.setString("ordMngtExceDeptCd", "0000151030"); // 부산센터 => 글로벌운영팀 2015.02.05
                    inputData.setString("tranPlanCntrCd","4000");           //부산센터
                }
            }else if(expImpDomSctnCd.equals(OmConstants.EXP_IMP_INCOME)){ //수입
                String ordTypeCd = inputData.getString("ordTypeCd"); //오더유형코드
                if(ordTypeCd==null || ordTypeCd.equals("")){
                    inputData.setString("result", "E");
                    inputData.setString("message", "오더관리실행부서 세팅오류:오더유형코드항목누락");
                    return inputData;
                }

                if(rptCustCd.equals(OmConstants.CUST_CO_CD_FC)){ // 삼성정밀화학
                    inputData.setString("ordMngtFwdOfcrId",  "20100196");   //전세영
                }

                if(rptCustCd.equals(OmConstants.CUST_CO_CD_MS)){      // 삼성매디슨
                    String plantCd = inputData.getString("plantCd")==null ? "" : inputData.getString("plantCd");
                    if("X01".equals(plantCd)){ // 항공
                        inputData.setString("ordMngtFwdOfcrId",  "20120010");   //서병규
                    }else if ("X02".equals(plantCd)){ //해상
                        inputData.setString("ordMngtFwdOfcrId",  "20110340");   //김현기
                    }
                }

                tempData.setString("ordTypeCd", ordTypeCd);
                LData returnData = dao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdType", tempData);
                String logisSvcSctnCd = returnData.getString("logisSvcSctnCd");  //물류서비스구분

                if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT)){ //입고
                    String cargoFormCd = inputData.getString("cargoFormCd"); //화물형태코드
                    if(cargoFormCd==null || cargoFormCd.equals("")){
                        inputData.setString("result", "E");
                        inputData.setString("message", "오더관리실행부서 세팅오류:화물형태코드항목누락");
                        return inputData;
                    }
                    if(cargoFormCd.equals(OmConstants.CARGO_FORM_CONTAINER)){
                        if(rptCustCd.equals(OmConstants.CUST_CO_CD_NC)){// 노스케스코그
                            if(arvArCd.equals("KRINC")){//인천항
                                inputData.setString("ordMngtExceDeptCd", "0000160120"); //인천센터
                                inputData.setString("tranPlanCntrCd","");
                            }else{
                                inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 : 0000160030 -> 0000151030, cys. 2014.1.1
                                inputData.setString("tranPlanCntrCd","");
                            }
                        }else{
                            inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 : 0000160030 -> 0000151030, cys. 2014.1.1
                            inputData.setString("tranPlanCntrCd","");
                        }
                    }else if(cargoFormCd.equals(OmConstants.CARGO_FORM_BULK)){
                        if(arvArCd.equals("KRINC")){ //인천항
                            inputData.setString("ordMngtExceDeptCd", "0000160120"); //인천센터
                            inputData.setString("tranPlanCntrCd","");
                        }else if(arvArCd.equals("KRKUV")){//군산항
                            inputData.setString("ordMngtExceDeptCd", "0000151170"); //군산지점 : 0000160040 -> 0000151170 (13.12.27)
                            inputData.setString("tranPlanCntrCd","");
                        }else if(arvArCd.equals("KRKWU")){//Gwangju warehouse
                            inputData.setString("ordMngtExceDeptCd", "0000151070"); //수지물류센터
                            inputData.setString("tranPlanCntrCd","");
                        }else{
                            inputData.setString("ordMngtExceDeptCd", "0000151030"); //글로벌운영팀 : 0000160030 -> 0000151030, cys. 2014.1.1
                            inputData.setString("tranPlanCntrCd","");
                        }
                    }
                }else if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)
                        ||logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)
                        ||logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_TRANS)
                        ||logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)){ //출고,출고운송,운송,출고운송입고
                    if(dptArCd.equals("KRINC")){ //인천항
                        inputData.setString("ordMngtExceDeptCd", "0000160120"); //인천센터
                        inputData.setString("tranPlanCntrCd","KRINC"); //인천센터
                    }else if(dptArCd.equals("5400")){//평택항
                        inputData.setString("ordMngtExceDeptCd", "0000160120"); //인천센터
                        inputData.setString("tranPlanCntrCd","5400");//평택항
                    }else if(dptArCd.equals("KRKUV")){//군산항
                    	//2015-10-21 전주페이퍼, 군산항 , 컨테이너인 경우에는 오더담당부서및 운송센터 전주로 세팅 변경 - CHG0037447
                    	String exceDeptCd1 = StringUtil.isNull(inputData.getString("ordMngtExceDeptCd"));
                    	String ordTypeCd1 = StringUtil.isNull(inputData.getString("ordTypeCd"));
                    	if(rptCustCd.equals(OmConstants.CUST_CO_CD_NC) && exceDeptCd1.equals("160050") && ordTypeCd1.equals("3079")){// 전주페이퍼
                    		inputData.setString("ordMngtExceDeptCd", "0000160050"); //전주센터
	                        inputData.setString("tranPlanCntrCd","1000"); //전주센터
                    	}
                    	else {
                    		//inputData.setString("ordMngtExceDeptCd", "0000160040");   //군산지점
	                        inputData.setString("ordMngtExceDeptCd", "0000151170"); //군산지점
	                        inputData.setString("tranPlanCntrCd","KRKUV");//군산항
                    	}
                    }else if(dptArCd.equals("KRCHG")){//장항항
                        //inputData.setString("ordMngtExceDeptCd", "0000160040");   //군산지점
                        inputData.setString("ordMngtExceDeptCd", "0000151170"); //군산지점
                        inputData.setString("tranPlanCntrCd","KRCHG");//장항항
                    }else{
                        if(rptCustCd.equals(OmConstants.CUST_CO_CD_NC)){// 전주페이퍼
                            if((dptArCd.equals("KRPUS") || dptArCd.equals("KRKAN")|| dptArCd.equals("KRPUN")) && arvArCd.equals("1310")){
                                inputData.setString("ordMngtExceDeptCd", "0000HS1310"); //청원데포
                                inputData.setString("tranPlanCntrCd","1310"); //청원데포
                            }else{
                                inputData.setString("ordMngtExceDeptCd", "0000160050"); //전주센터
                                inputData.setString("tranPlanCntrCd","1000"); //전주센터
                            }
                        }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_HH)
                                || rptCustCd.equals(OmConstants.CUST_CO_CD_HP)
                                || ("Y".equals(ART_YN) && rptCustCd.equals(OmConstants.CUST_CO_CD_AT)) ){

                            //LLog.debug.println(  "LEEPJ>>>>>rptCustCd>>>>>>" + rptCustCd);
                            //LLog.debug.println(  "LEEPJ>>>>>arvArKind>>>>>>" + arvArKind);
                            //LLog.debug.println(  "LEEPJ tranPlanCntrCd >>>>>inputData>>>>>>" + inputData);

                            if(arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR) ||arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO)){
                                //if( rptCustCd.equals(OmConstants.CUST_CO_CD_HP) && arvArCd.equals("5500") ) {
                                // 2013-05-16 제지이고 3058(조달출고운송입고) 장항항및 부산CFS 수입오더인 경우
                                if( rptCustCd.equals(OmConstants.CUST_CO_CD_HP) && "3058".equals(inputData.getString("ordTypeCd"))
                                     || ("Y".equals(ART_YN) && rptCustCd.equals(OmConstants.CUST_CO_CD_AT)
//                                           && ("3058".equals(inputData.getString("ordTypeCd")) || "3079".equals(inputData.getString("ordTypeCd"))) )
                                         && "3058".equals(inputData.getString("ordTypeCd")) )
                                ) {
                                    //inputData.setString("ordMngtExceDeptCd", "0000151050");   //부산센터
                                    //inputData.setString("tranPlanCntrCd", dptArCd);           //부산항
                                    inputData.setString("ordMngtExceDeptCd", dptArDept);
                                    inputData.setString("tranPlanCntrCd",dptArCd);
                                }
                                else {
                                    inputData.setString("ordMngtExceDeptCd", arvArDept);
                                    inputData.setString("tranPlanCntrCd",arvArCd);
                                }
                            }else{
//                               2013-05-16제지이고 3058(조달출고운송입고) 장항항및 부산CFS 수입오더인 경우

//                              if( rptCustCd.equals(OmConstants.CUST_CO_CD_HP) && arvArCd.equals("5500") ) {
                                // 2013-05-16 제지이고 3058(조달출고운송입고) 장항항및 부산CFS 수입오더인 경우
                                if( (rptCustCd.equals(OmConstants.CUST_CO_CD_HP) && "3058".equals(inputData.getString("ordTypeCd")))
                                        || (rptCustCd.equals(OmConstants.CUST_CO_CD_AT) && "3058".equals(inputData.getString("ordTypeCd")))
                                  ) {
                                    inputData.setString("ordMngtExceDeptCd", dptArDept);
                                    inputData.setString("tranPlanCntrCd",dptArCd);
                                }
                                else {
//                                  inputData.setString("ordMngtExceDeptCd", "0000160050"); //전주센터
//                                  inputData.setString("tranPlanCntrCd","1000"); //전주센터
                                    //inputData.setString("ordMngtExceDeptCd", "0000151050"); //부산센터
                                    inputData.setString("ordMngtExceDeptCd", "0000151030"); // 부산센터 => 글로벌운영팀 2015.02.05
                                    inputData.setString("tranPlanCntrCd","4000");           //부산센터
                                }

                                //LLog.debug.println(  "LEEPJ>>>>>2 arvArDept>>>>>>");
                            }

                            //LLog.debug.println(  "LEEPJ>>>>>INPUT>>>>>>" + inputData);
                        }else if( "N".equals(ART_YN) && rptCustCd.equals(OmConstants.CUST_CO_CD_AT)){
                            inputData.setString("ordMngtExceDeptCd", arvArDept);
                            inputData.setString("tranPlanCntrCd",arvArCd);
                        }else{
                            if(arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_CNTR)||arvArKind.equals(OmConstants.WORK_PL_SCTN_CD_DEPO)){
                                inputData.setString("ordMngtExceDeptCd", arvArDept);
                                inputData.setString("tranPlanCntrCd",arvArCd);
                            }else{
                                //inputData.setString("ordMngtExceDeptCd", "0000151050"); //부산센터
                                inputData.setString("ordMngtExceDeptCd", "0000151030"); // 부산센터 => 글로벌운영팀 2015.02.05
                                inputData.setString("tranPlanCntrCd","4000");           //부산센터
                            }
                        }
                    }
                }else if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_15)
                        ||logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_20)
                        ||logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_21)){ //포워딩,포워딩운송,포워딩운송입고
                    if(dptArCd.equals("KRKUV")){//군산항
                        //inputData.setString("ordMngtExceDeptCd", "0000160040");   //군산지점
                        inputData.setString("ordMngtExceDeptCd", "0000151170"); //군산지점
                        inputData.setString("tranPlanCntrCd","KRKUV");//군산항
                    }else{
                        //inputData.setString("ordMngtExceDeptCd", "0000151050"); //부산센터
                        inputData.setString("ordMngtExceDeptCd", "0000151030"); // 부산센터 => 글로벌운영팀 2015.02.05
                        inputData.setString("tranPlanCntrCd","4000");           //부산센터
                    }
                }
            }

            if(inputData.getString("ordMngtExceDeptCd")==null || inputData.getString("ordMngtExceDeptCd").equals("")){
                inputData.setString("result", "E");
                inputData.setString("message", "오더관리실행부서 세팅오류:");
            }else{
                inputData.setString("result", "S");
            }
            return inputData;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
        	LLog.err.println(  this.getClass().getName() + "." + "setOrdMngtExceDeptCd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
    /**
     * 내수 판매오더 실행관리 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveSalesOrdPartCmptDtl(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{

            LMultiData result       = dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdPartCmptListBasic", inputData);
            LMultiData partCmptData = (LMultiData)result.get("OBJECT_TO_GDRs", 0);
            LLog.debug.println("\npartCmptData\n"+partCmptData);
            if( partCmptData.getDataCount() == 0) {
                throw new LBizException("해당 오더번호가 없거나 Partial완료대상 오더가 아닙니다.");
            }

            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtItemList", inputData));
            dataHolder.add("IN_DS3", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdPrclTitle", inputData));
            dataHolder.add("IN_DS4", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtItemPrclTitle", inputData));
            dataHolder.add("IN_DS5", dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemRslt", inputData));
            return dataHolder;

        } catch( LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveDomSalesExceMngt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
    /* 판매오더 라인별 부분완료  - 인터페이스(지류유통)
     *
     * (non-Javadoc)
     * @see hsni.om.om02.salesOrdMngt.pbc.ISalesOrdMngt#updateSalesOrdPartCmpt(laf.support.collection.LMultiData)
     */

    public LData updateIfSalesOrdPartCmpt(LData inputData) throws LException {

        try{

            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);

//          LLog.debug.println("\nordData\n"+ordData);
//          LLog.debug.println("\nitemData\n"+itemData);
//          LLog.debug.println("\ninput\n"+input);

            LData  ordData      = null;

            // 오더사유코드
            String ordReasonCd  = null;

            ordData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", inputData);


            LMultiData updData   = new LMultiData();
            LData      paramData = new LData();
//          CompDaoUtil.deliverLCompoundDao(inputData, paramData);


            dao.add("cud/om/tb_om02002/updateSalesOrdItemPartCmptReason", inputData);
            dao.executeUpdate();


            paramData.setString("salesOrdCmptSctnCd", OmConstants.SALES_ORD_CMPT_SCTN_CD_PART);
            paramData.setString("regrId"    , "CSN_IF");
            paramData.setString("mdfrId"    , "CSN_IF");

            processSalesOrdAutoCmpt(paramData);


            //판매오더작업상태
            changeSalesOrdStat(paramData);


            // 대기오더 분배가 완료되었는지 여부를 조회
            LData result1 = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", paramData);
            String backCmptYn = "Y";
            if(result1.getInt("cnt") == 0) {
                backCmptYn = "N";
            }

            // 대기오더분배가 완료되었으면 실행
            if(backCmptYn.equals("N")) {
                paramData.setString("backOrdYn", "N");
                dao.add("cud/om/tb_om02001/changeBackOrdStat", paramData);
                dao.executeUpdate();
            }

            //조회조건 : 판매오더번호, 작업경로순번, 전송구분코드

            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            LMultiData workRouteList = new LMultiData();
            LData temp = null;
            for(int i = 0; i < updData.getDataCount(); i++){
                LData lData = updData.getLData(i);

                LMultiData result = dao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", lData);

                if(result != null && result.getDataCount() > 0) {
                    for(int j = 0; j < result.getDataCount(); j++) {
                        temp = result.getLData(j);
                        if(workRouteList.getDataCount() > 0) {

                            boolean exist = false;
                            for(int z=0; z < workRouteList.getDataCount(); z++) {
                                if(workRouteList.getString("salesOrdNo"  , z).equals(temp.getString("salesOrdNo"))   &&
                                   workRouteList.getString("workRouteSeq", z).equals(temp.getString("workRouteSeq")) &&
                                   workRouteList.getString("lineNo"      , z).equals(temp.getString("lineNo"))
                                ) {
                                    exist = true;
                                    break;
                                }
                            }

                            if(!exist) {
                                workRouteList.addLData(temp);
                            }
                        } else {
                            workRouteList.addLData(temp);
                        }
                    }
                }

            }

            if(ordData != null
                    && ((ordData.getString("custOrdTypeCd") != null && !ordData.getString("custOrdTypeCd").equals(""))
                            || (ordData.getString("custMoveTypeCd") != null && !ordData.getString("custMoveTypeCd").equals("")) ) ) {
                LData trmsData = dao.executeQueryForSingle("select/om/om02/custCdMpng/retrievePartCmptTrmsSctn", ordData);
                if(trmsData.getString("partCmptTrmsSctnCd") != null     &&
                   !"".equals(trmsData.getString("partCmptTrmsSctnCd")) &&
                   !"00".equals(trmsData.getString("partCmptTrmsSctnCd"))){

                    //SOReject 정보전송  EAI 전송
                    LMultiData sndData = new LMultiData();
                    for(int i=0; i<updData.getDataCount(); i++){
                        LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrievePartCmptItemInfo", updData.getLData(i));

                        if("N".equals(lData.getString("giTrmsYn"))) {
                            throw new LBizException("미전송된 GI정보가 존재합니다. ");
                        }

                        if("N".equals(lData.getString("grTrmsYn"))) {
                            throw new LBizException("미전송된 GR정보가 존재합니다. ");
                        }

                        lData.setString("partCmptTrmsSctnCd", trmsData.getString("partCmptTrmsSctnCd"));
//                      lData.setString("partCmptTrmsSctnCd", "01");
                        sndData.addLData(lData);
                    }
                    if(sndData.getDataCount() > 0) {
                        //LLog.debug.println("\nsndData \n" + sndData);
                        SalesOrdMngtWSC wsc     = new SalesOrdMngtWSC();
                        LData           eaiData = null;
                        try {
                            eaiData = wsc.transferSalesOrdPartCmpt(sndData);
                        } catch(Throwable t){
                            t.printStackTrace(LLog.debug);
                            throw new LBizException("부분완료 전송중 에러가 발생하였습니다.");
                        }
                        if(eaiData.getString("type").equals("E")) { //실패로넘어오면
                            throw new LBizException(eaiData.getString("message"));
                        }
                    }
                }

            }


            if(workRouteList != null && workRouteList.getDataCount() > 0) {
                for(int j = 0; j < workRouteList.getDataCount(); j++) {
                    LData divData = new LData();
//                  CompDaoUtil.deliverLCompoundDao(inputData, divData);
                    divData.setString("salesOrdNo"  , workRouteList.getString("salesOrdNo", j));
                    divData.setString("workRouteSeq", workRouteList.getString("workRouteSeq", j));
                    divData.setString("lineNo"      , workRouteList.getString("lineNo", j));
                    divData.setString("regrId"      , "CSN_IF");
                    divData.setString("mdfrId"      , "CSN_IF");
                    pbc.divideEoPartial(divData);
                }
            }

            return null;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            se.printStackTrace(LLog.debug);
            LLog.err.println(  this.getClass().getName() + "." + "updateIfSalesOrdPartCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /* 판매오더 부분완료 상세 - 인터페이스
     *
     * (non-Javadoc)
     * @see hsni.om.om02.salesOrdMngt.pbc.ISalesOrdMngt#updateSalesOrdPartCmpt(laf.support.collection.LMultiData)
     */

    public LMultiData updateSalesOrdPartCmpt(LMultiData inputData) throws LException {

        try{

            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);

            LMultiData itemData = (LMultiData)inputData.get("IN_DS1", 0);
            LData      input    = (LData)inputData.get("INPUT", 0);
            LData      param    = (LData)inputData.get("PARAM", 0);


//          LLog.debug.println("\nordData\n"+ordData);
//          LLog.debug.println("\nitemData\n"+itemData);
//          LLog.debug.println("\ninput\n"+input);

            LData  ordData      = null;

            // 오더사유코드
            String ordReasonCd  = null;

            // 고객으로 통해 부분완료처리된 경우
            if("Y".equals(param.getString("custPartCmptYn"))) {
                ordData     = (LData)inputData.get("IN_DS2", 0);
                ordReasonCd = ordData.getString("ordReasonCd"); // 헤더 기준의 오더사유는 삭제로 처리됨
            } else {
                ordData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", itemData.getLData(0));

                // 아이템별 중복 종결처리 확인
                for(int i=0; i<itemData.getDataCount(); i++){
                    if(itemData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE) {
                        LData item = itemData.getLData(i);
                        if(input != null && input.getString("logisSvcSctnCd") != null && OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT.equals(input.getString("logisSvcSctnCd")) ) {
                            LData rsltData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdPartCmptPossCheck", item);
                            if(rsltData != null && !"Y".equals(rsltData.getString("possCheck")) ) {
                                throw new LBizException("출고실적물량과 입고실적물량이 상이합니다.확인하시기 바랍니다.(라인번호: " + item.getString("lineNo") + ")");
                            }
                        }
                        if(item.getString("ordReasonCd")!=null && !"".equals(item.getString("ordReasonCd"))) {
                            LData itemOldData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdItemInfo", item);
                            LLog.debug.println("ordReasonCd : " + itemOldData.getString("ordReasonCd"));
                            if(itemOldData.getString("ordReasonCd")!=null && !"".equals(itemOldData.getString("ordReasonCd"))){
                                throw new LBizException("이미 종결처리된 아이템이 존재합니다. 다시 조회후 진행하여 주세요.(라인번호 : " + item.getString("lineNo") + ")");
                            }
                        }

                        // 이브자리인 경우 오더종결시 할당실적인 있는경우 오더종결을 할 수 없음
                        if(ordData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||ordData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)){
                            // 할당테이블에 존재유무 체크
                            LData workRouteCnt = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteCountByLineNo", item);
                            if(workRouteCnt != null && workRouteCnt.getInt("cnt") > 0) {
                                throw new LBizException("할당된 내역이 존재하여 오더종결불가 ");
                            }
                        }
                        
                        //2015-09-21 할당및 피킹이력 존재시 오더종결처리 불가....
                        LData pickCnt = dao.executeQueryForSingle("select/om/om02/salesOrd/retrievePickCnt", item);
                        if(pickCnt != null && pickCnt.getInt("cnt") > 0) {
                            throw new LBizException("할당된 내역이 존재하여 오더종결불가 ");
                        }
                        
                        
                        //2014-10-28 페이퍼텍 종결처리 추가   LEEPJ 
                        if(ordData.getString("rptCustCd").equals("P1927")){
                            
                            String hptReasonCdCheck = input.getString("ordReasonCdCheck")==null ? "": input.getString("ordReasonCdCheck");
                            
                            if( !ordData.getString("salesOrdStatCd").equals("2")
                                    && ordData.getString("ordTypeCd") != null // 출고, 출고운송인 경우만
                                    && (ordData.getString("custOrdTypeCd") != null 
                                         && (ordData.getString("custOrdTypeCd").equals("OUT1") 
                                        	 ||ordData.getString("custOrdTypeCd").equals("OUT2")
                                        	 ||ordData.getString("custOrdTypeCd").equals("OUT6")
                                        	 ||ordData.getString("custOrdTypeCd").equals("OUT7")
                                        	 ||ordData.getString("custOrdTypeCd").equals("EXP1")
                                             )
                                        )
                            ){

                                LData workDataTemp = new LData();

                                workDataTemp.setString("workPlCd", ordData.getString("dptArCd"));//출발지로 작업장코드를 얻음

                                LData workData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveWmWorkPlCd", workDataTemp);
                                if(workData.getString("wmWorkPlCd") == null || "".equals(workData.getString("wmWorkPlCd"))) {
                                    throw new LBizException("작업장이 창고관리 대상이 아닙니다..");
                                }

                                workDataTemp.setString("wmWorkPlCd", workData.getString("wmWorkPlCd"));
                                workDataTemp.setString("salesOrdNo", ordData.getString("salesOrdNo"));
                                workDataTemp.setString("salesOrdLineNo", item.getString("lineNo"));
                                LLog.debug.println("\nworkDataTemp\n"+workDataTemp);

                                LData wmsCheck = new LData();
                                wmsCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/callFuncPartCmptInhWmCheck", workDataTemp);

                                if(wmsCheck.getString("wmYn").equals("Y") || wmsCheck.getString("wmYn").equals("X")){
                                    // WM에 실적이 없고 오더종결사유가 "오더납품종료(CSN)" - 01 이면
                                    if(wmsCheck.getString("wmYn").equals("X") && "01".equals(hptReasonCdCheck)){
                                        throw new LBizException("출고실적이 없는경우 납품종료-잔량처리 사유는 사용할 수 없습니다.");
                                    }

                                    // WM에 실적이 있고 오더종결사유가 "오더납품종료(CSN)" - 01 가 아니면
                                    if(wmsCheck.getString("wmYn").equals("Y") && !"01".equals(hptReasonCdCheck)){
                                        throw new LBizException("출고실적 발생시 납품종료-잔량처리  사유를 사용해야 합니다.");
                                    }
                                    
                                    if(wmsCheck.getString("wmYn").equals("X")) {
                                    	LData workRouteCnt = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteCountByLineNo", item);
                                        if(workRouteCnt != null && workRouteCnt.getInt("cnt") > 0) {
                                            throw new LBizException("확정 내역이 존재하여 오더종결불가!!! ");
                                        }
                                    }

                                    LData ivCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/callFuncPartCmptIvCheck", workDataTemp);
                                    // IV에 실적이 없고 오더종결사유가 "오더납품종료(CSN)" - 01 이면
                                    if(ivCheck.getString("ivYn").equals("X") && "01".equals(hptReasonCdCheck)){
                                        throw new LBizException("출고실적이 없는경우 오더납품종료(CSN) 사유는 사용할 수 없습니다.");
                                    }

                                    // IV에 실적이 있고 오더종결사유가 "오더납품종료(CSN)" - 01 가 아니면
                                    if(ivCheck.getString("ivYn").equals("Y") && !"01".equals(hptReasonCdCheck)){
                                        throw new LBizException("출고실적 발생시 오더납품종료(CSN) 사유를 사용해야 합니다.");
                                    }

                                    if(ivCheck.getString("ivYn").equals("N")){
                                        throw new LBizException("통합레이어(IV)에서 아직 전송이 안되었습니다.");
                                    }
                                }else{
                                    throw new LBizException("WMS에서 아직 전송이 안되었습니다.");
                                }

                            }
                        }

                        // 제지인 경우 WM 및 통합Layer 체크 포함  :  판매오더상태코드가 오더생성("02") 이면 체크안함
                        if(ordData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                                || ("Y".equals(ART_YN) && ordData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                        ){ // 제지

                            // SR : 71411, 2009.12.4에 반영 할 예정
                            String checkFlag = input.getString("checkFlag")==null ? "N": input.getString("checkFlag");
                            String ordReasonCdCheck = input.getString("ordReasonCdCheck")==null ? "": input.getString("ordReasonCdCheck");
                            String check01Yn = input.getString("check01Yn")==null ? "": input.getString("check01Yn");

                            if( !ordData.getString("salesOrdStatCd").equals("2")
                                && ordData.getString("ordTypeCd") != null // 출고, 출고운송인 경우만
//                              && (ordData.getString("ordTypeCd").equals("1024") || ordData.getString("ordTypeCd").equals("1026"))){
                                && (ordData.getString("custOrdTypeCd") != null && ordData.getString("custOrdTypeCd").equals("DOOR") )){

                                LData workDataTemp = new LData();

                                workDataTemp.setString("workPlCd", ordData.getString("dptArCd"));//출발지로 작업장코드를 얻음

                                LData workData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveWmWorkPlCd", workDataTemp);
                                if(workData.getString("wmWorkPlCd") == null || "".equals(workData.getString("wmWorkPlCd"))) {
                                    throw new LBizException("작업장이 창고관리 대상이 아닙니다..");
                                }

                                workDataTemp.setString("wmWorkPlCd", workData.getString("wmWorkPlCd"));
                                workDataTemp.setString("salesOrdNo", ordData.getString("salesOrdNo"));
                                workDataTemp.setString("salesOrdLineNo", item.getString("lineNo"));
                                LLog.debug.println("\nworkDataTemp\n"+workDataTemp);

                                LData wmsCheck = new LData();

                                if("Y".equals(OmConstants.INH_YN)){
                                    wmsCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/callFuncPartCmptInhWmCheck", workDataTemp);
                                }else{
                                    wmsCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/callFuncPartCmptWmCheck", workDataTemp);
                                }

                                // SR : 71411로 인하여  2009.12.4에 주석 처리 할 예정
//                              if(wmsCheck.getString("wmYn").equals("Y")){
//                                  LData ivCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/callFuncPartCmptIvCheck", workDataTemp);
//                                  if(ivCheck.getString("ivYn").equals("N")){
//                                      throw new LBizException("통합레이어(IV)에서 아직 전송이 안되었습니다.");
//                                  }
//                              }else{
//                                  throw new LBizException("WMS에서 아직 전송이 안되었습니다.");
//                              }


                                // SR : 71411, 2009.12.4에 반영 할 예정
                                if(wmsCheck.getString("wmYn").equals("Y") || wmsCheck.getString("wmYn").equals("X")){
                                    // WM에 실적이 없고 오더종결사유가 "오더납품종료(CSN)" - 01 이면
                                    //if(wmsCheck.getString("wmYn").equals("X") && "01".equals(ordReasonCdCheck)){
                                    if(wmsCheck.getString("wmYn").equals("X") && "Y".equals(check01Yn)){
                                        throw new LBizException("출고실적이 없는경우 오더납품종료(CSN) 사유는 사용할 수 없습니다.");
                                    }

                                    // WM에 실적이 있고 오더종결사유가 "오더납품종료(CSN)" - 01 가 아니면
                                    //if(wmsCheck.getString("wmYn").equals("Y") && !"01".equals(ordReasonCdCheck)){
                                    if(wmsCheck.getString("wmYn").equals("Y") && !"Y".equals(check01Yn)){
                                        throw new LBizException("출고실적 발생시 오더납품종료(CSN) 사유를 사용해야 합니다.");
                                    }

                                    LData ivCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/callFuncPartCmptIvCheck", workDataTemp);
                                    // IV에 실적이 없고 오더종결사유가 "오더납품종료(CSN)" - 01 이면
                                    //if(ivCheck.getString("ivYn").equals("X") && "01".equals(ordReasonCdCheck)){
                                    if(ivCheck.getString("ivYn").equals("X") && "Y".equals(check01Yn)){
                                        throw new LBizException("출고실적이 없는경우 오더납품종료(CSN) 사유는 사용할 수 없습니다.");
                                    }

                                    // IV에 실적이 있고 오더종결사유가 "오더납품종료(CSN)" - 01 가 아니면
                                    //if(ivCheck.getString("ivYn").equals("Y") && !"01".equals(ordReasonCdCheck)){
                                    if(ivCheck.getString("ivYn").equals("Y") && !"Y".equals(check01Yn)){
                                        throw new LBizException("출고실적 발생시 오더납품종료(CSN) 사유를 사용해야 합니다.");
                                    }

                                    if(ivCheck.getString("ivYn").equals("N")){
                                        throw new LBizException("통합레이어(IV)에서 아직 전송이 안되었습니다.");
                                    }
                                }else{
                                    throw new LBizException("WMS에서 아직 전송이 안되었습니다.");
                                }

                            }
                        }

                    }
                }


            }

            LMultiData updData   = new LMultiData();
            LData      paramData = new LData();
            CompDaoUtil.deliverLCompoundDao(inputData, paramData);

            // 헤더기준의 오더사유는 삭제로 처리됨
            if(ordReasonCd != null && !"".equals(ordReasonCd)) {
                // 오더기준
                ordData.setString("mdfrId", input.getString("mdfrId"));
                for(int i=0; i<itemData.getDataCount(); i++){
                    LData item = itemData.getLData(i);
                    item.setString("mdfrId", input.getString("mdfrId"));
                    item.setString("delYn" , "N");
                    item.setString("addYn" , "N");
                    updData.addLData(item);
                }

                paramData.setString("salesOrdNo"        , ordData.getString("salesOrdNo"));
                paramData.setString("ordReasonCd"       , ordData.getString("ordReasonCd"));
                paramData.setString("regrId"            , input.getString("regrId"));
                paramData.setString("mdfrId"            , input.getString("mdfrId"));
                dao.add("cud/om/tb_om02001/updateSalesOrdDel", paramData);
                dao.executeUpdate();

            } else {

                String addYn = "N"; // 아이템추가여부
                // 아이템기준
                for(int i=0; i<itemData.getDataCount(); i++){
                    LData item = itemData.getLData(i);
                    if(item.getInt("GauceJobType") == GauceDataRow.TB_JOB_UPDATE) {
                        item.setString("mdfrId", input.getString("mdfrId"));
                        item.setString("delYn" , "N");
                        item.setString("addYn" , "N");
                        updData.addLData(item);
                    }

                    // 아이템추가여부 체크
                    if("Y".equals(item.getString("addYn"))) {
                        addYn = "Y";
                    }

                }

                dao.add("cud/om/tb_om02002/updateSalesOrdItemPartCmptReason", updData);
                dao.executeUpdate();

                // 화면으로 통해 부분완료처리된 경우 CO정보를 수정한다.
                if(!"Y".equals(param.getString("custPartCmptYn"))) {
                    dao.add("cud/om/tb_om01002/updateCustOrdItemPartCmptReason", updData);
                    dao.executeUpdate();
                }

                paramData.setString("salesOrdNo", itemData.getString("salesOrdNo",0));
                if("Y".equals(param.getString("custPartCmptYn"))) {
                    paramData.setString("salesOrdCmptSctnCd", OmConstants.SALES_ORD_CMPT_SCTN_CD_CUST);
                }else {
                    paramData.setString("salesOrdCmptSctnCd", OmConstants.SALES_ORD_CMPT_SCTN_CD_PART);
                }
                paramData.setString("regrId"    , input.getString("regrId"));
                paramData.setString("mdfrId"    , input.getString("mdfrId"));

                // 아이템이 추가되지 않은 경우만 완료프로세스를 호출한다.
                if("N".equals(addYn)) {
                    //판매오더완료확인
                    processSalesOrdAutoCmpt(paramData);
                }

                //판매오더작업상태
                changeSalesOrdStat(paramData);


                // 대기오더 분배가 완료되었는지 여부를 조회
                LData result = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", paramData);
                String backCmptYn = "Y";
                if(result.getInt("cnt") == 0) {
                    backCmptYn = "N";
                }

                // 대기오더분배가 완료되었으면 실행
                if(backCmptYn.equals("N")) {
                    paramData.setString("backOrdYn", "N");
                    dao.add("cud/om/tb_om02001/changeBackOrdStat", paramData);
                    dao.executeUpdate();
                }
            }

            // 화면으로 통해 부분완료처리된 경우 이력을 생성한다.
            if(!"Y".equals(param.getString("custPartCmptYn"))) {
                setSalesOrdHistory(paramData);
            }

            //조회조건 : 판매오더번호, 작업경로순번, 전송구분코드

            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            LMultiData workRouteList = new LMultiData();
            LData temp = null;
            for(int i = 0; i < updData.getDataCount(); i++){
                LData lData = updData.getLData(i);

                LMultiData result = dao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", lData);

                if(result != null && result.getDataCount() > 0) {
                    for(int j = 0; j < result.getDataCount(); j++) {
                        temp = result.getLData(j);
                        if(workRouteList.getDataCount() > 0) {

                            boolean exist = false;
                            for(int z=0; z < workRouteList.getDataCount(); z++) {
                                if(workRouteList.getString("salesOrdNo"  , z).equals(temp.getString("salesOrdNo"))   &&
                                   workRouteList.getString("workRouteSeq", z).equals(temp.getString("workRouteSeq")) &&
                                   workRouteList.getString("lineNo"      , z).equals(temp.getString("lineNo"))
                                ) {
                                    exist = true;
                                    break;
                                }
                            }

                            if(!exist) {
                                workRouteList.addLData(temp);
                            }
                        } else {
                            workRouteList.addLData(temp);
                        }
                    }
                }

            }

            if("N".equals(param.getString("custPartCmptYn"))) {
                if(ordData != null
                        && ((ordData.getString("custOrdTypeCd") != null && !ordData.getString("custOrdTypeCd").equals(""))
                                || (ordData.getString("custMoveTypeCd") != null && !ordData.getString("custMoveTypeCd").equals("")) ) ) {
                    LData trmsData = dao.executeQueryForSingle("select/om/om02/custCdMpng/retrievePartCmptTrmsSctn", ordData);
                    if(trmsData.getString("partCmptTrmsSctnCd") != null     &&
                       !"".equals(trmsData.getString("partCmptTrmsSctnCd")) &&
                       !"00".equals(trmsData.getString("partCmptTrmsSctnCd"))){

                        //SOReject 정보전송  EAI 전송
                        LMultiData sndData = new LMultiData();
                        for(int i=0; i<updData.getDataCount(); i++){
                            LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrievePartCmptItemInfo", updData.getLData(i));

                            if("N".equals(lData.getString("giTrmsYn"))) {
                                throw new LBizException("미전송된 GI정보가 존재합니다. ");
                            }

                            if("N".equals(lData.getString("grTrmsYn"))) {
                                throw new LBizException("미전송된 GR정보가 존재합니다. ");
                            }

                            lData.setString("partCmptTrmsSctnCd", trmsData.getString("partCmptTrmsSctnCd"));
    //                      lData.setString("partCmptTrmsSctnCd", "01");
                            sndData.addLData(lData);
                        }
                        if(sndData.getDataCount() > 0) {
                            //LLog.debug.println("\nsndData \n" + sndData);
                            SalesOrdMngtWSC wsc     = new SalesOrdMngtWSC();
                            LData           eaiData = null;
                            try {
                                eaiData = wsc.transferSalesOrdPartCmpt(sndData);
                            } catch(Throwable t){
                                t.printStackTrace(LLog.debug);
                                throw new LBizException("부분완료 전송중 에러가 발생하였습니다.");
                            }
                            if(eaiData.getString("type").equals("E")) { //실패로넘어오면
                                throw new LBizException(eaiData.getString("message"));
                            }
                        }
                    }
                }
            }
          
            if(ordData != null && !(ordData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||ordData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS))) {
                // Shipment 아이템 정보도 삭제한다.
                IWorkRouteMngt workRoutePbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);
                for(int i = 0; i < updData.getDataCount(); i++){
                	LData lData = updData.getLData(i);
                    CompDaoUtil.deliverLCompoundDao(inputData, lData);
                    workRoutePbc.createSendWmShipmentForPartCmpt(lData);
                }
            }
            
            //LLog.debug.println(" workRouteList.getDataCount()>>>>>>>>>>>>>"+workRouteList.getDataCount());
            
            if(workRouteList != null && workRouteList.getDataCount() > 0) {
                for(int j = 0; j < workRouteList.getDataCount(); j++) {
                    LData divData = new LData();
                    CompDaoUtil.deliverLCompoundDao(inputData, divData);
                    divData.setString("salesOrdNo"  , workRouteList.getString("salesOrdNo", j));
                    divData.setString("workRouteSeq", workRouteList.getString("workRouteSeq", j));
                    divData.setString("lineNo"      , workRouteList.getString("lineNo", j));
                    divData.setString("regrId"      , input.getString("regrId"));
                    divData.setString("mdfrId"      , input.getString("mdfrId"));
                    pbc.divideEoPartial(divData);
                }
            }
            
            //if(true)  throw new LBizException("종결 속도확인>>>>>>>>>>>>>>LEEPJ");

            /*
            if(ordData != null && ordData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)) {
                IWorkRouteMngt workRoutePbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);
                for(int i = 0; i < updData.getDataCount(); i++){
                    LData lData = updData.getLData(i);
                    CompDaoUtil.deliverLCompoundDao(inputData, lData);
                    workRoutePbc.createSendWmShipmentForPartCmpt(lData);
                }

            }
            */

            return null;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            se.printStackTrace(LLog.debug);
            LLog.err.println(  this.getClass().getName() + "." + "updateSalesOrdPartCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }


    /* 판매오더 부분완료 상세 - 배치Job 처리 : 제지, 적송, 장항센터, 생성일로 부터 7일이후되도록 종결이 안된 오더
     * 2015-12-02 제지 적송 전센터 확장및 내수 판매오더(입고, 예약, 수출, 수입 제외) 2달기준 미종결오더 처리로직 추가 (CHG0038436)
     * (non-Javadoc)
     * @see
     */

    public void updateSalesOrdBatchPartCmpt() throws LException {
           LData nullData1 = new LData();
           nullData1 = CompDaoUtil.startTransaction(nullData1, false);
           laf.application.dao.LCompoundDao daoAll = CompDaoUtil.getTransaction(nullData1, false);

           LData errConts = new LData();

           nullData1 = CompDaoUtil.startTransaction(nullData1, false);
           laf.application.dao.LCompoundDao dao3 = CompDaoUtil.getTransaction(nullData1, false);

        try{
            LData nullData4 = new LData();
            nullData4 = CompDaoUtil.startTransaction(nullData4, false);
            laf.application.dao.LCompoundDao  dao = CompDaoUtil.getTransaction(nullData4, false);

            LData nullData = new LData();

            String errMsg = "";

            //작업이 실행중이면 skip
            LMultiData chkIng = dao.executeQuery("select/om/om02/salesOrd/retrieveHppJuksongWating", nullData);
            if(chkIng != null && chkIng.getDataCount() > 0) {
                return ;
            }

            nullData = new LData();
            nullData = CompDaoUtil.startTransaction(nullData, false);
            laf.application.dao.LCompoundDao dao1 = CompDaoUtil.getTransaction(nullData, false);

            LMultiData salesOrdList = dao.executeQuery("select/om/om02/salesOrd/retrieveHppPartCmptHeader", nullData);
            for(int x=0; x<salesOrdList.getDataCount(); x++){
                LData salesOrnInfo1 = salesOrdList.getLData(x);
                    LMultiData itemData1 = dao.executeQuery("select/om/om02/salesOrd/retrieveHppPartCmptDetail", salesOrnInfo1);
                    if ( itemData1 != null && itemData1.getDataCount() > 0 ) {
                        for(int i=0; i<itemData1.getDataCount(); i++){
                            LData item1 = itemData1.getLData(i);
                            item1.setString("workSctnCd", "M");

                            try{
                                dao1.add("cud/om/tb_om04010/deleteTbOm04010", item1);
                                dao1.executeUpdate();

                                dao1.add("cud/om/tb_om04010/createTbOm04010", item1);
                                dao1.executeUpdate();

                                dao1.add("cud/om/tb_om04010h/createTbOm04010h", item1);
                                dao1.executeUpdate();

                                dao1.commit();
                            }catch (Exception e) {
                            	LLog.err.println(this.getClass().getName() + "."+ " log make ()" + "=>" + e.getMessage());
                                dao1.rollback();

                                throw new LException(e.getMessage());
                            }
                        }
                    }
            }

            LMultiData WorkingList = dao.executeQuery("select/om/om02/salesOrd/retrieveHppJuksongWorkingList", nullData);
            LLog.debug.println("\nWorkingList\n"+WorkingList);

            for(int j=0; j<WorkingList.getDataCount(); j++){
                LData workOrdInfo = WorkingList.getLData(j);

                LMultiData itemData = dao.executeQuery("select/om/om02/salesOrd/retrieveHppPartCmptDetail", workOrdInfo);
                LLog.debug.println("\nitemData\n"+itemData);

                if ( itemData != null && itemData.getDataCount() > 0 ) {
                    LData  ordData      = null;
                    // 오더사유코드
                    String ordReasonCd  = null; // ord_reason_cd = '01'(오더납품종료)

                    ordData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", itemData.getLData(0));
                    LLog.debug.println("\nordData\n"+ordData);

                    // 아이템별 중복 종결처리 확인
                    for(int i=0; i<itemData.getDataCount(); i++){

                        LData item = itemData.getLData(i);
                        LLog.debug.println("\nitem\n"+item);

                        try{

                            LData rsltData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdPartCmptPossCheck", item);
                            //2015-11-23 적송오더일 경우에만 출고/입고 실적량 비교로직 실행 
                            //if(rsltData != null && !"Y".equals(rsltData.getString("possCheck"))) {
                            if(rsltData != null && !"Y".equals(rsltData.getString("possCheck")) 
                            		&& item.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_DOM_SELL_INPUT)
                            		&& item.getString("salesOrdStatCd").equals("05")
                            		) {
                                errMsg = "출고실적물량과 입고실적물량이 상이";
                                throw new LBizException("출고실적물량과 입고실적물량이 상이합니다.확인하시기 바랍니다.(라인번호: " + item.getString("lineNo") + ")");

                            }
                            if(item.getString("ordReasonCd")!=null && !"".equals(item.getString("ordReasonCd"))) {
                                LData itemOldData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdItemInfo", item);
                                LLog.debug.println("ordReasonCd : " + itemOldData.getString("ordReasonCd"));
                                if(itemOldData.getString("ordReasonCd")!=null && !"".equals(itemOldData.getString("ordReasonCd"))){
                                    errMsg = "이미 종결처리된 아이템이 존재";
                                    throw new LBizException("이미 종결처리된 아이템이 존재합니다. 다시 조회후 진행하여 주세요.(라인번호 : " + item.getString("lineNo") + ")");
                                }
                            }

                            LData      paramData = new LData();
                            paramData.set("LCompoundDao", dao);

                            String addYn = "N"; // 아이템추가여부
                            // 아이템기준

                            item.setString("mdfrId", "batch");
                            item.setString("delYn" , "N");
                            item.setString("addYn" , "N");
                            
                            if( !item.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_DOM_SELL_INPUT)) {
                             	item.setString("ordReasonCd", "36"); //적송이 아닌경우는 36 - 시스템강제종료(제지) 사용
                                //LLog.debug.println("ordReasonCd1111111111111111 \n" + item.getString("ordReasonCd"));
                            }

                            // 아이템추가여부 체크
                            if("Y".equals(item.getString("addYn"))) {
                                addYn = "Y";
                            }

                            dao.add("cud/om/tb_om02002/updateSalesOrdItemPartCmptReason", item);
                            dao.executeUpdate();

                            // 화면으로 통해 부분완료처리된 경우 CO정보를 수정한다.
                            dao.add("cud/om/tb_om01002/updateCustOrdItemPartCmptReason", item);
                            dao.executeUpdate();

                            paramData.setString("salesOrdNo", itemData.getString("salesOrdNo",0));

                            // 완료구분 : 02(Partial완료)
                            paramData.setString("salesOrdCmptSctnCd", OmConstants.SALES_ORD_CMPT_SCTN_CD_PART);

                            paramData.setString("regrId"    , "batch");
                            paramData.setString("mdfrId"    , "batch");

                            // 아이템이 추가되지 않은 경우만 완료프로세스를 호출한다.
                            if("N".equals(addYn)) {
                                //판매오더완료확인
                                processSalesOrdAutoCmpt(paramData);
                            }

                            //판매오더작업상태
                            changeSalesOrdStat(paramData);

                            // 대기오더 분배가 완료되었는지 여부를 조회
                            LData result1 = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", paramData);
                            String backCmptYn = "Y";
                            if(result1.getInt("cnt") == 0) {
                                backCmptYn = "N";
                            }

                            // 대기오더분배가 완료되었으면 실행
                            if(backCmptYn.equals("N")) {
                                paramData.setString("backOrdYn", "N");
                                dao.add("cud/om/tb_om02001/changeBackOrdStat", paramData);
                                dao.executeUpdate();
                            }

                            setSalesOrdHistory(paramData);

                            //조회조건 : 판매오더번호, 작업경로순번, 전송구분코드
                            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
                            LMultiData workRouteList = new LMultiData();
                            LData temp = null;

                            LMultiData result2 = dao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", item);

                            if(result2 != null && result2.getDataCount() > 0) {
                                for(int aa = 0; aa < result2.getDataCount(); aa++) {
                                    temp = result2.getLData(aa);
                                    if(workRouteList.getDataCount() > 0) {
                                        boolean exist = false;
                                        for(int z=0; z < workRouteList.getDataCount(); z++) {
                                            if(workRouteList.getString("salesOrdNo"  , z).equals(temp.getString("salesOrdNo"))   &&
                                               workRouteList.getString("workRouteSeq", z).equals(temp.getString("workRouteSeq")) &&
                                               workRouteList.getString("lineNo"      , z).equals(temp.getString("lineNo"))
                                            ) {
                                                exist = true;
                                                break;
                                            }
                                        }

                                        if(!exist) {
                                            workRouteList.addLData(temp);
                                        }
                                    } else {
                                        workRouteList.addLData(temp);
                                    }
                                }
                            }

                            if(ordData != null
                                        && ((ordData.getString("custOrdTypeCd") != null && !ordData.getString("custOrdTypeCd").equals(""))
                                                || (ordData.getString("custMoveTypeCd") != null && !ordData.getString("custMoveTypeCd").equals("")) ) ) {
                                    LData trmsData = dao.executeQueryForSingle("select/om/om02/custCdMpng/retrievePartCmptTrmsSctn", ordData);
                                    if(trmsData.getString("partCmptTrmsSctnCd") != null     &&
                                       !"".equals(trmsData.getString("partCmptTrmsSctnCd")) &&
                                       !"00".equals(trmsData.getString("partCmptTrmsSctnCd"))){

                                        //SOReject 정보전송  EAI 전송
                                        LMultiData sndData = new LMultiData();
                                        LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrievePartCmptItemInfo", item);
                                        //LLog.debug.println("\nitem \n" + item);
                                        //LLog.debug.println("\nlData \n" + lData);

                                        if("N".equals(lData.getString("giTrmsYn"))) {
                                            errMsg = "미전송된 GI정보가 존재";
                                            throw new LBizException("미전송된 GI정보가 존재합니다. ");
                                        }

                                        if("N".equals(lData.getString("grTrmsYn"))) {
                                            errMsg = "미전송된 GR정보가 존재";
                                            throw new LBizException("미전송된 GR정보가 존재합니다. ");
                                        }

                                        lData.setString("partCmptTrmsSctnCd", trmsData.getString("partCmptTrmsSctnCd"));
                                        sndData.addLData(lData);

                                        if(sndData.getDataCount() > 0) {
                                            //LLog.debug.println("\nsndData \n" + sndData);
                                            SalesOrdMngtWSC wsc     = new SalesOrdMngtWSC();
                                            LData           eaiData = null;
                                            try {
                                                eaiData = wsc.transferSalesOrdPartCmpt(sndData);
                                            } catch(Throwable t){
                                                t.printStackTrace(LLog.debug);
                                                errMsg = "부분완료 전송중 에러가 발생";
                                                throw new LBizException("부분완료 전송중 에러가 발생하였습니다.");
                                            }
                                            if(eaiData.getString("type").equals("E")) { //실패로넘어오면
                                                errMsg = "부분완료 제지오류 리턴 ";
                                                throw new LBizException(eaiData.getString("message"));
                                            }
                                        }
                                    }
                            }

                            IWorkRouteMngt workRoutePbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);

                            // Shipment 아이템 정보도 삭제한다.
                            errMsg = "부분완료 Shipment생성중 오류";
                            item.set("LCompoundDao", dao);
                            workRoutePbc.createSendWmShipmentForPartCmpt(item);

                            errMsg = "실행오더 분배 중 오류";
                            if(workRouteList != null && workRouteList.getDataCount() > 0) {
                                for(int jj = 0; jj < workRouteList.getDataCount(); jj++) {
                                    LData divData = new LData();
                                    divData.set("LCompoundDao", dao);
                                    divData.setString("salesOrdNo"  , workRouteList.getString("salesOrdNo", jj));
                                    divData.setString("workRouteSeq", workRouteList.getString("workRouteSeq", jj));
                                    divData.setString("lineNo"      , workRouteList.getString("lineNo", jj));
                                    divData.setString("regrId"      , "batch");
                                    divData.setString("mdfrId"      , "batch");
                                    pbc.divideEoPartial(divData);
                                }
                            }
                            dao.commit();

                        }catch (Throwable e) {
                            LLog.err.println(this.getClass().getName() + "."+ " log make ()" + "=>" + e.getMessage());
                            dao.rollback();

                            nullData = new LData();
                            nullData = CompDaoUtil.startTransaction(nullData, false);
                            dao3 = CompDaoUtil.getTransaction(nullData, false);

                            errMsg = errMsg + ":" + e.getMessage();
                            if(errMsg.length() > 500)
                                item.setString("errConts"   , errMsg.substring(0, 500));
                            else item.setString("errConts"  , errMsg);
                            dao3.add("cud/om/tb_om04010/updateErrConts", item);
                            dao3.executeUpdate();

                            dao3.add("cud/om/tb_om04010h/updateErrConts", item);
                            dao3.executeUpdate();
                            dao3.commit();
                        }
                    }
                }
            }

            daoAll.add("cud/om/tb_om04010/deleteTbOm04010All", nullData);
            daoAll.executeUpdate();

            daoAll.commit();
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {

            errConts.setString("errConts"   , "전역 에러 -- 일괄 에러 처리 함");
            daoAll.add("cud/om/tb_om04010/updateErrContsAll", errConts);
            daoAll.executeUpdate();
            daoAll.commit();

            se.printStackTrace(LLog.debug);
            LLog.err.println(  this.getClass().getName() + "." + "updateSalesOrdBatchPartCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /* 판매오더 부분완료 상세 - 배치Job 처리 : 제지, 적송, 장항센터, 생성일로 부터 7일이후되도록 종결이 안된 오더
     *
     * (non-Javadoc)
     * @see
     */

    public void updateSalesOrdBatchPartCmpt_back() throws LException {
           LData nullData1 = new LData();
           nullData1 = CompDaoUtil.startTransaction(nullData1, false);
           laf.application.dao.LCompoundDao daoAll = CompDaoUtil.getTransaction(nullData1, false);

           LData errConts = new LData();

           nullData1 = CompDaoUtil.startTransaction(nullData1, false);
           laf.application.dao.LCompoundDao dao3 = CompDaoUtil.getTransaction(nullData1, false);

        try{
            LData nullData4 = new LData();
            nullData4 = CompDaoUtil.startTransaction(nullData4, false);
            laf.application.dao.LCompoundDao  dao = CompDaoUtil.getTransaction(nullData4, false);

            LData nullData = new LData();

            String errMsg = "";

            //작업이 실행중이면 skip
            LMultiData chkIng = dao.executeQuery("select/om/om02/salesOrd/retrieveHppJuksongWating", nullData);
            if(chkIng != null && chkIng.getDataCount() > 0) {
                return ;
            }

            nullData = new LData();
            nullData = CompDaoUtil.startTransaction(nullData, false);
            laf.application.dao.LCompoundDao dao1 = CompDaoUtil.getTransaction(nullData, false);

            LMultiData salesOrdList = dao.executeQuery("select/om/om02/salesOrd/retrieveHppPartCmptHeader", nullData);
            for(int x=0; x<salesOrdList.getDataCount(); x++){
                LData salesOrnInfo1 = salesOrdList.getLData(x);
                if(salesOrnInfo1.getString("salesOrdNo").equals("S000019213")){
                    LMultiData itemData1 = dao.executeQuery("select/om/om02/salesOrd/retrieveHppPartCmptDetail", salesOrnInfo1);
                    if ( itemData1 != null && itemData1.getDataCount() > 0 ) {
                        for(int i=0; i<itemData1.getDataCount(); i++){
                            LData item1 = itemData1.getLData(i);
                            item1.setString("workSctnCd", "M");

                            try{
                                dao1.add("cud/om/tb_om04010/deleteTbOm04010", item1);
                                dao1.executeUpdate();

                                dao1.add("cud/om/tb_om04010/createTbOm04010", item1);
                                dao1.executeUpdate();
                                dao1.commit();
                            }catch (Exception e) {
                                LLog.err.println(this.getClass().getName() + "."+ " log make ()" + "=>" + e.getMessage());
                                dao1.rollback();

                                throw new LException(e.getMessage());
                            }
                        }
                    }
                }
            }

            LMultiData WorkingList = dao.executeQuery("select/om/om02/salesOrd/retrieveHppJuksongWorkingList", nullData);

            for(int j=0; j<WorkingList.getDataCount(); j++){
                LData workOrdInfo = WorkingList.getLData(j);

                LMultiData itemData = dao.executeQuery("select/om/om02/salesOrd/retrieveHppPartCmptDetail", workOrdInfo);

                if ( itemData != null && itemData.getDataCount() > 0 ) {
                    LData  ordData      = null;
                    // 오더사유코드
                    String ordReasonCd  = null; // ord_reason_cd = '01'(오더납품종료)
                    ordData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", itemData.getLData(0));

                    // 아이템별 중복 종결처리 확인
                    for(int i=0; i<itemData.getDataCount(); i++){
                        LData item = itemData.getLData(i);

                        LData rsltData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdPartCmptPossCheck", item);
                        if(rsltData != null && !"Y".equals(rsltData.getString("possCheck")) ) {
                            errMsg = "출고실적물량과 입고실적물량이 상이";
                            throw new LBizException("출고실적물량과 입고실적물량이 상이합니다.확인하시기 바랍니다.(라인번호: " + item.getString("lineNo") + ")");
                        }
                        if(item.getString("ordReasonCd")!=null && !"".equals(item.getString("ordReasonCd"))) {
                            LData itemOldData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdItemInfo", item);
                            LLog.debug.println("ordReasonCd : " + itemOldData.getString("ordReasonCd"));
                            if(itemOldData.getString("ordReasonCd")!=null && !"".equals(itemOldData.getString("ordReasonCd"))){
                                errMsg = "이미 종결처리된 아이템이 존재";
                                throw new LBizException("이미 종결처리된 아이템이 존재합니다. 다시 조회후 진행하여 주세요.(라인번호 : " + item.getString("lineNo") + ")");
                            }
                        }
                    }

                    nullData = new LData();
                    nullData = CompDaoUtil.startTransaction(nullData, false);
                    dao3 = CompDaoUtil.getTransaction(nullData, false);

                    try{
                        LMultiData updData   = new LMultiData();
                        LData      paramData = new LData();
//                      CompDaoUtil.deliverLCompoundDao(inputData, paramData);
                        paramData.set("LCompoundDao", dao);

                        String addYn = "N"; // 아이템추가여부
                        // 아이템기준
                        for(int i=0; i<itemData.getDataCount(); i++){
                            LData item = itemData.getLData(i);

                            item.setString("mdfrId", "batch");
                            item.setString("delYn" , "N");
                            item.setString("addYn" , "N");
                            updData.addLData(item);

                            // 아이템추가여부 체크
                            if("Y".equals(item.getString("addYn"))) {
                                addYn = "Y";
                            }
                        }

                        dao.add("cud/om/tb_om02002/updateSalesOrdItemPartCmptReason", updData);
                        dao.executeUpdate();

                        // 화면으로 통해 부분완료처리된 경우 CO정보를 수정한다.
                        dao.add("cud/om/tb_om01002/updateCustOrdItemPartCmptReason", updData);
                        dao.executeUpdate();

                        paramData.setString("salesOrdNo", itemData.getString("salesOrdNo",0));

                        // 완료구분 : 02(Partial완료)
                        paramData.setString("salesOrdCmptSctnCd", OmConstants.SALES_ORD_CMPT_SCTN_CD_PART);

                        paramData.setString("regrId"    , "batch");
                        paramData.setString("mdfrId"    , "batch");

                        // 아이템이 추가되지 않은 경우만 완료프로세스를 호출한다.
                        if("N".equals(addYn)) {
                            //판매오더완료확인
                            processSalesOrdAutoCmpt(paramData);
                        }

                        //판매오더작업상태
                        changeSalesOrdStat(paramData);

                        // 대기오더 분배가 완료되었는지 여부를 조회
                        LData result1 = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBackOrdDivCmptYn", paramData);
                        String backCmptYn = "Y";
                        if(result1.getInt("cnt") == 0) {
                            backCmptYn = "N";
                        }

                        // 대기오더분배가 완료되었으면 실행
                        if(backCmptYn.equals("N")) {
                            paramData.setString("backOrdYn", "N");
                            dao.add("cud/om/tb_om02001/changeBackOrdStat", paramData);
                            dao.executeUpdate();
                        }

                        setSalesOrdHistory(paramData);

                        //조회조건 : 판매오더번호, 작업경로순번, 전송구분코드
                        IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
                        LMultiData workRouteList = new LMultiData();
                        LData temp = null;
                        for(int i = 0; i < updData.getDataCount(); i++){
                            LData lData = updData.getLData(i);

                            LMultiData result2 = dao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", lData);

                            if(result2 != null && result2.getDataCount() > 0) {
                                for(int aa = 0; aa < result2.getDataCount(); aa++) {
                                    temp = result2.getLData(aa);
                                    if(workRouteList.getDataCount() > 0) {

                                        boolean exist = false;
                                        for(int z=0; z < workRouteList.getDataCount(); z++) {
                                            if(workRouteList.getString("salesOrdNo"  , z).equals(temp.getString("salesOrdNo"))   &&
                                               workRouteList.getString("workRouteSeq", z).equals(temp.getString("workRouteSeq")) &&
                                               workRouteList.getString("lineNo"      , z).equals(temp.getString("lineNo"))
                                            ) {
                                                exist = true;
                                                break;
                                            }
                                        }

                                        if(!exist) {
                                            workRouteList.addLData(temp);
                                        }
                                    } else {
                                        workRouteList.addLData(temp);
                                    }
                                }
                            }
                        }

                        if(ordData != null
                                    && ((ordData.getString("custOrdTypeCd") != null && !ordData.getString("custOrdTypeCd").equals(""))
                                            || (ordData.getString("custMoveTypeCd") != null && !ordData.getString("custMoveTypeCd").equals("")) ) ) {
                                LData trmsData = dao.executeQueryForSingle("select/om/om02/custCdMpng/retrievePartCmptTrmsSctn", ordData);
                                if(trmsData.getString("partCmptTrmsSctnCd") != null     &&
                                   !"".equals(trmsData.getString("partCmptTrmsSctnCd")) &&
                                   !"00".equals(trmsData.getString("partCmptTrmsSctnCd"))){

                                    //SOReject 정보전송  EAI 전송
                                    LMultiData sndData = new LMultiData();
                                    for(int i=0; i<updData.getDataCount(); i++){
                                        LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrievePartCmptItemInfo", updData.getLData(i));

                                        if("N".equals(lData.getString("giTrmsYn"))) {
                                            errMsg = "미전송된 GI정보가 존재";
                                            throw new LBizException("미전송된 GI정보가 존재합니다. ");
                                        }

                                        if("N".equals(lData.getString("grTrmsYn"))) {
                                            errMsg = "미전송된 GR정보가 존재";
                                            throw new LBizException("미전송된 GR정보가 존재합니다. ");
                                        }

                                        lData.setString("partCmptTrmsSctnCd", trmsData.getString("partCmptTrmsSctnCd"));
                                        sndData.addLData(lData);
                                    }
                                    if(sndData.getDataCount() > 0) {
                                        SalesOrdMngtWSC wsc     = new SalesOrdMngtWSC();
                                        LData           eaiData = null;
                                        try {
                                            eaiData = wsc.transferSalesOrdPartCmpt(sndData);
                                        } catch(Throwable t){
                                            t.printStackTrace(LLog.debug);
                                            errMsg = "부분완료 전송중 에러가 발생";
                                            throw new LBizException("부분완료 전송중 에러가 발생하였습니다.");
                                        }
                                        if(eaiData.getString("type").equals("E")) { //실패로넘어오면
                                            throw new LBizException(eaiData.getString("message"));
                                        }
                                    }
                                }
                        }

                        try{
                            // Shipment 아이템 정보도 삭제한다.
                            errMsg = "부분완료 Shipment생성중 오류";
                            IWorkRouteMngt workRoutePbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);
                            for(int i = 0; i < updData.getDataCount(); i++){
                                LData lData = updData.getLData(i);
//                              CompDaoUtil.deliverLCompoundDao(inputData, lData);
                                lData.set("LCompoundDao", dao);
                                workRoutePbc.createSendWmShipmentForPartCmpt(lData);
                            }

                            errMsg = "실행오더 분배 중 오류";
                            if(workRouteList != null && workRouteList.getDataCount() > 0) {
                                for(int jj = 0; jj < workRouteList.getDataCount(); jj++) {
                                    LData divData = new LData();
//                                  CompDaoUtil.deliverLCompoundDao(inputData, divData);
                                    divData.set("LCompoundDao", dao);

                                    divData.setString("salesOrdNo"  , workRouteList.getString("salesOrdNo", jj));
                                    divData.setString("workRouteSeq", workRouteList.getString("workRouteSeq", jj));
                                    divData.setString("lineNo"      , workRouteList.getString("lineNo", jj));
                                    divData.setString("regrId"      , "batch");
                                    divData.setString("mdfrId"      , "batch");
                                    pbc.divideEoPartial(divData);
                                }
                            }

                        }catch (Throwable e) {
                            LLog.err.println(this.getClass().getName() + "."+ " log make ()" + "=>" + e.getMessage());
                            dao.rollback();

                            errMsg = errMsg + ":" + e.getMessage();
                            if(errMsg.length() > 500)
                                itemData.getLData(0).setString("errConts"   , errMsg.substring(0, 500));
                            else itemData.getLData(0).setString("errConts"  , errMsg);
                            dao3.add("cud/om/tb_om04009/updateGiRltdWorkExecYn", itemData.getLData(0));
                            dao3.executeUpdate();
                            dao3.commit();
                        }

                        dao.commit();

                        dao3.commit();
                    }catch (Throwable e) {
                        LLog.err.println(this.getClass().getName() + "."+ " log make ()" + "=>" + e.getMessage());
                        dao.rollback();

                        errMsg = errMsg + ":" + e.getMessage();
                        if(errMsg.length() > 500)
                            itemData.getLData(0).setString("errConts"   , errMsg.substring(0, 500));
                        else itemData.getLData(0).setString("errConts"  , errMsg);
                        dao3.add("cud/om/tb_om04009/updateGiRltdWorkExecYn", itemData.getLData(0));
                        dao3.executeUpdate();
                        dao3.commit();
                    }
                }
            }
            daoAll.add("cud/om/tb_om04010/deleteTbOm04010All", nullData);
            daoAll.executeUpdate();
            daoAll.commit();
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {

            errConts.setString("errConts"   , "전역 에러 -- 일괄 에러 처리 함");
            daoAll.add("cud/om/tb_om04010/updateErrContsAll", errConts);
            daoAll.executeUpdate();
            daoAll.commit();

            se.printStackTrace(LLog.debug);
            LLog.err.println(  this.getClass().getName() + "." + "updateSalesOrdBatchPartCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /** 수출오더 혼적처리 하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LData processExpOrdConsol(LMultiData inputData) throws LException {
        laf.application.dao.LCompoundDao    dao     = CompDaoUtil.getTransaction(inputData);

        LMultiData  mData   = CommGauDaoUtil.resetParam(inputData);
        LData       retData = null;

        IPlanVanningMngt pbc2 = (IPlanVanningMngt) PbcUtil.getPbc(IPlanVanningMngt.class);
        ICustCdMpng      pbc3 = (ICustCdMpng) PbcUtil.getPbc(ICustCdMpng.class);
        IOrdDivMngt      pbc4 = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);

        try {
            LMultiData items            = (LMultiData)mData.get("IN_DS1", 0);
            LMultiData vanningHeader    = (LMultiData)mData.get("IN_DS2", 0);
            LMultiData vanningItem      = (LMultiData)mData.get("IN_DS3", 0);

            LData item                  = null;
            LData header                = null;
            LData tmpHeader                 = null;
            LData salesOrd              = null;
            LData salesOrdItem          = null;
            String mode                 = "";
            LMultiData fwdDelSalesOrdNoList  = new LMultiData();

LLog.debug.println("items================>\n" + items);
LLog.debug.println("vanningHeader================>\n" + vanningHeader);
LLog.debug.println("vanningItem================>\n" + vanningItem);

            LMultiData custOrdNoList = new LMultiData();
            if(items != null && items.getDataCount() > 0) {
                for(int i=0; i < items.getDataCount(); i++) {
                    /*
                    1. 고객코드, 마스터오더번호 세팅
                        배닝헤더에서 고객오더번호, 고객오더라인번호가 같은 아이템을 찾아서 세팅함.
                        없으면 고객오더번호를 마스터오더번호에 세팅.
                    */

                    item = items.getLData(i);
                    item.setString("custCd", vanningHeader.getString("custCd", 0));

                    if(vanningHeader != null && vanningHeader.getDataCount() > 0) {
                        for(int j =0; j < vanningHeader.getDataCount(); j++) {
                            boolean check = false;
                            header = vanningHeader.getLData(j);
                            if(custOrdNoList.getDataCount() > 0) {
                                LData custOrdTemp = null;
                                for(int x=0; x < custOrdNoList.getDataCount(); x++) {
                                    custOrdTemp = custOrdNoList.getLData(x);

                                    if(header.getString("custOrdNo").equals(custOrdTemp.getString("custOrdNo"))) {
                                        check = true;
                                        break;
                                    }

                                }
                            }
                            if(!check) {
                                custOrdNoList.addLData(header);
                            }

                            if(header.getString("custOrdNo").equals(item.getString("custOrdNo"))
                            && header.getString("custOrdLineNo").equals(item.getString("custOrdLineNo"))) {
                                if(header.getString("mstrOrdNo") != null && !header.getString("mstrOrdNo").equals("")) {
                                    item.setString("mstrOrdNo", header.getString("mstrOrdNo"));
                                } else {
                                    item.setString("mstrOrdNo", item.getString("custOrdNo"));
                                }
                                break;
                            }
                        }

                        if(item.getString("mstrOrdNo") == null || item.getString("mstrOrdNo").equals("")) {
                            item.setString("mstrOrdNo", item.getString("custOrdNo"));
                        }
                    }
                    String index = "";
                    for(int n=1; n <= 30; n++) {
                        index = Integer.toString(n);
                        if(n < 10) {
                            index = "0" + index;
                        }
                        if(!item.containsKey("col" + index)) {
                            item.setString("col" + index, "");
                        }
                    }
                    LLog.debug.println("item(" + i + ")================>" + item);

                    /*
                    1. 고객오더 아이템 존재 여부 확인
                       조회된 건수에 따라 1건이면  'U'모드로, 0건이면 'I' 모드로 세팅
                    */
                    LData exist = dao.executeQueryForSingle("select/om/om01/coRegSysInf/checkItemExistYn", item);
                    item.setString("regrId", OmConstants.COMMON_USER);
                    item.setString("chgAftOfcrId", OmConstants.COMMON_USER);
                    item.setString("ifId", "IF_HPP_OM_ExportOrder");
LLog.debug.println("exist===========\n" + exist);
                    if(exist != null && exist.getInt("cnt") > 0) {
                        mode = "U";
                        dao.add("cud/om/tb_om01002/updateIfTbOm01002", item);
                    } else {
                        mode = "I";
                        dao.add("cud/om/tb_om01002/createIfTbOm01002", item);
                    }
                    /*
                     2. 고객오더 Update 혹은 Insert
                     */
                    dao.executeUpdate();

                    /*
                     3. 판매오더번호 조회
                        마스터오더번호를 사용하여 판매오더번호 조회
                     */
                    LData param = new LData();
                    param.setString("custOrdNo", item.getString("mstrOrdNo"));
                    salesOrd = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveMstrOrdSalesOrdNo", param);
LLog.debug.println("salesOrd===========\n" + salesOrd);

                    LData soHeader = null;
                    if(salesOrd != null && salesOrd.getString("salesOrdNo") != null && !salesOrd.getString("salesOrdNo").equals("")) {
                        soHeader = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExpImpSalesOrdExceMngtHead", salesOrd);
                    }
                    /*
                     4. 라인번호 조회 (U 모드일 경우에만 실행)
                        고객오더번호와 고객오더라인번호로 판매오더번호와 라인번호 조회
                     */
LLog.debug.println("soHeader===========\n" + soHeader);

                    if(mode.equals("U")) {
                        salesOrdItem = (LData)(dao.executeQuery("select/om/om02/salesOrd/retrieveConsolTgtSalesOrdItem", item)).getLData(0);
                    }

                    LMultiData coMulti = new LMultiData();
                    coMulti.addLData(item);

                    //아이템 데이터를 custCdMpng에서 so데이터로 매핑하여 사용한다.
                    LMultiData tgtItem = pbc3.retrieveHansolpaperExpOrdMpngItem(soHeader, coMulti);
LLog.debug.println("tgtItem===========\n" + tgtItem);
                    LData tempData = null;
                    for(int x = 0; x < tgtItem.getDataCount(); x++){
                        tempData = new LData();
                        tempData.setString("ptnCd"  , tgtItem.getString("custCd", x));
                        tempData.setString("itemCd" , tgtItem.getString("itemCd", x));

                        LData itemMasterData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfo", tempData);

                        if(itemMasterData != null && !itemMasterData.isEmpty()){
                            if(!tgtItem.containsKey("basisUnitCd")) {
                                tgtItem.addString("basisUnitCd", itemMasterData.getString("basisUnitCd"));
                            } else {
                                tgtItem.modifyString("basisUnitCd", x, itemMasterData.getString("basisUnitCd"));
                            }
                        }
                    }

                    //아이템정보의 검증
                    soHeader.set("LCompoundDao", dao);
                    LMultiData changeData = changeQtyWgt(soHeader,tgtItem);

                    for(int x = 0; x < changeData.getDataCount(); x++){
                        if(changeData.getString("workFlag", x).equals("S")){
                            tgtItem.modify("ordQty"     , x, changeData.get("ordQty"    , x));
                            tgtItem.modify("ordCbm"     , x, changeData.get("ordCbm"    , x));
                            tgtItem.modify("qtyUnitCd"  , x, changeData.get("qtyUnitCd" , x));
                            tgtItem.modify("ordWgt"     , x, changeData.get("ordWgt"    , x));
                            tgtItem.modify("wgtUnitCd"  , x, changeData.get("wgtUnitCd" , x));
                            tgtItem.modify("ordVerifyYn", x, "Y");

                        }else{
                            throw new LBizException("물량이 부적합합니다.");
                        }
                    }

                    //혼적정보 SO에 등록/수정
                    if(mode.equals("U")) {
                        if(salesOrd != null && salesOrd.getString("salesOrdNo") != null && !salesOrd.getString("salesOrdNo").equals("")
                        && salesOrdItem != null && salesOrdItem.getString("salesOrdNo") != null && !salesOrdItem.getString("salesOrdNo").equals("")) {
                            if(salesOrd.getString("salesOrdNo").equals(salesOrdItem.getString("salesOrdNo"))) {
                                LData saveItem = tgtItem.getLData(0);
                                saveItem.setString("salesOrdNo" , salesOrdItem.getString("salesOrdNo"));
                                saveItem.setString("lineNo"     , salesOrdItem.getString("lineNo"));
                                saveItem.setString("regrId"     , OmConstants.COMMON_USER);
                                saveItem.setString("mdfrId"     , OmConstants.COMMON_USER);

                                dao.add("cud/om/tb_om02002/updateSalesOrdItemProcessExpOrdConsol", saveItem);
                                dao.add("cud/om/tb_om02005/updateTbOm02005", saveItem);
                                dao.executeUpdate();
                            } else {

                                // 기존소스 : 출고이후를 제외하고(신규,확정,스케쥴,또는 종결) 혼적아이템에 대해 기존아이템은 삭제
                                salesOrdItem.setString("delYn", "Y");
                                salesOrdItem.setString("mdfrId", OmConstants.COMMON_USER);
                                // 출고이후를 제외하고(신규,확정,스케쥴,또는 종결) 혼적아이템에 대해 기존아이템은 삭제
                                //dao.add("cud/om/tb_om02002/processSalesOrdItemDelHonjuk", salesOrdItem);//중복이 발생할수 있음
                                // 기존소스 :  혼적아이템에 대해 기존아이템은 삭제
                                dao.add("cud/om/tb_om02002/processSalesOrdItemDel", salesOrdItem);//기존것으로 변경.2013.02.15 cys

                                /* 혼적전 기존 라인과 혼적할 라인번호가 동일하게 존재하면 마스터오더번호에 그라인은 생성하지 못하도록 하는 로직 2013.01.30 cys
                                // 혼적되기전 기존 판매오더번호
                                String OrigSalesOrdNo = salesOrdItem.getString("salesOrdNo");

                                // 혼적되기전 기존 고객오더라인번호
                                String OrigCustOrdLineNo = tgtItem.getLData(0).getString("custOrdLineNo");

                                LData checkLdata = new LData();
                                checkLdata.setString("salesOrdNo"   , OrigSalesOrdNo);
                                checkLdata.setString("custOrdLineNo", OrigCustOrdLineNo);

                                //혼적전 기존 라인과 혼적할 라인번호가 동일하게 존재하면 마스터오더번호에 그라인은 생성하지 않는다.
                                LData lDupCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/checkHonjukLineNoDup", checkLdata);
                                if(lDupCheck.getInt("cnt")>0){
                                    continue;
                                }
                                */

// 초기상태의 혼적 대상 아이템 리스트 저장 - 혼적으로 인한 FIS 부킹정보 자동삭제처리
                                //fwdDelSalesOrdNoList.addLData(salesOrdItem);

                                //혼적될 아이템으로 마스터오더의 판매오더번호로 신규 생성
                                LData saveItem = tgtItem.getLData(0);
                                saveItem.setString("regrId"     , OmConstants.COMMON_USER);
                                saveItem.setString("mdfrId"     , OmConstants.COMMON_USER);
                                saveItem.setString("salesOrdNo" , salesOrd.getString("salesOrdNo"));
                                //2015-12-24 수출오더 채번시 라인번호 +1 증가
                                dao.add("cud/om/tb_om02002/createSalesOrdItemProcessExpOrdConsol", saveItem);
                                dao.add("cud/om/tb_om02005/createSalesOrdItemPrclProcessExpOrdConsol", saveItem);
                                dao.executeUpdate();


                            }
                        }
                    } else if(mode.equals("I")) {
                        LData saveItem = tgtItem.getLData(0);
                        saveItem.setString("regrId"     , OmConstants.COMMON_USER);
                        saveItem.setString("mdfrId"     , OmConstants.COMMON_USER);
                        saveItem.setString("salesOrdNo" , salesOrd.getString("salesOrdNo"));
                        //2015-12-24 수출오더 채번시 라인번호 +1 증가
                        dao.add("cud/om/tb_om02002/createSalesOrdItemProcessExpOrdConsol", saveItem);
                        dao.add("cud/om/tb_om02005/createSalesOrdItemPrclProcessExpOrdConsol", saveItem);
                        dao.executeUpdate();
                    }


                }
            }

// 혼적으로 인한 FIS 부킹정보 자동삭제처리 시작
/*
            LMultiData fwdDelSalesOrdNo = new LMultiData();

            // 포워딩실행오더 취소오더 판매오더번호 Unique 저장
            if(fwdDelSalesOrdNoList != null && fwdDelSalesOrdNoList.getDataCount() > 0) {
                for(int j =0; j < fwdDelSalesOrdNoList.getDataCount(); j++) {
                    boolean check = false;
                    tmpHeader = fwdDelSalesOrdNoList.getLData(j);
                    if(fwdDelSalesOrdNo.getDataCount() > 0) {
                        LData fwdDelSalesOrdNoTemp = null;
                        for(int x=0; x < fwdDelSalesOrdNo.getDataCount(); x++) {
                            fwdDelSalesOrdNoTemp = fwdDelSalesOrdNo.getLData(x);

                            if(header.getString("salesOrdNo").equals(fwdDelSalesOrdNoTemp.getString("salesOrdNo"))) {
                                check = true;
                                break;
                            }

                        }
                    }
                    if(!check) {
                        fwdDelSalesOrdNo.addLData(header);
                    }

                }
            }

            if(fwdDelSalesOrdNo != null && fwdDelSalesOrdNo.getDataCount() > 0) {
                for(int z=0; z < fwdDelSalesOrdNo.getDataCount(); z++) {
                    // 출고,입고,운송실행오더가 존재하는지 체크함
                    LData existGrGiTranEo = dao.executeQueryForSingle("select/om/om02/salesOrd/existGrGiTranEo", fwdDelSalesOrdNo.getLData(z));

                    // 출고,입고,운송실행오더가 존재하지 않는다면
                    if(existGrGiTranEo != null && existGrGiTranEo.getString("exist_Yn").equals("N")) {

                        LData eoNo = null;
                        LData param = fwdDelSalesOrdNo.getLData(z);


                        LData bookingNo     = dao.executeQueryForSingle("select/om/om03/workRouteMngt/getBookingNo", param);

                        if(bookingNo.getString("bookingNo") == null || bookingNo.getString("bookingNo").equals("")) {
                            //eoNo = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDivideFwdEoNoNotExist", param);
                            throw new LBizException("부킹번호가 존재하지 않습니다.");
                        } else {
                            param.setString("bookingNo", bookingNo.getString("bookingNo"));
                            param.setString("shipCoBookingNo", bookingNo.getString("shipCoBookingNo"));
                            eoNo = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDivideFwdEoNoExist", param);
                        }

                        if(eoNo != null && eoNo.getString("eoNo") != null && !eoNo.getString("eoNo").equals("")) {
                            param.setString("eoNo"          , eoNo.getString("eoNo"));
                        } else {
                            throw new LBizException("포워딩 실행오더 분배가 되지 않았습니다.");
                        }


                        LData fwdEoInfo = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveFwdEo", param);
                        if(fwdEoInfo != null ){
                            fwdEoInfo.setString("bookingNo", bookingNo.getString("bookingNo"));
                        }


                        // Master부킹오더가 존재하면 포워딩 실행오더 취소를 할 수 없다
                        // 조건 : 화주사, 선사부킹번호, POL_CD, POL_CD, ETD 가 동일한 데이타 2건 이상이면 포워딩실행오더 취소전송할 수 없다.
                        LData existMstBooking = dao.executeQueryForSingle("select/om/om02/salesOrd/existYnMstrBookingNoCnt", fwdEoInfo);
                        if(existMstBooking != null && existMstBooking.getInt("cnt") == 1) {
                            // 포워딩 실행오더 취소 전송
                            fwdEoInfo.setString("regrId", OmConstants.COMMON_USER);
                            fwdEoInfo.setString("mdfrId", OmConstants.COMMON_USER);
                            fwdEoInfo.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                            fwdEoInfo.set("LCompoundDao", dao);

                            pbc4.divideFwdEo(fwdEoInfo);

                        }
                    }

                }

            }
 */
// 혼적으로 인한 FIS 부킹정보 자동삭제처리 끝

            salesOrd.setString("regrId", OmConstants.COMMON_USER);
            salesOrd.setString("mdfrId", OmConstants.COMMON_USER);

            //혼적이후 기존 SO에 대해서 취소처리
            LLog.debug.println("custOrdNoList========\n" + LCollectionUtility.toDebugString(custOrdNoList));
            if(custOrdNoList != null && custOrdNoList.getDataCount() > 0) {
                LData custOrdTemp = null;
                for(int x=0; x < custOrdNoList.getDataCount(); x++) {
                    custOrdTemp = custOrdNoList.getLData(x);
                    custOrdTemp.setString("regrId", OmConstants.COMMON_USER);
                    custOrdTemp.setString("mdfrId", OmConstants.COMMON_USER);
                    LData existItem = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExistSalesOrdItem", custOrdTemp);

                    if(existItem == null || existItem.getInt("cnt") <= 0) {
                        custOrdTemp.setString("salesOrdNo", "");
                        custOrdTemp.setString("salesOrdCnclReason", "수출오더 혼적처리로 인한 오더 취소");

                        dao.add("cud/om/tb_om02001/updateSalesOrdDel", custOrdTemp);
                        dao.executeUpdate();

                        custOrdTemp.set("LCompoundDao", dao);
                        setSalesOrdHistory(custOrdTemp);
                    }

                }
            }
//          dao.executeUpdate();
//          dao.add("cud/om/tb_om02011h/createSalesOrdHistory", salesOrd);
//          dao.add("cud/om/tb_om02012h/createSalesOrdItemHistory", salesOrd);
            salesOrd.set("LCompoundDao", dao);
            setSalesOrdHistory(salesOrd);

            //계획배닝 정보 생성
            LMultiData dataHolder = new LMultiData();
            dataHolder.add("IN_DS1", vanningHeader);
            dataHolder.add("IN_DS2", vanningItem);
            dataHolder.add("LCompoundDao", dao );
            LData lRtn = pbc2.createPlanVanning(dataHolder);

            retData = new LData();
            retData.setString("type", lRtn.getString("type"));
            retData.setString("message", lRtn.getString("message"));

        } catch(LBizException be) {
            retData = new LData();
            retData.setString("type"    , "E");
            retData.setString("message" , be.getMessage());

            LLog.err.println(  this.getClass().getName() + "." + "processExpOrdConsol()" + "=>" + be.getMessage());
            throw be;
        } catch(Exception se) {
            retData = new LData();
            retData.setString("type"    , "E");
            retData.setString("message" , se.getMessage());

            LLog.err.println(  this.getClass().getName() + "." + "processExpOrdConsol()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

        return retData;
    }


    /** 계열수출오더 포워딩관리 조회하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData retrieveBranchOceanExpSalesOrdFwd(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();

            if(inputData.getString("custOrdNo") != null && !"".equals(inputData.getString("custOrdNo"))) {
                retrieveExpOrdAccessAuth(inputData);
            }

            return dao.executeQuery("select/om/om02/salesOrd/retrieveBranchOceanExpSalesOrdFwdOrdList", inputData);
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBranchOceanExpSalesOrdFwd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }

    /** 계열수출오더 포워딩관리 Booking List 조회하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData retrieveBranchOceanExpSalesOrdBookingList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBranchOceanExpSalesOrdBookingList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBranchOceanExpSalesOrdBookingList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }

    /**
     * 계열 해상수출  판매오더 포워딩관리 정보를 저장하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveBranchOceanExpSalesOrdFwd(LMultiData inputData) throws LException {
        LMultiData bookingData = (LMultiData)inputData.get("IN_DS2",0);
        LData paramData = (LData)inputData.get("INPUT", 0);
        LCommonDao dao = new LCommonDao();
//        LCompoundDao cDao = new LCompoundDao();
        laf.application.dao.LCompoundDao comDao = new laf.application.dao.LCompoundDao();

        try{
            LData newSalesOrd       = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo"    , paramData);
            LMultiData workRoute    = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteBookingNo", paramData);
            LMultiData bookingRslt  = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveBookingRslt", paramData);

            if(paramData.containsKey("isUpdate")) {
                newSalesOrd.setString("cargoFormCd", paramData.getString("cargoFormCd"));
            }
            newSalesOrd.setString("custExcaOfcrNm", paramData.getString("custExcaOfcrNm"));
            newSalesOrd.setString("dptArOfcrNm", paramData.getString("dptArOfcrNm"));

            LData booking = null;
            if(paramData.getString("flag") != null && !paramData.getString("flag").equals("true")) {
                if(bookingData != null && bookingData.getDataCount() > 0) {
                    for(int i=0; i < bookingData.getDataCount(); i++) {
                        if(bookingData.getInt("GauceJobType", i) != GauceDataRow.TB_JOB_DELETE) {
                            booking = bookingData.getLData(i);
                            booking.setString("custCd", paramData.getString("upperPtnCd"));
                            if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_INSERT) {
                                LData existBooking = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExistBookingNo", booking);
                                if(existBooking != null && existBooking.getString("shipCoBookingNo") != null && !existBooking.getString("shipCoBookingNo").equals("")) {
                                    throw new LBizException("*이미 등록된 Booking 입니다.(Booking번호:" + existBooking.getString("shipCoBookingNo") + ") \n" + bookingData.getString("shipCoBookingNo", i) + "로 계속 진행하시겠습니까#");
                                }

                                existBooking = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExistBookingData", booking);
                                if(existBooking != null && existBooking.getString("shipCoBookingNo") != null && !existBooking.getString("shipCoBookingNo").equals("")) {
                                    throw new LBizException("*이미 등록된 Booking 입니다.(Booking번호:" + existBooking.getString("shipCoBookingNo") + ") \n" + bookingData.getString("shipCoBookingNo", i) + "로 계속 진행하시겠습니까#");
                                }
                            }
                        }
                    }
                }
            }

            String updBookingNo = "";

            if(bookingData != null && bookingData.getDataCount() > 0) {
                for(int i=0; i < bookingData.getDataCount(); i++) {
                    boolean dcsnYn = false;

                    if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE ||  bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE ) {
                        for(int j=0; j < workRoute.getDataCount(); j++) {
                            if(bookingData.getString("bookingNo", i).equals(workRoute.getString("bookingNo", j))) {
                                if(workRoute.getInt("cnt", j) > 0) {
                                    dcsnYn = true;
                                }
                            }
                        }
                        for(int j=0; j < bookingRslt.getDataCount(); j++) {
                            if(bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                                if(bookingRslt.getInt("cnt", j) > 0) {
                                    dcsnYn = true;
                                }
                            }
                        }

                    }

                    if (dcsnYn)
                        updBookingNo = updBookingNo + bookingData.getString("shipCoBookingNo", i);
                }
                if(!updBookingNo.equals("")) {
                    updBookingNo = "Booking NO:" + updBookingNo;
                    throw new LBizException("hsni.om.err.cannotsave?" + updBookingNo);
                }
            }

            LData param = null;
            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            newSalesOrd.setString("mdfrId", paramData.getString("mdfrId"));
            comDao.add("cud/om/tb_om02001/updateCustExcaOfcrNm", newSalesOrd);
            comDao.executeUpdate();

            if(paramData.containsKey("isUpdate")) {
                comDao.add("cud/om/tb_om02001/updateSalesOrd", newSalesOrd);
                comDao.executeUpdate();

                paramData.set("LCompoundDao", comDao);
                setSalesOrdHistory(paramData);
//2014-05-08 부킹등록 시 작업경로가 있는 경우  삭제후 재성성 로직 막음.
 /**
                if(workRoute != null && workRoute.getDataCount() > 0) {
                    for(int i=0; i < workRoute.getDataCount(); i++) {
                        param = workRoute.getLData(i);
                        param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                        param.setString("workProgStatCd", OmConstants.WORK_PROG_STAT_CD_01);
                        param.setString("regrId", paramData.getString("regrId"));
                        param.setString("mdfrId", paramData.getString("mdfrId"));
                        param.set("LCompoundDao", comDao);

                        pbc.cancelEo(param);

                        pbc.divideEo(param);
                    }
                }
**/
                if(bookingRslt != null && bookingRslt.getDataCount() > 0) {
                    for(int i=0; i < bookingRslt.getDataCount(); i++) {
                        param = bookingRslt.getLData(i);
                        param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                        param.setString("regrId", paramData.getString("regrId"));
                        param.setString("mdfrId", paramData.getString("mdfrId"));
                        param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                        param.set("LCompoundDao", comDao);

                        pbc.divideFwdEo(param);

                        param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_CREATE);

                        pbc.divideFwdEo(param);
                    }
                }

            }

            GauceUtil.fillColValue(bookingData, "regrId", paramData.getString("regrId"));
            GauceUtil.fillColValue(bookingData, "mdfrId", paramData.getString("mdfrId"));
            if(bookingData != null && bookingData.getDataCount() > 0) {
//              LMultiData booking = (LMultiData)bookingData.get("OBJECT_TO_GDRs", 0);

                for(int i=0; i < bookingData.getDataCount(); i++) {
                    for(int j=0; j < bookingRslt.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE
                                    && bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                            param = bookingRslt.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));

                            param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                            param.set("LCompoundDao", comDao);
                            pbc.divideFwdEo(param);
                        }
                    }

                    if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_INSERT) {
                        try {
                            LData bookingNo = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewBookingNo", bookingData.getLData(i));

                            if(bookingNo != null && bookingNo.getString("bookingNo") != null && !bookingNo.getString("bookingNo").equals("")) {
                                GauceUtil.modiColValue(bookingData, "bookingNo", bookingNo.getString("bookingNo"));
                            }
                        } catch(Exception sse) {
                            GauceUtil.modiColValue(bookingData, "bookingNo", "BK001");
                        }
                        comDao.add("cud/om/tb_om02019/createBooking", bookingData.getLData(i));
                    } else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE) {
                        comDao.add("cud/om/tb_om02019/updateSalesOrdBooking", bookingData.getLData(i));
                    } else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE) {
                        comDao.add("cud/om/tb_om04002/deleteFisProgRslt", bookingData.getLData(i));
                        comDao.add("cud/om/tb_om02019/deleteBooking", bookingData.getLData(i));
                    }
                }
                comDao.executeUpdate();
            }
//          cDao.setInsertQuery("cud/om/tb_om02019/createBooking");
//          cDao.setUpdateQuery("cud/om/tb_om02019/updateSalesOrdBooking");
//          cDao.setDeleteQuery("cud/om/tb_om02019/deleteBooking");
//          cDao.addWithJobType(bookingData);
//          cDao.executeUpdate();

            paramData.setDouble("totWgt", Double.parseDouble(bookingData.getString("bookingWgt", 0)));
            paramData.setString("wgtUnitCd", bookingData.getString("wgtUnitCd", 0));

            comDao.add("cud/om/tb_om02001/updateSalesOrdFwdHardCoding", paramData); //cys. 2014.1.1 계열해상수출포워딩인 경우 글로벌운영팀으로 hard coding
            comDao.add("cud/om/tb_om02003/updateShipper", paramData);
            comDao.executeUpdate();

            if(bookingData != null && bookingData.getDataCount() > 0) {
                for(int i=0; i < bookingData.getDataCount(); i++) {
                    for(int j=0; j < workRoute.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                            && bookingData.getString("bookingNo", i).equals(workRoute.getString("bookingNo", j))) {
                            param = workRoute.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("workPrgoStatCd", OmConstants.WORK_PROG_STAT_CD_01);
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));
                            param.set("LCompoundDao", comDao);

                            // 확정이후는 변경 안되도록 함
                            LData dcsnCnt = comDao.executeQueryForSingle("select/om/om03/workRouteMngt/checkDcsnCnt", param);

                            if(dcsnCnt.getInt("cnt") > 0) {  // 2009.11.10 cys.
                                // 확정이면 Skip : 분배-계열해상수출포워딩에서 Booking 분할해서 하나 더 생성할경우 이 로직을  실행오더취소를 Skip함
                            }else{
                                pbc.cancelEo(param);

                                pbc.divideEo(param);
                            }


                        }
                    }
                    for(int j=0; j < bookingRslt.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                            && bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                            param = bookingRslt.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));

                            param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_UPDATE);
                            param.set("LCompoundDao", comDao);
                            pbc.divideFwdEo(param);
                        }
                    }
                }
            }

            //한솔제지 스케쥴 전송

            if( (paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_HP)
                 || ("Y".equals(ART_YN) && paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_AT)))
                    && paramData.getString("expTypeCdData") != null
                    && paramData.getString("expTypeCdData").equals(OmConstants.EXP_TYPE_CD_01)) {
                SalesOrdMngtWSC wsc = new SalesOrdMngtWSC();
                String cargoFormCd = "";

                cargoFormCd = paramData.getString("cargoFormCd");
                if(cargoFormCd == null || cargoFormCd.equals("")) {
                    cargoFormCd = "C";
                }
                GauceUtil.fillColValue(bookingData, "cargoFormCd", cargoFormCd);
                LData line = null;
                LMultiData vesselSchds = new LMultiData();
                LData vessel = null;
                if(bookingData != null && bookingData.getDataCount() > 0) {
                    for(int i=0; i < bookingData.getDataCount(); i++) {
                        line = new LData();
                        line.setString("shipCoSignCd", bookingData.getString("shipCoCd", i));
                        LData lineData = comDao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrieveShipCoInfo", line);

                        vessel = new LData();

                        vessel.setString("schdType"         , bookingData.getString("schdType"      , i));
                        vessel.setString("schdNo"           , bookingData.getString("schdNo"        , i));  //스케줄관리번호
                        vessel.setString("podCd"            , bookingData.getString("podCd"         , i));  // POD 코드
                        vessel.setString("polCd"            , bookingData.getString("polCd"         , i));  //POL 코드
                        vessel.setString("shipNm"           , bookingData.getString("shipNm"        , i));  //선박명
                        vessel.setString("portCnt"          , bookingData.getString("portCnt"       , i));  //항차
                        vessel.setString("inlandPortCd"     , bookingData.getString("inlandPortCd"  , i));  //내륙도착지코드
                        vessel.setString("dptPortPrarYmd"   , bookingData.getString("dptPortPrarYmd", i));  //
                        vessel.setString("arvPortPrarYmd"   , bookingData.getString("arvPortPrarYmd", i));  //
                        vessel.setString("inlandPortNm"     , bookingData.getString("inlandPortNm"  , i));  //내륙도착지명
                        vessel.setString("cyClsYmd"         , bookingData.getString("cyClsYmd"      , i));  //CY Closing 일자
                        vessel.setString("cyClsHms"         , bookingData.getString("cyClsHms"      , i));  //CY Closing 시간

                        if(lineData != null && lineData.getString("custShipCoCd") != null && !lineData.getString("custShipCoCd").equals("")) {
                            vessel.setString("shipCoCd"     , lineData.getString("custShipCoCd"));
                        } else {
                            throw new LBizException("등록되지 않은 선사코드(Liner)입니다. Booking No:" + bookingData.getString("shipCoBookingNo", i) + ", 선사코드:" + bookingData.getString("shipCoCd", i));
                        }
                        vessel.setString("cargoFormCd"      , bookingData.getString("cargoFormCd", i));


                        vesselSchds.addLData(vessel);
                    }
                }
                LMultiData resultData = wsc.transferHansolpaperVesselSchedule(vesselSchds);

                if(resultData != null && resultData.getDataCount() > 0) {
                    for(int i=0; i < resultData.getDataCount(); i++) {
                        if(resultData.getString("type", i).equals("E")) {

                            throw new LBizException("hsni.om.err.interface?"+resultData.getString("message", i));
                        }
                    }
                }
            // 전주페이퍼 부킹 등록하면 전주페이퍼 디비에 등록 처리 하도록 함
// start
            } else if(paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_NC)) {
                //comDao.add("cud/om/sapd51t/updateScheduleMapping", bookingData);
                //comDao.executeUpdate();

/**
                // 전주페이퍼 오픈DB 부킹등록 로직 제거 2016-02-15 
                if(bookingData != null && bookingData.getDataCount() > 0) {
                    for(int i=0; i < bookingData.getDataCount(); i++) {

                        LData lBookingInfo = new LData();
                        lBookingInfo = bookingData.getLData(i);

                        LData lCustOrdNo = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSORejectHeaderParam", lBookingInfo);
                        lBookingInfo.setString("custOrdNo"  , lCustOrdNo.getString("custOrdNo"));      // 고객오더 번호
                        LData lFisinfo = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdFISOrdInfo", lBookingInfo);
                        String fclLclSctnCd       = lFisinfo.getString("fclLclSctnCd")==null?"":lFisinfo.getString("fclLclSctnCd");
                        String cneeNm     = lFisinfo.getString("cneeNm")==null?"":lFisinfo.getString("cneeNm");
                        lBookingInfo.setString("fclLclSctnCd"   , fclLclSctnCd);       // FCL/LCL
                        lBookingInfo.setString("cneeNm" , cneeNm);                     // consignee명
  
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE ){
                            comDao.add("cud/om/booking_info/updateBookingInfo", lBookingInfo);
                            comDao.executeUpdate();
                        }else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE){
                            comDao.add("cud/om/booking_info/deleteBookingInfo", lBookingInfo);
                            comDao.executeUpdate();
                        }else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_INSERT){
                            comDao.add("cud/om/booking_info/createBookingInfo", lBookingInfo);
                            comDao.executeUpdate();
                        }
                    }
                }
**/                        
// end

            }
            LLog.debug.println(paramData);
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBranchOceanExpSalesOrdFwdOrdList", paramData);

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "saveBranchOceanExpSalesOrdFwd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveBranchOceanExpSalesOrdFwd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    public boolean saveBranchOceanExpSalesOrdFwdDir(LData inputData) throws LException {
    	LData bookingData = inputData;
//        LCommonDao dao = new LCommonDao();
        laf.application.dao.LCompoundDao comDao = new laf.application.dao.LCompoundDao();

        try{
            LData newSalesOrd       = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo"    , bookingData);
            //LMultiData workRoute    = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteBookingNo", bookingData);
            //LMultiData bookingRslt  = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveBookingRslt", bookingData);
            
            newSalesOrd.setString("cargoFormCd", bookingData.getString("cargoFormCd"));
            newSalesOrd.setString("custExcaOfcrNm", ""); //고객정산담당자
            newSalesOrd.setString("dptArOfcrNm", ""); //CSN PIC

            String updBookingNo = "";
/**
            if(bookingData != null ) {
                boolean dcsnYn = false;

                for(int j=0; j < workRoute.getDataCount(); j++) {
                    if(bookingData.getString("bookingNo").equals(workRoute.getString("bookingNo", j))) {
                        if(workRoute.getInt("cnt", j) > 0) {
                            dcsnYn = true;
                        }
                    }
                }
                for(int j=0; j < bookingRslt.getDataCount(); j++) {
                    if(bookingData.getString("bookingNo").equals(bookingRslt.getString("bookingNo", j))) {
                        if(bookingRslt.getInt("cnt", j) > 0) {
                            dcsnYn = true;
                        }
                    }
                }

                if (dcsnYn)
                    updBookingNo = "N" + bookingData.getString("shipCoBookingNo");
                
                if(!updBookingNo.equals("")) {
                    updBookingNo = "Booking NO:" + updBookingNo;
                    throw new LBizException("hsni.om.err.cannotsave?" + updBookingNo);
                }
            }
**/ 
            //LData param = null;
            //IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            newSalesOrd.setString("mdfrId", bookingData.getString("mdfrId"));
            //최초에는 넘어오는 값이 없어 저장안함.
            //comDao.add("cud/om/tb_om02001/updateCustExcaOfcrNm", newSalesOrd);
            //comDao.executeUpdate();

                //신규이므로 필요없음.
                //comDao.add("cud/om/tb_om02001/updateSalesOrd", newSalesOrd);
                //comDao.executeUpdate();

                //paramData.set("LCompoundDao", comDao);
                //setSalesOrdHistory(paramData); 
/**
            if(bookingRslt != null && bookingRslt.getDataCount() > 0) {
                for(int i=0; i < bookingRslt.getDataCount(); i++) {
                    param = bookingRslt.getLData(i);
                    param.setString("salesOrdNo", bookingData.getString("salesOrdNo"));
                    param.setString("regrId", bookingData.getString("regrId"));
                    param.setString("mdfrId", bookingData.getString("mdfrId"));
                    param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                    param.set("LCompoundDao", comDao);

                    pbc.divideFwdEoHP(param);

                    param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_CREATE);

                    pbc.divideFwdEoHP(param);
                }
            }

            if(bookingData != null ) {

                for(int j=0; j < bookingRslt.getDataCount(); j++) {
                    if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE
                                && bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                        param = bookingRslt.getLData(j);
                        param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                        param.setString("regrId", paramData.getString("regrId"));
                        param.setString("mdfrId", paramData.getString("mdfrId"));

                        param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                        param.set("LCompoundDao", comDao);
                        pbc.divideFwdEoHP(param);
                    }
                }
**/
            if(bookingData != null ) {
            	
                comDao.add("cud/om/tb_om02019/createBooking", bookingData);
                comDao.executeUpdate();
                
                LData divideData = new LData();
                divideData.setString("trmsSctnCd", "C");
                divideData.setString("salesOrdNo", bookingData.getString("salesOrdNo"));
                divideData.setString("bookingNo", bookingData.getString("bookingNo"));
                divideData.setString("regrId", bookingData.getString("regrId"));
                divideData.setString("mdfrId", bookingData.getString("mdfrId"));
                divideData.setString("ifYn", "X");
                IOrdDivMngt ordDivMngt  = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                ordDivMngt.divideFwdEoDir(divideData);
            }
//          cDao.setInsertQuery("cud/om/tb_om02019/createBooking");
//          cDao.setUpdateQuery("cud/om/tb_om02019/updateSalesOrdBooking");
//          cDao.setDeleteQuery("cud/om/tb_om02019/deleteBooking");
//          cDao.addWithJobType(bookingData);
//          cDao.executeUpdate();

            LData paramData = new LData();
            paramData.setString("salesOrdNo", bookingData.getString("salesOrdNo"));
            paramData.setString("custCd", bookingData.getString("custCd"));
            paramData.setString("rptCustCd", bookingData.getString("custCd"));
            paramData.setString("upperPtnCd", bookingData.getString("custCd"));
            paramData.setDouble("totWgt", Double.parseDouble(bookingData.getString("bookingWgt")));
            paramData.setString("wgtUnitCd", bookingData.getString("wgtUnitCd"));
            paramData.setString("expTypeCdData", bookingData.getString("expTypeCd"));
            paramData.setString("cargoFormCd", bookingData.getString("cargoFormCd"));
            
            comDao.add("cud/om/tb_om02001/updateSalesOrdFwdHardCoding", paramData); //cys. 2014.1.1 계열해상수출포워딩인 경우 글로벌운영팀으로 hard coding
            comDao.add("cud/om/tb_om02003/updateShipper", paramData);
            comDao.executeUpdate();
/**
            if(bookingData != null && bookingData.getDataCount() > 0) {
                for(int i=0; i < bookingData.getDataCount(); i++) {
                    for(int j=0; j < workRoute.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                            && bookingData.getString("bookingNo", i).equals(workRoute.getString("bookingNo", j))) {
                            param = workRoute.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("workPrgoStatCd", OmConstants.WORK_PROG_STAT_CD_01);
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));
                            param.set("LCompoundDao", comDao);

                            // 확정이후는 변경 안되도록 함
                            LData dcsnCnt = comDao.executeQueryForSingle("select/om/om03/workRouteMngt/checkDcsnCnt", param);

                            if(dcsnCnt.getInt("cnt") > 0) {  // 2009.11.10 cys.
                                // 확정이면 Skip : 분배-계열해상수출포워딩에서 Booking 분할해서 하나 더 생성할경우 이 로직을  실행오더취소를 Skip함
                            }else{
                                pbc.cancelEo(param);

                                pbc.divideEo(param);
                            }


                        }
                    }
                    for(int j=0; j < bookingRslt.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                            && bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                            param = bookingRslt.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));

                            param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_UPDATE);
                            param.set("LCompoundDao", comDao);
                            pbc.divideFwdEo(param);
                        }
                    }
                }
            }
**/
            //한솔제지 스케쥴 전송
            
//            LLog.debug.println(paramData);

            if( (paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_HP)
                 || ("Y".equals(ART_YN) && paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_AT)))
                    && paramData.getString("expTypeCdData") != null
                    && paramData.getString("expTypeCdData").equals(OmConstants.EXP_TYPE_CD_01)) {
                SalesOrdMngtWSC wsc = new SalesOrdMngtWSC();
                String cargoFormCd = "";

                cargoFormCd = paramData.getString("cargoFormCd");
                if(cargoFormCd == null || cargoFormCd.equals("")) {
                    cargoFormCd = "C";
                }
                LData line = null;
                LMultiData vesselSchds = new LMultiData();
                LData vessel = null;
                if(bookingData != null ) {
                    line = new LData();
                    line.setString("shipCoSignCd", bookingData.getString("shipCoCd"));
                    LData lineData = comDao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrieveShipCoInfo", line);
/**       
                    bookingData.setString("arvArCd"     , newSalesOrd.getString("arvArCd"       ));  //내륙도착지코드
                    LData schdLData = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveFisSchdNo", bookingData);
                    
                    if( schdLData != null && schdLData.getString("schMag") != null && !schdLData.getString("schMag").equals("") )
                    	vessel.setString("schdNo"           , schdLData.getString("schMag"        ));
**/                    
                    //LLog.debug.println(  "schdLData====>" + schdLData);
                    
                    vessel = new LData();
                    vessel.setString("schdType"         , bookingData.getString("schdType"      ));
                    vessel.setString("schdNo"           , bookingData.getString("schdNo"        ));  //스케줄관리번호
                    vessel.setString("podCd"            , bookingData.getString("podCd"         ));  // POD 코드
                    vessel.setString("polCd"            , bookingData.getString("polCd"         ));  //POL 코드
                    vessel.setString("shipNm"           , bookingData.getString("shipNm"        ));  //선박명
                    vessel.setString("portCnt"          , bookingData.getString("portCnt"       ));  //항차
                    vessel.setString("inlandPortCd"     , newSalesOrd.getString("arvArCd"       ));  //내륙도착지코드
                    vessel.setString("dptPortPrarYmd"   , bookingData.getString("dptPortPrarYmd"));  //
                    vessel.setString("arvPortPrarYmd"   , bookingData.getString("arvPortPrarYmd"));  //
                    //vessel.setString("inlandPortNm"     , bookingData.getString("inlandPortNm"  ));  //내륙도착지명
                    vessel.setString("inlandPortNm"     , newSalesOrd.getString("arvArNm"       ));  //내륙도착지명
                    vessel.setString("cyClsYmd"         , bookingData.getString("cyClsYmd"      ));  //CY Closing 일자
                    vessel.setString("cyClsHms"         , bookingData.getString("cyClsHms"      ));  //CY Closing 시간
                    
                    if(lineData != null && lineData.getString("custShipCoCd") != null && !lineData.getString("custShipCoCd").equals("")) {
                        vessel.setString("shipCoCd"     , lineData.getString("custShipCoCd"));
                    } else {
                        throw new LBizException("등록되지 않은 선사코드(Liner)입니다. Booking No:" + bookingData.getString("shipCoBookingNo") + ", 선사코드:" + bookingData.getString("shipCoCd"));
                    }
                    vessel.setString("cargoFormCd"      , bookingData.getString("cargoFormCd"));
                    vesselSchds.addLData(vessel);
                     
                }
                
//                LLog.debug.println("vesselSchds>>>>>>>>>>"+vesselSchds);
//                try {
//                	LLog.debug.println("vesselSchds>>>>>>>>>>"+vesselSchds.getDataCount());	
//                	if(true) throw new LSysException("LEEPJ>>>>>>>>>>>>>>>>>>>>>>>>>ERROR");
                    LMultiData resultData = wsc.transferHansolpaperVesselSchedule(vesselSchds);
//	                LLog.debug.println("resultData>>>>>>>>>>"+resultData.getDataCount());
	
	                if(resultData != null && resultData.getDataCount() > 0) {
	                    for(int i=0; i < resultData.getDataCount(); i++) {
	                        if(resultData.getString("type", i).equals("E")) {
	
	                            throw new LSysException("hsni.om.err.interface?"+resultData.getString("message", i));
	                        }
	                    }
	                }
//                }
//                catch(Exception e) {
//                	throw new LSysException("ERROR");
//                }
            }
            
            return true;
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "saveBranchOceanExpSalesOrdFwdDir()" + "=>" + be.getMessage());
            return false;
            //throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveBranchOceanExpSalesOrdFwdDir()" + "=>" + se.getMessage());
            return false;
            //throw new LSysException("pbf.err.com.save", se);
        }
    }      
/**/  
    
    /**
     * 항공수입판매오더포워딩 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveAirImpSalesOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{

            if(inputData.containsKey("fwdPtn"))
                return dao.executeQuery("select/om/om02/salesOrd/retrieveAirImpPtnFwdOrd", inputData);
            else
                return dao.executeQuery("select/om/om02/salesOrd/retrieveAirImpSalesOrd", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveAirImpSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 항공수입판매오더포워딩 정보를 추가/수정/삭제하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveAirImpSalesOrd(LMultiData param) throws LException {
        LMultiData inputData = (LMultiData)param.get("IN_DS1", 0);
        LData reqData = (LData)param.get("INPUT", 0);

        laf.application.dao.LCommonDao  commonDao = null;
        LCommonDao dao = new LCommonDao();
        LCompoundDao dao2 = new LCompoundDao();
        laf.application.dao.LCompoundDao dao3 = new laf.application.dao.LCompoundDao();
        String fwdEoNo = inputData.getString("fwdEoNo", 0);
        try{

            if(inputData.containsKey("salesOrdCnclReason") && !inputData.getString("salesOrdCnclReason",0).equals("")){//오더취소
                LData cancelSOData = new LData();
                cancelSOData.setString("regrId", inputData.getString("regrId", 0));
                cancelSOData.setString("mdfrId", inputData.getString("mdfrId", 0));
                cancelSOData.setString("cntDongProcYn", inputData.getString("cntDongProcYn", 0));
                cancelSOData.setString("salesOrdCnclReason", inputData.getString("salesOrdCnclReason", 0));
                cancelSOData.setString("salesOrdNo", inputData.getString("salesOrdNo", 0));
                cancelSOData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                cancelSOData.set("LCompoundDao", dao3);

                if(fwdEoNo != null && !fwdEoNo.equals("")){
                    IOrdDivMngt pbc = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                    pbc.divideFwdEo(cancelSOData);
                }

                return cancelSO(cancelSOData);
            }

/*
판매오더번호를 채번한다.
'S' + 일련번호 (SQ_MA02001 시퀀스, 9자리를 맞추기 위해 앞에 '0'을 채운다.)
*/
            int jobType = inputData.getInt("GauceJobType", 0);
            String salesOrdNo = "";
            LData input = new LData();

            if(jobType == GauceDataRow.TB_JOB_INSERT) {
                commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);
                LData result = commonDao.executeQueryForSingle();
                salesOrdNo = result.getString("salesOrdNo");

                GauceUtil.modiColValue(inputData, "salesOrdNo", salesOrdNo);
                GauceUtil.modiColValue(inputData, "salesOrdStatCd", OmConstants.SALES_ORD_STAT_CD_02);

            } else {
                salesOrdNo = inputData.getString("salesOrdNo", 0);
            }
            GauceUtil.fillColValue(inputData, "oceanAirSctnCd", OmConstants.OCEAN_AIR_SCTN_CD_AIR);
            GauceUtil.fillColValue(inputData, "expImpDomSctnCd", OmConstants.EXP_IMP_INCOME);
            GauceUtil.modiColValue(inputData, "cargoFormCd", OmConstants.CARGO_FORM_CONTAINER);
            GauceUtil.modiColValue(inputData, "fclLclSctnCd", OmConstants.FCL_LCL_SCTN_CD_LCL);

            LLog.debug.println("\n\n\n");
            LLog.debug.println(inputData.getLData(0));
            LLog.debug.println("\n\n\n");
            
            //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoFw(inputData.getLData(0));

            if( ctrtCustInfo != null ) {
            	GauceUtil.modiColValue(inputData, "ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
            	GauceUtil.modiColValue(inputData, "bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
            	GauceUtil.modiColValue(inputData, "sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
            	//GauceUtil.modiColValue(inputData, "salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
            }                
            //--------------------------------------------------------------------------------------------------
           
            LLog.debug.println(inputData.getLData(0));
            LLog.debug.println("\n\n\n");
/*
Tpl 항공수출판매오더 포워딩 헤더 정보를 Insert한다.
*/
            LData tmpData = new LData();
            tmpData.setString("regrId", inputData.getString("regrId", 0));
            tmpData.setString("mdfrId", inputData.getString("mdfrId", 0));
            tmpData.setString("salesOrdNo", inputData.getString("salesOrdNo", 0));
            tmpData.set("LCompoundDao", dao3);

            IOrdDivMngt pbc = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);

            if(jobType == GauceDataRow.TB_JOB_INSERT) {
                tmpData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_CREATE);

                dao2.setInsertQuery("cud/om/tb_om02001/createAirImpSalesOrd");
                dao2.addWithJobType(inputData);

                dao2.setInsertQuery("cud/om/tb_om02003/createAirImpSalesOrd");
                dao2.addWithJobType(inputData);

            } else if(jobType == GauceDataRow.TB_JOB_UPDATE) {
                tmpData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_UPDATE);

                dao2.setUpdateQuery("cud/om/tb_om02001/updateAirImpSalesOrd");
                dao2.addWithJobType(inputData);

                dao2.setUpdateQuery("cud/om/tb_om02003/updateAirImpSalesOrd");
                dao2.addWithJobType(inputData);

                //수정모듈 호출

            }

            dao2.executeUpdate();
            if(fwdEoNo != null && !fwdEoNo.equals(""))
                pbc.divideFwdEo(tmpData);

            LData paramData = new LData();
            paramData.setString("salesOrdNo", salesOrdNo);
            paramData.setString("salesOrdMdfReason", reqData.getString("salesOrdMdfReason"));
            paramData.setString("regrId", inputData.getString("regrId"  , 0));
            paramData.setString("mdfrId", inputData.getString("mdfrId"  , 0));
            paramData.set("LCompoundDao", dao3);

            setSalesOrdHistory(paramData);

            input.setString("salesOrdNo", salesOrdNo);

            return dao.executeQuery("select/om/om02/salesOrd/retrieveAirImpSalesOrd", input);
            
        } catch (LBizException be) {
            throw be;            
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveAirImpSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }
    /**
     * 항공수출판매오더포워딩 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveAirExpSalesOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveAirExpSalesOrd", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveAirExpSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 항공수출판매오더포워딩 정보를 추가/수정/삭제하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveAirExpSalesOrd(LMultiData param) throws LException {
        LMultiData inputData = (LMultiData)param.get("IN_DS1", 0);
        LData reqData = (LData)param.get("INPUT", 0);
        
        laf.application.dao.LCommonDao  commonDao = null;
        LCommonDao dao = new LCommonDao();
        LCompoundDao dao2 = new LCompoundDao();
        laf.application.dao.LCompoundDao dao3 = new laf.application.dao.LCompoundDao();
        String fwdEoNo = inputData.getString("fwdEoNo", 0);
        try{
            if(inputData.containsKey("salesOrdCnclReason")){//오더취소
                LData cancelSOData = new LData();
                cancelSOData.setString("regrId", inputData.getString("regrId", 0));
                cancelSOData.setString("mdfrId", inputData.getString("mdfrId", 0));
                cancelSOData.setString("cntDongProcYn", inputData.getString("cntDongProcYn", 0));
                cancelSOData.setString("salesOrdCnclReason", inputData.getString("salesOrdCnclReason", 0));
                cancelSOData.setString("salesOrdNo", inputData.getString("salesOrdNo", 0));
                cancelSOData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                cancelSOData.set("LCompoundDao", dao3);

                if(fwdEoNo != null && !fwdEoNo.equals("")){
                    IOrdDivMngt pbc = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                    pbc.divideFwdEo(cancelSOData);
                }
                return cancelSO(cancelSOData);
            }

/*
판매오더번호를 채번한다.
'S' + 일련번호 (SQ_MA02001 시퀀스, 9자리를 맞추기 위해 앞에 '0'을 채운다.)
*/
            int jobType = inputData.getInt("GauceJobType", 0);
            String salesOrdNo = "";
            LData input = new LData();
            LData result = null;

            if(jobType == GauceDataRow.TB_JOB_INSERT) {
                commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);
                result = commonDao.executeQueryForSingle();
                salesOrdNo = result.getString("salesOrdNo");

                GauceUtil.modiColValue(inputData, "salesOrdNo", salesOrdNo);
                GauceUtil.modiColValue(inputData, "salesOrdStatCd", OmConstants.SALES_ORD_STAT_CD_02);

                //String blKindCd = inputData.getString("blKindCd", 0);
                //if(blKindCd.equals("C")){
                if(inputData.getString("hblNo", 0) == null || inputData.getString("hblNo", 0).equals("")) {
                    commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveHblNo", input);
                    result = commonDao.executeQueryForSingle();
                    String hblNo = result.getString("hblNo");
                    GauceUtil.modiColValue(inputData, "hblNo", hblNo);
                }

                //}

            }else if(jobType == GauceDataRow.TB_JOB_UPDATE) {
                if(inputData.getString("hblNo", 0) == null || inputData.getString("hblNo", 0).equals("")) {
                    commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveHblNo", input);
                    result = commonDao.executeQueryForSingle();
                    String hblNo = result.getString("hblNo");
                    GauceUtil.modiColValue(inputData, "hblNo", hblNo);
                }

                salesOrdNo = inputData.getString("salesOrdNo", 0);

            } else {
                salesOrdNo = inputData.getString("salesOrdNo", 0);
            }
            GauceUtil.fillColValue(inputData, "oceanAirSctnCd", OmConstants.OCEAN_AIR_SCTN_CD_AIR);
            GauceUtil.fillColValue(inputData, "expImpDomSctnCd", OmConstants.EXP_IMP_EXPORT);
            GauceUtil.modiColValue(inputData, "cargoFormCd", OmConstants.CARGO_FORM_CONTAINER);
            GauceUtil.modiColValue(inputData, "fclLclSctnCd", OmConstants.FCL_LCL_SCTN_CD_LCL);

            LLog.debug.println("\n\n\n");
            LLog.debug.println(inputData.getLData(0));
            
            //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoFw(inputData.getLData(0));

            if( ctrtCustInfo != null ) {
            	GauceUtil.modiColValue(inputData, "ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
            	GauceUtil.modiColValue(inputData, "bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
            	GauceUtil.modiColValue(inputData, "sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
            	//GauceUtil.modiColValue(inputData, "salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
            }                
            //--------------------------------------------------------------------------------------------------

            LLog.debug.println("\n\n\n");
            LLog.debug.println(inputData.getLData(0));
 
/*
Tpl 항공수출판매오더 포워딩 헤더 정보를 Insert한다.
*/
            LData tmpData = new LData();
            tmpData.setString("regrId", inputData.getString("regrId", 0));
            tmpData.setString("mdfrId", inputData.getString("mdfrId", 0));
            tmpData.setString("salesOrdNo", inputData.getString("salesOrdNo", 0));
            tmpData.set("LCompoundDao", dao3);

            IOrdDivMngt pbc = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);

            if(jobType == GauceDataRow.TB_JOB_INSERT) {
                tmpData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_CREATE);
                dao2.setInsertQuery("cud/om/tb_om02001/createAirExpSalesOrd");
                dao2.addWithJobType(inputData);

                dao2.setInsertQuery("cud/om/tb_om02003/createAirExpSalesOrd");
                dao2.addWithJobType(inputData);

            } else if(jobType == GauceDataRow.TB_JOB_UPDATE) {
                tmpData.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_UPDATE);
                dao2.setUpdateQuery("cud/om/tb_om02001/updateAirExpSalesOrd");
                dao2.addWithJobType(inputData);

                dao2.setUpdateQuery("cud/om/tb_om02003/updateAirExpSalesOrd");
                dao2.addWithJobType(inputData);

                //수정모듈 호출

            }

            dao2.executeUpdate();

            if(fwdEoNo != null && !fwdEoNo.equals(""))
                pbc.divideFwdEo(tmpData);

            LData paramData = new LData();
            paramData.setString("salesOrdNo", salesOrdNo);
            paramData.setString("salesOrdMdfReason", reqData.getString("salesOrdMdfReason"));
            paramData.setString("regrId", inputData.getString("regrId"  , 0));
            paramData.setString("mdfrId", inputData.getString("mdfrId"  , 0));
            paramData.set("LCompoundDao", dao3);

            setSalesOrdHistory(paramData);

            input.setString("salesOrdNo", salesOrdNo);

            return dao.executeQuery("select/om/om02/salesOrd/retrieveAirExpSalesOrd", input);
            
        } catch (LBizException be) {
            throw be;            
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveAirExpSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 수출입 판매오더 실행관리 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveExpImpSalesOrdExceMngt(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{

            retrieveOrdAccessAuth(inputData);

            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveExpImpSalesOrdExceMngtHead", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveExpImpSalesOrdExceMngtItem", inputData));
            dataHolder.add("IN_DS3", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdPrclTitle", inputData));
            dataHolder.add("IN_DS4", dao.executeQuery("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtItemPrclTitle", inputData));
            dataHolder.add("IN_DS5", dao.executeQuery("select/om/om02/salesOrd/retrieveBranchOceanExpSalesOrdBookingList", inputData));
            dataHolder.add("IN_DS6", dao.executeQuery("select/om/om02/salesOrd/retrieveImpCntrList", inputData));
            dataHolder.add("IN_DS7", dao.executeQuery("select/om/om02/salesOrd/retrieveExpImpSalesOrdExceFis", inputData));
            return dataHolder;

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveExpImpSalesOrdExceMngt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 항공수출판매오더포워딩 MAWB 정보조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveMbl(LData inputData) throws LException {
        try{
            /*LLog.debug.println("---start IF_OM_FW_CopyMAWB");
            LLog.debug.println(inputData.toString());
            inputData.setString("serviceId", "IF_OM_FW_CopyMAWB");
            LMultiData result = AutoWSC.retrieve(inputData);
            LLog.debug.println(result.toString());
            if(result.containsKey("BODY")){
                result = (LMultiData)result.get("BODY", 0);
                LLog.debug.println("---end IF_OM_FW_CopyMAWB");
            }else{
                LLog.debug.println("---no data end IF_OM_FW_CopyMAWB");
                throw new  LBizException("조회된 데이타가 없습니다!");
            }*/
            hsni.om.om02.salesOrdMngt.wsc.SalesOrdMngtWSC svc = new hsni.om.om02.salesOrdMngt.wsc.SalesOrdMngtWSC();
            LMultiData result = svc.retrieveMbl(inputData);
//            LData header = (LData)result.get("LDATA_TO_GDC", 0);
//            LLog.debug.println(header.toString());
//            result = (LMultiData)result.get("OBJECT_TO_GDRs", 0);
//            LLog.debug.println(result.toString());

          return result;
        } catch (LBizException ex) {
            throw ex;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveMbl()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 수출입 판매오더 실행관리 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void saveExpImpSalesOrdExceMngt(LMultiData inputData) throws LException {
        LMultiData SalesOrdMngtData     = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData SalesOrdMngtListData = (LMultiData)inputData.get("IN_DS2",0 );
        LMultiData SalesOrdFisData      = (LMultiData)inputData.get("IN_DS3",0 );
        LMultiData bookingListData      = (LMultiData)inputData.get("IN_DS4",0 );
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

        try{
            LLog.debug.println("\nsalesOrdFis\n"+SalesOrdFisData.getLData(0));

            LData salesOrd          = SalesOrdMngtData.getLData(0);
            LLog.debug.println("\nsalesOrd\n"+salesOrd);

            Set   salesOrdFisSet    = SalesOrdFisData.getLData(0).keySet();
            Iterator salesOrdFisIte = salesOrdFisSet.iterator();
            while(salesOrdFisIte.hasNext()){
                String dataKey = salesOrdFisIte.next().toString();
                if(dataKey != null && !dataKey.equals("GauceJobType")&& !dataKey.equals("updFlag")) {
                    salesOrd.setString(dataKey, SalesOrdFisData.getString(dataKey, 0));
                }
            }

            LLog.debug.println("\nsalesOrd\n"+salesOrd);

            LMultiData salesOrdItem = new LMultiData();
            if(SalesOrdMngtListData != null && SalesOrdMngtListData.getDataCount() > 0) {
                for(int i=0; i < SalesOrdMngtListData.getDataCount(); i++) {
                    LData temp = SalesOrdMngtListData.getLData(i);
                    temp.setString("delYn", "N");
                    temp.setString("addYn", "N");

                    if(temp.containsKey("GauceJobType") && temp.getInt("GauceJobType") == GauceDataRow.TB_JOB_DELETE) {
                        temp.setString("delYn", "Y");
                    }
                    if(temp.containsKey("GauceJobType") && temp.getInt("GauceJobType") == GauceDataRow.TB_JOB_INSERT) {
                        temp.setString("addYn", "Y");
                    }

                    salesOrdItem.addLData(temp);
                }
            }

            //국내내수SO수정 모듈 호출 -수정요망
            LMultiData dataHolder = new LMultiData();
            dataHolder.add("salesOrd"       , salesOrd);
            dataHolder.add("salesOrdItem"   , salesOrdItem);

            LData salesOrdPrcl = new LData();
            Set newSalesOrdPrclSet = SalesOrdMngtData.getLData(0).keySet();
            Iterator newSalesOrdPrclIte = newSalesOrdPrclSet.iterator();
            while(newSalesOrdPrclIte.hasNext()){
                String dataKey = newSalesOrdPrclIte.next().toString();
                if(dataKey != null && !dataKey.equals("GauceJobType")&& !dataKey.equals("updFlag")) {
                    if(dataKey.equals("salesOrdNo")) {
                        salesOrdPrcl.setString("salesOrdNo", SalesOrdMngtData.getString("salesOrdNo", 0));
                    } else {
                        if(dataKey.substring(0,3).equals("col")) {
                            salesOrdPrcl.setString(dataKey, SalesOrdMngtData.getString(dataKey, 0));
                        }
                    }
                }
            }
            dataHolder.add("salesOrdPrcl",salesOrdPrcl);

            LMultiData itemPrcl = new LMultiData();
            LData temp = null;
            if(SalesOrdMngtListData != null && SalesOrdMngtListData.getDataCount() > 0) {
                for(int i=0; i < SalesOrdMngtListData.getDataCount(); i++) {
                    temp = new LData();
                    Set itemPrclSet = SalesOrdMngtListData.getLData(i).keySet();
                    Iterator itemPrclIte = itemPrclSet.iterator();
                    while(itemPrclIte.hasNext()){
                        String dataKey = itemPrclIte.next().toString();
                        if(dataKey != null && !dataKey.equals("GauceJobType") && !dataKey.equals("updFlag")) {
                            if(dataKey.equals("salesOrdNo")) {
                                temp.setString("salesOrdNo", SalesOrdMngtListData.getString("salesOrdNo", i));
                            } else if(dataKey.equals("lineNo")) {
                                    temp.setString("lineNo", SalesOrdMngtListData.getString("lineNo", i));
                            } else if(dataKey.equals("GauceJobType")) {
                                temp.set("GauceJobType", SalesOrdMngtListData.get("GauceJobType", i));
                            } else {
                                if(dataKey.substring(0,3).equals("col")) {
                                    temp.setString(dataKey, SalesOrdMngtListData.getString(dataKey, i));
                                }
                            }
                        }
                    }
                    itemPrcl.addLData(temp);
                }
            }
            dataHolder.add("salesOrdItemPrcl"   , itemPrcl);

            //dataHolder.add("salesOrdFis", SalesOrdFisData.getLData(0));
            dataHolder.add("salesOrdFis", null);
            dataHolder.add("booking"    , bookingListData);
            dataHolder.add("INPUT"      , (LData)inputData.get("INPUT", 0));
            dataHolder.add("LCompoundDao", dao);
            LData param = new LData();
            param.setString("domMdfProcYn", "Y");
            param.setString("mdfDlyProcYn", "N");

            updateSalesOrd(dataHolder, param);
            LLog.debug.println("updateDomSO 처리 완료");
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveExpImpSalesOrdExceMngt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }
    /**
     * 한솔제지 수입컨테이너 생성 메소드
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LData createHansolpaperImpCntr(LMultiData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);
        LMultiData mData = CommGauDaoUtil.resetParam(inputData);

        LData retVal = new LData();

        LData       input   = (LData)mData.get("INPUT", 0);
        LMultiData  header  = (LMultiData)mData.get("IN_DS1", 0);
        LMultiData  item    = (LMultiData)mData.get("IN_DS2", 0);

        int ordQty = 0;
        int cnt = 0;
        try {
            if(!input.getString("iFlag").equals("D")) {
                if(header != null && header.keySize("custOrdNo") > 0) {
                    LData custOrder = dao.executeQueryForSingle("select/om/om01/custOrdReg/retrieveImpBlCustOrd", header.getLData(0));
                    if(custOrder != null) {
                        if(custOrder.getString("ordQty") != null && !custOrder.getString("ordQty").equals("")) {
                            ordQty = Integer.parseInt(custOrder.getString("ordQty"));
                        }
                    }

                    cnt = header.keySize("custOrdNo");

                    if(ordQty != cnt) {
                        throw new LBizException("컨테이너 수량이 일치하지 않습니다.");
                    }
                }
            }
            if(!input.getString("iFlag").equals("I")) {
                LData salesOrd = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpCntrSalesOrdExist", header.getLData(0));
                if(salesOrd != null && salesOrd.getString("salesOrdNo") != null && !salesOrd.getString("salesOrdNo").equals("")) {
                    throw new LBizException("B/L확정되어 수정/취소 할 수 없습니다.");
                }
            }
            if(input.getString("iFlag").equals("I")) {
                dao.add("cud/om/tb_om02205i/createHansolpaperImpCntrIf", header);
                dao.add("cud/om/tb_om02206i/createHansolpaperImpCntrItemIf", item);
            } else if(input.getString("iFlag").equals("U")) {
                dao.add("cud/om/tb_om02206i/deleteHansolpaperImpCntrItemIf", header);
                dao.add("cud/om/tb_om02205i/deleteHansolpaperImpCntrIf", header);

                dao.add("cud/om/tb_om02205i/createHansolpaperImpCntrIf", header);
                dao.add("cud/om/tb_om02206i/createHansolpaperImpCntrItemIf", item);
            } else  if(input.getString("iFlag").equals("D")) {
                dao.add("cud/om/tb_om02206i/deleteHansolpaperImpCntrItemIf", item);
                dao.add("cud/om/tb_om02205i/deleteHansolpaperImpCntrIf", header);
            }
            dao.executeUpdate();

            retVal.setString("type"     , "S");

            if(header.getLData(0).getString("custOrdNo") != null){
                String custOrdNo = header.getLData(0).getString("custOrdNo");
                retVal.setString("message"  , "작업이 성공적으로 수행되었습니다.-["+custOrdNo+"]");
            }else{
                retVal.setString("message"  , "작업이 성공적으로 수행되었습니다.");
            }

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(this.getClass().getName() + "." + "createHansolpaperImpCntr()" + "=>" + se.getMessage());
            throw new LSysException("수입 컨테이너 생성시 오류가 발생했습니다.", se);
        }

        return retVal;

    }

    /** 한솔홈데코 수입 BL 확정 정보를 전송하는 메소드.
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    * 고객오더번호
    * 확정구분코드
    * 변경구분코드 - '1'
    * 입항일자
    * 하역수량
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public void transferHansolhomedecoImpBlDcsn(LData inputData) throws LException {

        LData param = new LData();
        try {
            param.setString("custOrdNo"     , inputData.getString("custOrdNo"));
            param.setString("dcsnSctnCd"    , inputData.getString("dcsnSctnCd"));
            param.setString("chgSctnCd"     , inputData.getString("chgSctnCd"));
            param.setString("arvPortYmd"    , inputData.getString("arvPortYmd"));
            param.setString("cgwrkQty"      , inputData.getString("cgwrkQty"));

            SalesOrdMngtWSC wsc = new SalesOrdMngtWSC();
            LData resultData = wsc.transferHansolhomedecoImpBlDcsn(param);

            if(resultData != null && resultData.getString("type") != null && resultData.getString("type").equals("E")) {

                throw new LBizException("hsni.om.err.interface?"+resultData.getString("message"));
            } else if(resultData == null || resultData.getString("type") == null){
                throw new LBizException("hsni.om.err.interface?인터페이스 결과 수신 오류");
            }
        }catch (LBizException le) {

            LLog.err.println(  this.getClass().getName() + "." + "transferHansolhomedecoImpBIDcsn()" + "=>" + le.getMessage());
            throw le;
        }catch(Exception se) {

            LLog.err.println(this.getClass().getName() + "." + "transferHansolhomedecoImpBIDcsn()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

    }

    /** 납품보류를  처리하는 메소드
    *
    * @param salesOrd 오더수정으로 부터 전달받은 input LDataProtocol
    *
    * @return void 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public void processAptdDly(LData salesOrd, LMultiData salesOrdItem) throws LException {

        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(salesOrd);
        LLog.debug.println("salesOrd\n" + salesOrd);

        try {

            salesOrd.setString("backOrdYn", "Y");
            dao.add("cud/om/tb_om02001/updateBackOrdYn", salesOrd);
            dao.executeUpdate();

            IWorkRouteMngt pbc  = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);

            for (int z=0; z<salesOrdItem.getDataCount(); z++) {
                LData   item    = salesOrdItem.getLData(z);

                LMultiData workRoute = dao.executeQuery("select/om/om03/workRouteMngt/retrieveMdfWorkRouteList", item);
                LData workRouteParam = null;
                for(int i=0; i < workRoute.getDataCount(); i++) {
                    workRouteParam = workRoute.getLData(i);

                    //경로삭제 처리
                    LMultiData workParam     = new LMultiData();
                    workParam.addLData(workRouteParam);

                    LData input = new LData();
                    input.setString("regrId", salesOrd.getString("regrId"));
                    input.setString("mdfrId", salesOrd.getString("mdfrId"));
                    LMultiData multiData     = new LMultiData();
                    multiData.add("IN_DS1", workParam);
                    multiData.add("INPUT" , input);

                    CompDaoUtil.deliverLCompoundDao(salesOrd, multiData);
                    pbc.deleteWorkRoute(multiData);
                }
            }

        }catch(LBizException be) {
            throw be;
        }catch(Exception se) {
            se.printStackTrace();
            LLog.err.println(this.getClass().getName() + "." + "processAptdDly()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

    }

    /** 판매오더를 자동완료 처리하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public void processSalesOrdAutoCmpt(LData inputData) throws LException {
/*
1. 오더유형 조회
2. 작업경로 실행 완료 여부 확인
    (판매오더번호로 생성된 작업경로의 각 단계별로 실적이 모두 접수되었는 지 확인함)

3. 실적물량 완료 여부 확인
    (작업단계별 아이템의 실적 물량의 sum이 오더량과 맞는 지 확인함. - 라인별로 확인.)
    (라인별로 more/less에 값이 있는 경우에는 구간에 들어오면 OK, more/less 없으면 물량이 정확히 일치해야 함)
    (물량 비교는 기본단위로 함. 기본단위가 수량단위이면 qty, 중량단위이면 wgt, CBM이면 cbm으로 비교)

4. 포워딩 완료 여부 확인
   오더유형의 복합물류여부가 'Y'인 경우에만 실행함

   Booking이 있는 오더이면 모든 Booking에 대해 포워딩 작업완료 '04'가 접수되었는 지 확인.
   Booking이 없는 오더이면 판매오더번호에 대해 포워딩 작업완료 '04'가 접수되었는 지 확인.



Case 별로 위의 완료 요건을 충족한 경우에는 판매오더 완료여부를 변경함.

변경대상 컬럼 :
판매오더상태 : '06' (완료)
판매오더완료구분코드 : '01' (자동완료)
판매오더완료일시 : sysdate
*/
        laf.application.dao.LCompoundDao cDao = CompDaoUtil.getTransaction(inputData);
        LLog.debug.println("inputData\n" + inputData);
        boolean cmptYn = true;

        try {

            LData cData = new LData();
            cData.setString("salesOrdNo", inputData.getString("salesOrdNo"));
            cData.setString("salesOrdStatCd", OmConstants.SALES_ORD_STAT_CD_06);
            LData cmptData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdAutoCmptYn", cData);
            if(cmptData != null && cmptData.getInt("cnt") > 0) {
                return;
            }

            // 출고운송인 경우 도착실적이 들어오지 않더라도 출고실적만 들어와도 물량만 완료조건에 맞다면 자동완료 처리한다.
            // 왜냐하면 출고실적과 도착실적이 동시에 들어오는 경우 자동완료가 안되는 것을 막기위함
            /*
            LData workStepData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveWorkStep", inputData);
            String outTransYn = "N";
            if(workStepData != null ) {
                if(workStepData.getInt("cnt")== 2 &&  workStepData.getString("inWmsYn").equals("N")
                   && workStepData.getString("outWmsYn").equals("Y")
                   && workStepData.getString("tmsYn").equals("Y")){
                    outTransYn = "Y";
                }
            }
            */

            LData cmptCheckData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSaleOrdItemCmptCheck", inputData);
            LData ordType = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdType", inputData);

            if(cmptCheckData != null && cmptCheckData.getInt("cnt") > 0) {
                LLog.debug.println("ordType==============>\n" + ordType);

                //한솔제지 수출오더인 경우 자동완료 안함
                if(ordType != null && ordType.getString("rptCustCd") != null
                        && (ordType.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                                || ("Y".equals(ART_YN) && ordType.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)))
                        && ordType.getString("expImpDomSctnCd") != null && ordType.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_EXPORT)) {
                    cmptYn = false;
                //수입이고 출고/입고가 포함된 오더면 자동완료 안함
                } else if(ordType.getString("expImpDomSctnCd") != null && ordType.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_INCOME)
                        && (ordType.getString("inOutYn") != null && ordType.getString("inOutYn").equals("Y")) ) {
                        cmptYn = false;
                } else {
                    if(ordType != null && ordType.getString("logisSvcSctnCd") != null && !ordType.getString("logisSvcSctnCd").equals(OmConstants.LOGIS_SVC_SCTN_CD_15)) {

                        /*
                        LData workStep = new LData();
                        if(outTransYn.equals("N")){
                            workStep = cDao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkStepRsltCnt", inputData);
                        }else{ // 출고운송일 경우 도착실적이 들어오지 않더라도 출고실적만 들어와도 물량만 완료조건에 맞다면 자동완료 처리
                            workStep = cDao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkStepRsltCntOutTrans", inputData);
                        }
                        */

                        LData workStep = cDao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkStepRsltCnt", inputData);

                        LLog.debug.println("workStep Rslt\n" + workStep);
                        if(workStep != null && workStep.getInt("cnt") > 0) {
                            cmptYn = false;
                        } else {
                            LMultiData itemRslt = cDao.executeQuery("select/om/om02/salesOrd/retrieveItemRsltCmptYn", inputData);
                            LLog.debug.println("item Rslt\n" + itemRslt);
                            int count = 0;
                            if(itemRslt != null && itemRslt.getDataCount() > 0) {
                                for(int i=0; i < itemRslt.getDataCount(); i++) {
                                    if(itemRslt.getString("caseYn", i).equals("N")) {
                                        count++;
                                    }
                                }
                                if(count > 0) {
                                    cmptYn = false;
                                }
                            } else {
                                cmptYn = false;
                            }
                        }

//                      LMultiData workStep = cDao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkStepList", inputData);
//                      LLog.debug.println("workStep Rslt\n" + workStep);
//                      if(workStep != null && workStep.getDataCount() > 0) {
//                          int cnt = 0;
//                          for(int x=0; x < workStep.getDataCount(); x++) {
//                              LData work = workStep.getLData(x);
//                              if(work.getString("workStepCd").equals(OmConstants.WORK_STEP_IN)) {
//                                  work.setString("rsltSctnCd", OmConstants.RSLT_SCTN_CD_05);
//                              } else if(work.getString("workStepCd").equals(OmConstants.WORK_STEP_OUT)) {
//                                  work.setString("rsltSctnCd", OmConstants.RSLT_SCTN_CD_04);
//                              } else if(work.getString("workStepCd").equals(OmConstants.WORK_STEP_TRANS)) {
//                                  work.setString("rsltSctnCd", OmConstants.RSLT_SCTN_CD_02);
//                              }
//                              LData rslt = cDao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkStepRsltCmptYn", work);
//                              if(rslt == null || rslt.getString("rsltSctnCd") == null || rslt.getString("rsltSctnCd").equals("")) {
//                                  cnt++;
//                              }
//                          }
//                          if(cnt > 0) {
//                              cmptYn = false;
//                          } else {
//                              LMultiData itemRslt = cDao.executeQuery("select/om/om02/salesOrd/retrieveItemRsltCmptYn", inputData);
//                              LLog.debug.println("item Rslt\n" + itemRslt);
//                              int count = 0;
//                              if(itemRslt != null && itemRslt.getDataCount() > 0) {
//                                  for(int i=0; i < itemRslt.getDataCount(); i++) {
//                                      if(itemRslt.getString("caseYn", i).equals("N")) {
//                                          count++;
//                                      }
//                                  }
//                                  if(count > 0) {
//                                      cmptYn = false;
//                                  }
//                              } else {
//                                  cmptYn = false;
//                              }
//                          }
//                      } else {
//                          cmptYn = false;
//                      }
                    }
                }
            }
            LLog.debug.println("ordType\n" + ordType);
            if(ordType != null) {
                if(ordType.getString("cmpdTranYn") != null && ordType.getString("cmpdTranYn").equals("Y")) {
                    LData lData = null;
                    LMultiData booking = cDao.executeQuery("select/om/om02/salesOrd/retrieveExistSalesOrdBooking", inputData);
                    LLog.debug.println("booking\n" + booking);
                    if(booking != null && booking.getDataCount() > 0) {
                        for(int n=0; n < booking.getDataCount(); n++) {
                            lData = booking.getLData(n);
                            lData.setString("rsltSctnCd", OmConstants.BOOKING_RSLT_SCTN_CD_CMPT);
                            LData bookingRslt = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdBookingRsltYn", lData);
                            LLog.debug.println("bookingRslt\n" + bookingRslt);
                            if(bookingRslt == null || bookingRslt.getInt("cnt") <= 0) {
                                cmptYn = false;
//                                  return;
                            }
                        }
                    } else {
                        lData = new LData();
                        lData.setString("salesOrdNo", inputData.getString("salesOrdNo"));
                        lData.setString("rsltSctnCd", OmConstants.BOOKING_RSLT_SCTN_CD_CMPT);
                        LData bookingRslt = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdBookingRsltYn", lData);
                        LLog.debug.println("bookingRslt\n" + bookingRslt);
                        if(bookingRslt == null || bookingRslt.getInt("cnt") <= 0) {
                            cmptYn = false;
//                              return;
                        }
                    }
                }
            }

            LData cmptOrd = new LData();
            if(cmptYn) {
                cmptOrd.setString("salesOrdNo"          , inputData.getString("salesOrdNo"));
                cmptOrd.setString("salesOrdStatCd"      , OmConstants.SALES_ORD_STAT_CD_06);
                cmptOrd.setString("mdfrId"              , inputData.getString("mdfrId"));

                if(inputData.getString("salesOrdCmptSctnCd") != null && !"".equals(inputData.getString("salesOrdCmptSctnCd"))) {
                    cmptOrd.setString("salesOrdCmptSctnCd"  , inputData.getString("salesOrdCmptSctnCd"));
                } else {
                    cmptOrd.setString("salesOrdCmptSctnCd"  , OmConstants.SALES_ORD_CMPT_SCTN_CD_AUTO);
                }

            } else {
                cmptOrd.setString("salesOrdNo"          , inputData.getString("salesOrdNo"));
                cmptOrd.setString("salesOrdCmptSctnCd"  , "");
                cmptOrd.setString("mdfrId"              , inputData.getString("mdfrId"));
            }
            LLog.debug.println("cmptOrd\n" + cmptOrd);


            cDao.add("cud/om/tb_om02001/updateSalesOrdCmpt", cmptOrd);
            cDao.add("cud/om/tb_om01001/changeSalesOrdStat", cmptOrd);
            cDao.executeUpdate();

            if(cmptYn && OmConstants.SALES_ORD_CMPT_SCTN_CD_AUTO.equals(cmptOrd.getString("salesOrdCmptSctnCd"))) {

                LMultiData cmptItemData = cDao.executeQuery("select/om/om02/salesOrd/retrieveSaleOrdItemCmptList", inputData);
                LMultiData wrhsEoList = new LMultiData();
                LData wrhsEoData = null;
                if(cmptItemData != null && cmptItemData.getDataCount() > 0) {
                    String[] lineNoArr = new String[cmptItemData.keySize("lineNo")];
                    wrhsEoData = new LData();
                    wrhsEoData.setString("salesOrdNo", cmptItemData.getString("salesOrdNo", 0));
                    for(int n=0; n < cmptItemData.keySize("lineNo"); n++) {
                        lineNoArr[n] = cmptItemData.getString("lineNo", n);
                    }
                    List lineNoList = new ArrayList();
                    for(int z=0; z < lineNoArr.length; z++) {
                        lineNoList.add(lineNoArr[z]);
                    }
                    wrhsEoData.set("lineNoList", lineNoList);
                    wrhsEoData.setString("regrId", inputData.getString("mdfrId"));
                    wrhsEoData.setString("mdfrId", inputData.getString("mdfrId"));
                    wrhsEoList = cDao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdCmptEoList", wrhsEoData);

                    if(wrhsEoList != null && wrhsEoList.getDataCount() > 0) {
                        IOrdDivMngt pbc     = (IOrdDivMngt) PbcUtil.getPbc(IOrdDivMngt.class);
                        LMultiData paramList = new LMultiData();
                        LData param = new LData();
                        param.setString("regrId", inputData.getString("mdfrId"));
                        param.setString("mdfrId", inputData.getString("mdfrId"));

                        paramList.add("IN_DS1"      , wrhsEoList);
                        paramList.add("INPUT"       , param);
                        paramList.add("LCompoundDao", cDao);

                        // 자동완료 대상이고 오더중량이 실적중량보다 큰 오더에 대해서 WM에 전송구분 Z로 보내준다. : 가용재고에서 빼주기 위해서
                        // M/L적용한 값만큼 출고를 못했을 경우 종경 보냄
                        // 원오더10, M/L적용 11, 출고량 : 10일경우 1에 대해서 종결 - 자동 완료조건이자 실적물량이 적은 경우
                        // cmptItemData에 있는 리스트는 오더중량이 실적중량보다 큰경우임
                        if(ordType != null && ordType.getString("rptCustCd") != null
                                && (ordType.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NS)
                                    || ordType.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_KM))){
                        }else{
                            pbc.divideBalance(paramList);
                        }
                    }

// 한솔제지이고 적송(Z11)이고 sheet지이면서 수량물량이 완료가  되는 상태에서 중량물이 다르면 제지에 종결I/F 전송
// cmptItemData : 중량물이 다른경우만 저장한 LData

//                  for(int j=0; j < cmptItemData.getDataCount(); j++) {
//                      LData soRejectParam = new LData();
//                      LData soRejectItemParam = new LData();
//                      LData tmpParam = new LData();
//                      tmpParam = cmptItemData.getLData(j);
//
//                      soRejectParam = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSORejectHeaderParam", tmpParam);
//                      soRejectItemParam = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSORejectItemParam", tmpParam);
//
//
//                      if(soRejectParam != null && OmConstants.CUST_CO_CD_HP.equals(soRejectParam.getString("rptCustCd"))
//                         && "Z11".equals(soRejectParam.getString("custMoveTypeCd"))){ // 한솔제지, 적송(Z11)일 경우 수량물이 완료조건인 경우
//                          if(soRejectItemParam != null && "160200".equals(soRejectItemParam.getString("itemLvl2Cd"))){ // Sheet지 일 경우
//                              LMultiData sndData = new LMultiData();
//
//                              soRejectItemParam.setString("rptCustCd",soRejectParam.getString("rptCustCd"));
//                              soRejectItemParam.setString("custOrdTypeCd",soRejectParam.getString("custMoveTypeCd"));
//                              soRejectItemParam.setString("custOrdNo",soRejectParam.getString("custOrdNo"));
//                              soRejectItemParam.setString("partCmptTrmsSctnCd","02");
//                              soRejectItemParam.setString("ordReasonCd","01"); // 오더납품종료(CSN)
//
//                              sndData.addLData(soRejectItemParam);
//
//                              //LLog.debug.println("\nsndData \n" + sndData);
//                              SalesOrdMngtWSC wsc     = new SalesOrdMngtWSC();
//                              LData           eaiData = null;
//                              try {
//                                  eaiData = wsc.transferSalesOrdPartCmpt(sndData);
//                              } catch(Throwable t){
//                                  t.printStackTrace(LLog.debug);
//                                  throw new LBizException("부분완료 전송중 에러가 발생하였습니다.");
//                              }
//                              if(eaiData.getString("type").equals("E")) { //실패로넘어오면
//                                  throw new LBizException(eaiData.getString("message"));
//                              }
//                          }
//                      }
//
//                  }

//   제지에 종결I/F 전송 끝

                }
            }

            // 완료 SMS전송
            /* 20110423. cys.
            if(cmptYn) {
                LData smsData = new LData();
                smsData.set("LCompoundDao"              , cDao);
                smsData.setString("salesOrdNo"          , inputData.getString("salesOrdNo"));
                smsData.setString("statSctnCd"          , "03");
                sendCustOrdStatSms(smsData);
            }
            */

        }catch(Exception se) {
            se.printStackTrace();
            LLog.err.println(this.getClass().getName() + "." + "processSalesOrdAutoCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

    }

    /** 판매오더 고객완료 처리하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public void processSalesOrdCustCmpt(LData inputData) throws LException {
/*
고객의 요청에 의한 오더 완료 처리.

1. 이미 완료된 오더인 지 확인
   이미 오더 완료 구분에 값이 있으면 실행안함.

2. 판매오더 아이템(삭제여부 'Y'는 제외)의 오더사유코드에 모두 값이 있으면 완료처리함.


변경대상 컬럼 :
판매오더상태 : '06' (완료)
판매오더완료구분코드 : '03' (고객완료)
판매오더완료일시 : sysdate
*/
        laf.application.dao.LCompoundDao cDao = CompDaoUtil.getTransaction(inputData);

        try {
            LData lData = new LData();
            lData.setString("salesOrdNo", inputData.getString("salesOrdNo"));
            lData.setString("salesOrdStatCd", OmConstants.SALES_ORD_STAT_CD_06);
            LData cmptData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdCmptYn", lData);

            String rptCustCd = inputData.getString("rptCustCd")==null?"":inputData.getString("rptCustCd");

            // 농심일 경우 완료된 오더라도 종결I/F 되도록 함
            if(cmptData != null && cmptData.getInt("cnt") > 0 && !OmConstants.CUST_CO_CD_NS.equals(rptCustCd)) {
                throw new LBizException("이미 완료된 판매오더입니다.");
            }

            LData itemData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdItemCmptYn", lData);
            if(itemData != null && "Y".equals(itemData.getString("cmptYn"))) {
                LData cmptOrd = new LData();
                cmptOrd.setString("salesOrdNo"          , inputData.getString("salesOrdNo"));
                cmptOrd.setString("mdfrId"              , inputData.getString("mdfrId"));
                cmptOrd.setString("salesOrdCmptSctnCd"  , OmConstants.SALES_ORD_CMPT_SCTN_CD_CUST);
                cmptOrd.setString("salesOrdStatCd"      , OmConstants.SALES_ORD_STAT_CD_06);

                cDao.add("cud/om/tb_om02001/updateSalesOrdCmpt", cmptOrd);
                cDao.add("cud/om/tb_om01001/changeSalesOrdStat", cmptOrd);

                cDao.executeUpdate();
            }

        }catch(LBizException be) {
            throw be;
        }catch(Exception se) {

            LLog.err.println(this.getClass().getName() + "." + "processSalesOrdCustCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

    }

    /** 예외오더를 자동완료 처리하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public void processExceptOrdCmpt() throws LException {
/*
배치 job으로 예외오더 완료 처리함.

1.예외오더 중 완료 및 취소 상태가 아닌 오더리스트를 조회

2. 판매오더번호를 사용하여 통합정산 시스템의 매출확정구분을 조회함.
    매출확정구분이 '02'이상인 건이 하나라도 있으면 완료로 판단함

3. 완료인 건에 대하여 판매오더 완료처리

변경대상 컬럼 :
판매오더상태 : '06' (완료)
판매오더완료구분코드 : '01' (자동완료)
판매오더완료일시 : sysdate
 */
        laf.application.dao.LCompoundDao cDao = new laf.application.dao.LCompoundDao();

        try {
            cDao.startTransaction();
            LData lData = new LData();
            lData.setString("salesOrdStatCd", OmConstants.SALES_ORD_STAT_CD_06);
            LMultiData exceptOrd = cDao.executeQuery("select/om/om02/salesOrd/retrieveExceptSalesOrdList", lData);
            if(exceptOrd != null && exceptOrd.getDataCount() > 0) {
                for(int i=0; i < exceptOrd.getDataCount(); i++) {
                    LLog.debug.println("Start For Clause!!!!!");

                    LData salesDcsn = cDao.executeQueryForSingle("select/is/is01/sell/retrieveSalesDcsnSctn", exceptOrd.getLData(i));
                    LLog.debug.println("Execute sell.xml retrieveSalesDcsnSctn!!!!!");
                    if(salesDcsn != null && salesDcsn.getInt("cnt") > 0) {
                        LData cmptOrd = new LData();
                        cmptOrd.setString("salesOrdNo"          , exceptOrd.getString("salesOrdNo", i));
                        cmptOrd.setString("mdfrId"              , OmConstants.COMMON_USER);
                        cmptOrd.setString("salesOrdCmptSctnCd"  , OmConstants.SALES_ORD_CMPT_SCTN_CD_AUTO);
                        cmptOrd.setString("salesOrdStatCd"      , OmConstants.SALES_ORD_STAT_CD_06);

                        cDao.add("cud/om/tb_om02001/updateSalesOrdCmpt", cmptOrd);
                    }
                }
                cDao.executeUpdate();
            }
            cDao.commit();
        }catch(Exception se) {
            cDao.rollback();
            LLog.err.println(this.getClass().getName() + "." + "processExceptOrdCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

    }

    /**
     * 수입BL번호를 사용하여 해당하는 고객코드와 고객오더번호를 조회한다.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveImpBlCustSalesOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om01/custOrdReg/retrieveImpBlCustOrdNo", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveImpBlCustSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 수입BL 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveImpBlOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();
        laf.application.dao.LCommonDao cDao = new laf.application.dao.LCommonDao();
        try{
            LData salesOrd = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpBlSalesOrdNo", inputData);

            if(salesOrd != null && salesOrd.getString("salesOrdNo") != null && !salesOrd.getString("salesOrdNo").equals("")) {
                dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveImpBlSalesOrd", salesOrd));
                dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveImpBlSalesOrdItem", salesOrd));
                dataHolder.add("IN_DS3", dao.executeQuery("select/om/om02/salesOrd/retrieveImpBlSalesOrdCntr", salesOrd));
                dataHolder.add("IN_DS4", dao.executeQuery("select/iv/iv09/cntrMngt/retrieveFreeTimeCntrInfoConfirm", salesOrd));
            } else {
                dataHolder.add("IN_DS1", dao.executeQuery("select/om/om01/custOrdReg/retrieveImpBlCustOrd", inputData));
                dataHolder.add("IN_DS2", dao.executeQuery("select/om/om01/custOrdReg/retrieveImpBlCustOrdItem", inputData));
                dataHolder.add("IN_DS3", dao.executeQuery("select/om/om01/custOrdReg/retrieveImpBlCustOrdCntr", inputData));
                dataHolder.add("IN_DS4", dao.executeQuery("select/iv/iv09/cntrMngt/retrieveFreeTimeCntrInfoConfirm", inputData));
            }
            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveImpBlOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 삼성토탈 수출컨테이너 생성/삭제하는 메소드.
     *
     * @param inputData
     *            Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException
     *                메소드 수행시 발생한 모든 에러.
     */
    public LData createStcExpCntr(LMultiData inputData1) throws LException {

//      LCompoundDao compoundDao = new LCompoundDao();  // Global 세션
//      laf.application.dao.LCommonDao  commonDao = null;

        laf.application.dao.LCompoundDao compoundDao = CompDaoUtil.getTransaction(inputData1);
        laf.application.dao.LCommonDao cDao = new laf.application.dao.LCommonDao();
        LMultiData inputData = CompDaoUtil.resetParam(inputData1);
        IPlanVanningMngt planVanningMngt = (IPlanVanningMngt) PbcUtil.getPbc(IPlanVanningMngt.class);

        LData returnLData = new LData();
        LMultiData createLData = new LMultiData();
        LData input = new LData();
        String status = "";
        String salesOrdNo = "";
        String tmpSalesOrdNo = "";

        LLog.debug.println("inputData.keySize() :"+inputData.getDataCount());


        try {
            if(inputData != null && inputData.getDataCount() > 0){
                GauceUtil.fillColValue(inputData, "pckgUnitCd", "BG");
                GauceUtil.fillColValue(inputData, "regrId", OmConstants.COMMON_USER);
                GauceUtil.fillColValue(inputData, "mdfrId", OmConstants.COMMON_USER);

                for(int i=0; i<inputData.keySize();i++){
                    LData ldata = inputData.getLData(i);

                    tmpSalesOrdNo = ldata.getString("salesOrdNo");
                    input.setString("salesOrdNo", tmpSalesOrdNo);

                    LData result = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdNo", input);
                    salesOrdNo = result.getString("salesOrdNo");

//                  if(!"C".equals(ldata.getString("status"))){
                        if(salesOrdNo == null || salesOrdNo.length() < 1){
                            returnLData.setString("type", "E");
                            returnLData.setString("message", "판매오더가 존재하지 않습니다.");

                            return returnLData;
                        }
//                  }

                    ldata.setString("salesOrdNo", salesOrdNo);
                    ldata.setString("cntrNo", ldata.getString("cntrNo").trim());
                    ldata.setString("sealNo1", ldata.getString("sealNo1").trim());
                    ldata.setString("rptItemNm", ldata.getString("rptItemNm").trim());
                    ldata.setString("cntrKindCd", ldata.getString("cntrKindCd").trim());

                    if("".equals(ldata.getString("cntrNo"))){
                        returnLData.setString("type", "E");
                        returnLData.setString("message", "컨테이너 번호 NULL");

                        return returnLData;
                    }

                    compoundDao.add("cud/om/tb_om02020/deleteSalesOrdCntrWhole", ldata);
                    compoundDao.executeUpdate();

                    createLData.addLData(ldata);
                }

                LLog.debug.println("createLData.keySize() :"+createLData.getDataCount());

                for(int i=0; i<createLData.getDataCount();i++){
//                  inputData.modifyString("regrId", i, OmConstants.COMMON_USER);
//                  inputData.modifyString("mdfrId", i, OmConstants.COMMON_USER);

                    LData ldata2 = createLData.getLData(i);

                    status = ldata2.getString("status");

                    if(!"C".equals(status)){
                        //inputData.modifyInt("GauceJobType", i, GauceDataRow.TB_JOB_INSERT);
                        compoundDao.add("cud/om/tb_om02020/createSalesOrdCntr", ldata2);
                        compoundDao.executeUpdate();
                    }

                }

                String chkSalesOrdNo = "";
                for(int i=0; i<createLData.getDataCount();i++){
//                  inputData.modifyString("regrId", i, OmConstants.COMMON_USER);
//                  inputData.modifyString("mdfrId", i, OmConstants.COMMON_USER);

                    LData ldata3 = createLData.getLData(i);

                    if(!chkSalesOrdNo.equals(ldata3.getString("salesOrdNo"))){
                        LData chkData = new LData();
                        chkData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdStcCntr", ldata3);

                        if(chkData != null){
                            if(chkData.getInt("cnt") > 0) {
                                chkData.setString("vanningCmptYn", "Y");
                            } else {
                                chkData.setString("vanningCmptYn", "N");
                            }

                            chkData.setString("procType", "A");
                            chkData.set("LCompoundDao", compoundDao);
                            planVanningMngt.transferFwdVanningCmpt(chkData);
                        }

                        chkSalesOrdNo = ldata3.getString("salesOrdNo");
                    }

                }

            }

        } catch (Exception se) {
            LLog.err.println(this.getClass().getName() + "."
                    + "createStcExpCntr()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

        returnLData.setString("type", "S");
        returnLData.setString("message", "작업이 성공적으로 수행되었습니다.");

        return returnLData;

    }

    /**
     * 수입BL 생성하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData createImpBlSalesOrd(LMultiData inputData) throws LException {
        LMultiData headerData = (LMultiData)inputData.get("IN_DS1",0);
        LMultiData itemData = (LMultiData)inputData.get("IN_DS2",0 );
        LMultiData cntrData = (LMultiData)inputData.get("IN_DS3",0 );
        LMultiData freeTimeMstData = (LMultiData)inputData.get("IN_DS4",0 );

        LLog.debug.println("************ itemData : "+itemData);
        LLog.debug.println("************ headerData : "+headerData);

        laf.application.dao.LCommonDao  commonDao = null;
        LCommonDao dao = new LCommonDao();
        LCompoundDao dao2 = new LCompoundDao();
        LCommonDao lDao = new LCommonDao();
        laf.application.dao.LCompoundDao dao3 = new laf.application.dao.LCompoundDao();
        laf.application.dao.LCommonDao cDao = new laf.application.dao.LCommonDao();
        LCompoundDao dao5 = new LCompoundDao();

        laf.application.dao.LCompoundDao lDao2 = new laf.application.dao.LCompoundDao();
        try{
            //고객오더번호로 등록된 판매오더번호가 있는지 확인
            LData ordData   = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpCntrSalesOrdExist", headerData.getLData(0));
            if(ordData != null && ordData.getString("salesOrdNo") != null && ordData.getString("salesOrdNo").length() > 0) {
                throw new LBizException("이미 BL확정되었습니다.");
            }
/*
[수입BL판매오더생성]수입BL 정보를 사용하여 판매오더를 생성한다.

화면에서 입력된 BL을 사용하여 오더를 생성할 경우에는
고객오더를 먼저 생성한다.

판매오더 생성 순서.

1. 판매오더번호 채번

2. 판매오더헤더등록
    오더관리실행부서 - 입고센터에 매핑된 부서코드
    오더관리담당자ID - 로그인한 사람
    수출입내수구분 - '02' 수입
    작업정보관리유형 - '01'
    라인구분코드 - '01'


3. 판매오더아이템등록
    판매오더번호 - 채번된 번호
    라인번호 - 첫번째 아이템부터 10, 20, ....
    고객코드 - 계약고객의 대표고객코드
    도착지코드 - 헤더정보 copy
    납기일자 - 헤더정보 copy


4. 판매오더컨테이너등록
   판매오더번호 - 채번된번호


5. 판매오더컨테이너내품등록
   판매오더번호 - 채번된번호
   고객코드 - 계약고객의 대표고객코드


6. 기본작업경로생성
 */
            GauceUtil.fillColValue(itemData, "custOrdNo", headerData.getString("custOrdNo"  , 0));
            GauceUtil.fillColValue(itemData, "mblNo"    , headerData.getString("mblNo"      , 0));

            //CO등록
            if(headerData.getInt("GauceJobType", 0) == GauceDataRow.TB_JOB_INSERT) {
                dao2.add("cud/om/tb_om01001/createImpBlCustOrd", headerData);
                GauceUtil.fillColValue(itemData, "custOrdRecpYmd"   , headerData.getString("custOrdRecpYmd" , 0));
                GauceUtil.fillColValue(itemData, "custOrdRecpHms"   , headerData.getString("custOrdRecpHms" , 0));
                GauceUtil.fillColValue(itemData, "ctrtCustCd"       , headerData.getString("ctrtCustCd"     , 0));

                dao2.add("cud/om/tb_om01002/createImpBlCustOrdItem", itemData);

            } else if(headerData.getInt("GauceJobType", 0) == GauceDataRow.TB_JOB_UPDATE){
                if(headerData.getString("ctrtCustCd", 0).equals(OmConstants.CUST_CO_CD_HP)
                        || ("Y".equals(ART_YN) && headerData.getString("ctrtCustCd", 0).equals(OmConstants.CUST_CO_CD_AT))  ) {
                    GauceUtil.fillColValue(itemData, "saveLocCd", "9999");

                    //생산처코드 조회 해서 작업센터코드에 입력
                    String plantCd = getWorkPlaceCodeLMultiData(headerData.getLData(0), itemData, 0);

                    GauceUtil.modiColValue(itemData, "workCntrCd", plantCd);
                }
                LLog.debug.println("itemData==\n" + itemData);

            }

            //LLog.debug.println("headerData==\n" + headerData.getLData(0));

            if(headerData.getString("ctrtCustCd", 0).equals(OmConstants.CUST_CO_CD_HP)
                    || ("Y".equals(ART_YN) && headerData.getString("ctrtCustCd", 0).equals(OmConstants.CUST_CO_CD_AT))
            ) {

                GauceUtil.fillColValue(itemData, "plantCd", "");

                for(int x=0; x<itemData.getDataCount(); x++){

                    LData paramData = new LData();
                    paramData.setString("fltrConts3",  itemData.getString("workCntrCd", x));
                    if( headerData.getString("ctrtCustCd", 0).equals(OmConstants.CUST_CO_CD_AT)) {
                        paramData.setString("rptCustCd" ,  OmConstants.CUST_CO_CD_AT);
                    }
                    else {
                        paramData.setString("rptCustCd" ,  OmConstants.CUST_CO_CD_HP);
                    }

                    LData comnData  = cDao.executeQueryForSingle("select/om/om02/custCdMpng/retrieveStdPlantCd", paramData);
                    if(comnData != null && comnData.getString("comnCd") != null && comnData.getString("comnCd").length() > 0) {
                        itemData.modifyString("plantCd", x, comnData.getString("comnCd"));
                    }

                }
            }

            //==========CO등록/수정 끝==============

            IWorkRouteMngt pbc2 = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);

/*
판매오더번호를 채번한다.
'S' + 일련번호 (SQ_MA02001 시퀀스, 9자리를 맞추기 위해 앞에 '0'을 채운다.)
*/
            LData input = new LData();
            commonDao = new laf.application.dao.LCommonDao("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);
            LData result = commonDao.executeQueryForSingle();
            String salesOrdNo = result.getString("salesOrdNo");

            String workPlCd = headerData.getString("arvArCd", 0);
            if(workPlCd != null) {
                workPlCd = workPlCd.toUpperCase();
            }
            GauceUtil.modiColValue(headerData, "salesOrdNo"     , salesOrdNo);
            GauceUtil.fillColValue(headerData, "arvArTypeCd"    , OmConstants.AR_TYPE_CD_CENTER);
            GauceUtil.fillColValue(headerData, "custOrdRecpDate", headerData.getString("custOrdRecpYmd", 0) + headerData.getString("custOrdRecpHms", 0));
            GauceUtil.fillColValue(headerData, "custExprYn"     , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "clsExprYn"      , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "leadTimeExprYn" , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "dtodYn"         , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "loadDlyYn"      , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "backOrdYn"      , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "aftOrdYn"       , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "salesOrdCnclYn" , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "ltrmOrdYn"      , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "dcnctOrdYn"     , OmConstants.COMMON_N);
            GauceUtil.fillColValue(headerData, "workPlCd"       , workPlCd);

            LData param = new LData();
            param.setString("dptArCd"       , !headerData.containsKey("dptArCd") ? "" : headerData.getString("dptArCd"      , 0));
            param.setString("dptArTypeCd"   , !headerData.containsKey("dptArTypeCd") ? "" : headerData.getString("dptArTypeCd"  , 0));
            param.setString("arvArCd"       , workPlCd);
            param.setString("arvArTypeCd"   , headerData.getString("arvArTypeCd"    , 0));
            param.setString("rptCustCd"     , headerData.getString("rptCustCd"  , 0));
            param.setString("ordTypeCd"     , headerData.getString("ordTypeCd"  , 0));
            param.setString("expImpDomSctnCd", headerData.getString("expImpDomSctnCd"   , 0));
            param.setString("cargoFormCd"   , headerData.getString("cargoFormCd"    , 0));

            //실행부서/운송계획센터코드 설정
            LData exceDept = setOrdMngtExceDeptCd(param);
            if(exceDept == null || exceDept.getString("result").equals("E") ){
                throw new LBizException(exceDept.getString("message"));
            } else {
                GauceUtil.modiColValue(headerData, "ordMngtExceDeptCd", exceDept.getString("ordMngtExceDeptCd"));
                GauceUtil.fillColValue(headerData, "tranPlanCntrCd", exceDept.getString("tranPlanCntrCd"));
            }
            param = new LData();
            param.setString("ordChrgDeptCd" , exceDept.getString("ordMngtExceDeptCd"));
            param.setString("custCd"        , headerData.getString("ctrtCustCd", 0));
            param.setString("expImpDomSctnCd", headerData.getString("expImpDomSctnCd", 0));

            //실행담당자 설정
            LData exceOfcr = commonDao.executeQueryForSingle("select/om/om05/orderUserMngt/retrieveOrdMngtExceOfceId", param);
            if(exceOfcr != null && exceOfcr.getString("userId") != null && !exceOfcr.getString("userId").equals("")) {
                GauceUtil.modiColValue(headerData, "ordMngtExceOfcrId", exceOfcr.getString("userId"));
            }

            //movetype setting
            LData move = new LData();
            move.setString("dptArCd"            , !headerData.containsKey("dptArCd") ? "" : headerData.getString("dptArCd"      , 0));
            move.setString("dptArTypeCd"        , !headerData.containsKey("dptArTypeCd") ? "" : headerData.getString("dptArTypeCd"  , 0));
            move.setString("arvArCd"            , workPlCd);
            move.setString("arvArTypeCd"        , headerData.getString("arvArTypeCd"    , 0));
            move.setString("expImpDomSctnCd"    , headerData.getString("expImpDomSctnCd", 0));
            move.setString("custOrdTypeCd"      , !headerData.containsKey("custOrdTypeCd") ? "" : headerData.getString("custOrdTypeCd"  , 0));
            move.setString("custMoveTypeCd"     , !headerData.containsKey("custMoveTypeCd") ? "" : headerData.getString("custMoveTypeCd"    , 0));
            move.setString("ordTypeCd"          , headerData.getString("ordTypeCd"      , 0));
            move.setString("rptCustCd"          , headerData.getString("rptCustCd"      , 0));
            move.setString("custOfCustCd"       , !headerData.containsKey("custOfCustCd") ? "" : headerData.getString("custOfCustCd"    , 0));
            move.setString("selfGdsCd"          , "");

            String moveTypeCd = retrieveMoveType(move);

            GauceUtil.fillColValue(headerData, "moveTypeCd"     , moveTypeCd);

            LData paramData = new LData();
            paramData.setString("rptCustCd"         , headerData.getString("rptCustCd"      , 0));
            paramData.setString("corpCd"            , headerData.getString("corpCd"         , 0));
            paramData.setString("ordTypeCd"         , headerData.getString("ordTypeCd"      , 0));
            paramData.setString("expImpDomSctnCd"   , headerData.getString("expImpDomSctnCd", 0));
            paramData.setString("dptArCd"           , !headerData.containsKey("dptArCd") ? ""       : headerData.getString("dptArCd"        , 0));
            paramData.setString("dptArTypeCd"       , !headerData.containsKey("dptArTypeCd") ? ""   : headerData.getString("dptArTypeCd"    , 0));
            paramData.setString("arvArCd"           , workPlCd);
            paramData.setString("arvArTypeCd"       , headerData.getString("arvArTypeCd"    , 0));
            paramData.setString("moveTypeCd"        , moveTypeCd);
            paramData.setString("plantCd"           , itemData.getLData(0).getString("plantCd"));

            //청구고객/매출부서 설정
            /**
            LData bilgCustInfo = getBilgCustInfo(paramData);
            if(bilgCustInfo != null) {
                GauceUtil.modiColValue(headerData, "bilgCustCd" , bilgCustInfo.getString("bilgCustCd"));
                GauceUtil.modiColValue(headerData, "sellDeptCd" , bilgCustInfo.getString("sellDeptCd"));
            }
            **/
            //신규 계약번호, 청구고객, 매출부서 매핑. leepj 2013-12-28 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoInh(paramData);

            if( ctrtCustInfo != null ) {
            	GauceUtil.modiColValue(headerData, "ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
            	GauceUtil.modiColValue(headerData, "bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
            	GauceUtil.modiColValue(headerData, "sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
            	GauceUtil.modiColValue(headerData, "salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
            }                

            LLog.debug.println("SalesOrdMngtData==========>\n" + headerData);

            GauceUtil.fillColValue(itemData, "salesOrdNo"       , salesOrdNo);
            GauceUtil.modiColValue(itemData, "arvArCd"          , workPlCd);
            GauceUtil.fillColValue(itemData, "arvArTypeCd"      , OmConstants.AR_TYPE_CD_CENTER);
            GauceUtil.modiColValue(itemData, "aptdReqYmd"       , headerData.getString("aptdReqYmd", 0));

            GauceUtil.fillColValue(cntrData, "salesOrdNo"       , salesOrdNo);

            if(headerData.getString("ctrtCustCd", 0).equals(OmConstants.CUST_CO_CD_NC)) {
                GauceUtil.fillColValue(headerData, "strtReqYmd", headerData.getString("demArvPortApplyYmd", 0));
                GauceUtil.fillColValue(headerData, "chgAptdYmd", headerData.getString("detArvPortApplyYmd", 0));
            }

/*
판매오더 헤더 정보를 Insert한다.
*/
            dao2.add("cud/om/tb_om02001/createTbOm02001", headerData);

/*
판매오더 라인아이템 정보를 Insert한다.
*/
               LLog.debug.println("itemData===\n" + itemData);
            dao2.add("cud/om/tb_om02002/createTbOm02002", itemData);

            String arvArCd = workPlCd;
            String arvArNm = headerData.getString("arvArNm", 0);

            GauceUtil.fillColValue(headerData, "oceanAirSctnCd", OmConstants.OCEAN_AIR_SCTN_CD_SEA);
            GauceUtil.fillColValue(headerData, "blKindCd", OmConstants.BL_KIND_CD_D);
            GauceUtil.fillColValue(headerData, "podCd", arvArCd);
            GauceUtil.fillColValue(headerData, "podNm", arvArNm);
            LLog.debug.println("headerData===\n" + headerData);
            dao2.add("cud/om/tb_om02003/createSalesOrdFisInfo", headerData);
            //컨테이너 데이터가 존재하면 tb_om02020/ tb_om02021에 저장
            if(cntrData != null && cntrData.getDataCount() > 0) {
                LMultiData cntrList = new LMultiData();
                LData cntr = null;
                LData cntrTemp = null;
                boolean check = false;
                for(int x=0; x < cntrData.getDataCount(); x++) {
                    cntr = cntrData.getLData(x);
                    check = false;
                    if(cntrList != null && cntrList.getDataCount() > 0) {
                        for(int n=0; n < cntrList.getDataCount(); n++) {
                            cntrTemp = cntrList.getLData(n);
                            if(cntrTemp.getString("cntrNo").equals(cntr.getString("cntrNo"))) {
                                check = true;
                                break;
                            }
                        }

                    }
                    if(!check) {
                        cntrList.addLData(cntr);
                    }
                }
                LLog.debug.println("cntrList====>\n" + LCollectionUtility.toDebugString(cntrList));
                dao2.add("cud/om/tb_om02020/createSalesOrdCntr"     , cntrList);
                dao2.add("cud/om/tb_om02021/createSalesOrdCntrConts", cntrData);
            }
            dao2.executeUpdate();

            input = new LData();
            input.setString("salesOrdNo"    , salesOrdNo);
            input.setString("mdfDlySctnCd"  , "");
            input.setString("regrId"        , headerData.getString("regrId",0));
            input.setString("mdfrId"        , headerData.getString("mdfrId",0));
            input.set("LCompoundDao", dao3);
            setSalesOrdHistory(input);
            //한솔 홈데코인 경우 수입 BL 확정 웹서비스 호출
            if(headerData.getString("rptCustCd", 0).equals(OmConstants.CUST_CO_CD_HH)) {
                param = new LData();
                param.setString("custOrdNo"     , headerData.getString("custOrdNo", 0));
                param.setString("dcsnSctnCd"    , OmConstants.IMPORT_BL_DCSN_SCTN_CD_SEND);
                param.setString("chgSctnCd"     , "1");
                param.setString("arvPortYmd"    , headerData.getString("arvPortYmd", 0));
                param.setString("cgwrkQty"      , headerData.getString("ordQty", 0));

                try {
                    transferHansolhomedecoImpBlDcsn(param);
                } catch(Exception e) {
                    throw new LBizException(e.getMessage());
                }
            } else if(headerData.getString("rptCustCd", 0).equals(OmConstants.CUST_CO_CD_NC)) {
                param = new LData();
                param.setString("custOrdNo" , headerData.getString("custOrdNo", 0));
                param.setString("dcsnYn"    , "Y");

                dao2.add("cud/om/n_bl/updateBlDcsn", param);
                dao2.executeUpdate();
            }

/*
컨테이너 관리 헤더 insert
*/
            //전주페이퍼 컨테이너 관리 내역 추가
            //1. 전주페이퍼 DEM,DET계산하여 컨테이너 관리 메인 테이블(TB_IV09001)에 넣을것.
            //2. 컨테이너 관리 마스타테이블의 항목 맵핑정보는  관리 마스타 테이블 TB_IV09002,TB_IV09003를 참조할것.
            //3. 컨테이너 관리 테이블(TB_IV09009)데이타는 주문마스타 정보보와 항목 맵핑 TB_IV09008를 참조할것.
            //4. B/L 확정시점에 TB_IV09001, TB_IV09009 데이타 생성
            //5. B/L 확정취소시 TB_IV09001, TB_IV09009 데이타 삭제
            //6. 확정시점의 OPEN DB의 업데이트 처리 할것.
            LData cntrData1 = new LData();
            LData cntrData2 = new LData();
            String freeTimeDem = "";
            String freeTimeDet = "";
            
            if(headerData.getString("rptCustCd", 0).equals(OmConstants.CUST_CO_CD_NC)&&headerData.getString("cargoFormCd"   , 0).equals("C")) {
                cntrData1.setString("custOrdNo"         , headerData.getString("custOrdNo"      , 0));
                cntrData1.setString("custCd"            , headerData.getString("rptCustCd"      , 0));
                cntrData1.setString("hblNo"             , headerData.getString("mblNo"          , 0));
                cntrData1.setString("cntrEa"            , ""+cntrData.getDataCount());
                cntrData1.setString("arrArYmd"          , headerData.getString("arvPortPrarYmd", 0));
                cntrData1.setString("actArYmd"          , headerData.getString("arvPortYmd", 0));
                cntrData1.setString("demDetSctn"        , freeTimeMstData.getString("demDetSctn", 0));

                //cntrData1.setString("demEnd"          , freeTimeMstData.getString("mstDemFreetimeTerm", 0));
                //cntrData1.setString("detEnd"          , freeTimeMstData.getString("mstDetFreetimeTerm", 0));
                cntrData1.setString("demEnd"            , headerData.getString("demFrtimeDays", 0));
                cntrData1.setString("detEnd"            , headerData.getString("detFrtimeDays", 0));
                cntrData1.setString("workDayYn"         , freeTimeMstData.getString("workDayYn", 0));
                cntrData1.setString("staDayYn"          , freeTimeMstData.getString("staDayYn", 0));
                cntrData1.setString("sunDayYn"          , freeTimeMstData.getString("sunDayYn", 0));
                cntrData1.setString("holDayYn"          , freeTimeMstData.getString("holDayYn", 0));
                cntrData1.setString("shipCoCd"          , headerData.getString("shipCoCd", 0));
                cntrData1.setString("shipCoNm"          , headerData.getString("shipCoNm", 0));
                cntrData1.setString("vslNm"             , headerData.getString("shipNm", 0));
                cntrData1.setString("polCd"             , headerData.getString("polCd", 0));
                cntrData1.setString("polNm"             , headerData.getString("polNm", 0));
                cntrData1.setString("podCd"             , headerData.getString("arvArCd", 0));
                cntrData1.setString("podNm"             , headerData.getString("arvArNm", 0));

                //DEM,DET 함수를 통해서 값 조회해오기
                //param [입항일, 마스타 ETA, 마스타 FREETIME TERM,
                //                  화면WORK_DAY_YN,화면STA_DAY_YN,화면 SUN_DAY_YN,화면 HOL_DAY_YN]
                LData input2 = new LData();
                input2.setString("actArYmd"     , headerData.getString("arvPortYmd", 0));
                input2.setString("eta"          , freeTimeMstData.getString("mstDemEta", 0));
                //input2.setString("freeTimeTerm"   , freeTimeMstData.getString("mstDemFreetimeTerm", 0));
                input2.setString("freeTimeTerm" , headerData.getString("demFrtimeDays", 0));
                input2.setString("workDayYn"    , freeTimeMstData.getString("workDayYn", 0));
                input2.setString("staDayYn"     , freeTimeMstData.getString("staDayYn", 0));
                input2.setString("sunDayYn"     , freeTimeMstData.getString("sunDayYn", 0));
                input2.setString("holDayYn"     , freeTimeMstData.getString("holDayYn", 0));

                commonDao = new laf.application.dao.LCommonDao("select/iv/iv09/cntrMngt/retrieveCalcFnDem", input2);
                LData result2 = commonDao.executeQueryForSingle();
                freeTimeDem = result2.getString("val");

                LLog.debug.println(">>>>>> freetime term: "+input2.getString("freeTimeTerm") +"<<<<<<< freeTimeDem >>>>>"+ freeTimeDem);

                LData input3 = new LData();
                input3.setString("actArYmd"     , headerData.getString("arvPortYmd", 0));
                input3.setString("eta"          , freeTimeMstData.getString("mstDetEta", 0));
                //input3.setString("freeTimeTerm"   , freeTimeMstData.getString("mstDetFreetimeTerm", 0));
                input3.setString("freeTimeTerm" , headerData.getString("demFrtimeDays", 0));
                input3.setString("workDayYn"    , freeTimeMstData.getString("workDayYn", 0));
                input3.setString("staDayYn"     , freeTimeMstData.getString("staDayYn", 0));
                input3.setString("sunDayYn"     , freeTimeMstData.getString("sunDayYn", 0));
                input3.setString("holDayYn"     , freeTimeMstData.getString("holDayYn", 0));

                //DET 일자 계산을 계산함수를 통해서 셋팅하지 않고
                //공백으로 처리하여 넣는것으로 한다.
                //commonDao = new laf.application.dao.LCommonDao("select/iv/iv09/cntrMngt/retrieveCalcFnDet", input3);
                //LData result3 = commonDao.executeQueryForSingle();
                //freeTimeDet = result3.getString("val");
                freeTimeDet = "";

                cntrData1.setString("demEndYmd"         , freeTimeDem);
                cntrData1.setString("detEndYmd"         , freeTimeDet);

                cntrData1.setString("demArvPortApplyYmd"    , headerData.getString("demArvPortApplyYmd", 0));
                cntrData1.setString("detArvPortApplyYmd"    , headerData.getString("detArvPortApplyYmd", 0));

                cntrData1.setString("demDetSeqNo"   , freeTimeMstData.getString("demDetSeqNo", 0));
                cntrData1.setString("demSeqNo"  , freeTimeMstData.getString("demSeqNo", 0));
                cntrData1.setString("detSeqNo"  , freeTimeMstData.getString("detSeqNo", 0));

                dao5.add("cud/iv/tb_iv09001/createFreeTimeCntrBlMst", cntrData1);
                dao5.executeUpdate();

/*
컨테이너 관리 디테일  insert
*/

                if(cntrData != null && cntrData.getDataCount() > 0) {
                    LMultiData cntrList = new LMultiData();
                    LData cntr = new LData();

                    for(int i=0; i < cntrData.getDataCount(); i++) {
                        LData cntrTemp = new LData();
                        LData input4 = new LData();
                        LMultiData cntrInfo = null;
                        cntrTemp.setString("custOrdNo"          , headerData.getString("custOrdNo"      , 0));
                        cntrTemp.setString("custCd"             , headerData.getString("rptCustCd"      , 0));
                        cntrTemp.setString("hblNo"              , headerData.getString("mblNo"          , 0));
                        cntrTemp.setString("cntrNo"             , cntrData.getString("cntrNo"           , i));
                        cntrTemp.setString("cntrType"           , cntrData.getString("cntrKindCd"       , i));
                        cntrTemp.setString("cntrQty"            , cntrData.getString("pckgQty"          , i));
                        cntrTemp.setString("cntrUnit"           , cntrData.getString("pckgUnitCd"       , i));
                        cntrTemp.setString("cntrWgt"            , cntrData.getString("ordWgt"           , i));
                        cntrTemp.setString("cntrWgtUnit"        , cntrData.getString("wgtUnitCd"        , i));
                        cntrTemp.setString("blVesselComp"       , headerData.getString("shipCoCd", 0));
                        cntrTemp.setString("blVesselName"       , headerData.getString("shipCoNm", 0));
                        cntrTemp.setString("dmYmd"              , freeTimeDem);
                        cntrTemp.setString("dtYmd"              , freeTimeDet);

                        input4.setString("blNo", headerData.getString("mblNo"           , 0));
                        input4.setString("cntrNo", cntrData.getString("cntrNo"          , i));
                        LLog.debug.println("@@@@@@@@ reference key1 blno: "+headerData.getString("mblNo"            , 0));
                        LLog.debug.println("@@@@@@@@ reference key2 cntrno: "+cntrData.getString("cntrNo"           , i));
                        //cntrInfo = (LMultiData)LGauceConverter.extractRawData(lDao.executeQuery("select/iv/iv09/cntrMngt/retrieveFreeTimeCntrInfo", input4));
                        cntrInfo = (LMultiData)lDao2.executeQuery("select/iv/iv09/cntrMngt/retrieveFreeTimeCntrInfo", input4);
                        LLog.debug.println("@@@@@@@@ cntrInfo: "+cntrInfo.getDataCount());

                        cntrTemp.setString("cntrTraYn"          , "N");
                        cntrTemp.setString("blSaupjang"         , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("blSaupjang"     , 0));
                        cntrTemp.setString("blSupplier"         , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("blSupplier"     , 0));
                        cntrTemp.setString("blBlNo"             , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("blBlNo"         , 0));
                        cntrTemp.setString("vdVendName"         , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("vdVendName"     , 0));
                        cntrTemp.setString("bcContNo"           , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("bcContNo"           , 0));
                        cntrTemp.setString("bcContNoNew"        , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("bcContNoNew"        , 0));
                        //cntrTemp.setString("blYipYmd"         , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("blYipYmd"           , 0));
                        // 2012-11-23  컨테이너별 입항일 관리 변경
                        cntrTemp.setString("blYipYmd"       , headerData.getString("arvPortYmd", 0));

                        cntrTemp.setString("gateYmd"            , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("gateYmd"            , 0));
                        cntrTemp.setString("icIbYmd"            , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("icIbYmd"            , 0));
                        cntrTemp.setString("chYmd"              , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("chYmd"          , 0));
                        cntrTemp.setString("icChYmd"            , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("icChYmd"            , 0));
                        cntrTemp.setString("csnYn"              , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("csnYn"          , 0));
                        cntrTemp.setString("jeonYn"             , cntrInfo == null || cntrInfo.getDataCount()==0 ? "" : cntrInfo.getString("jeonYn"         , 0));
                        cntrTemp.setString("demRate"            , freeTimeMstData.getString("mstDemCntrRate", 0));
                        cntrTemp.setString("detRate"            , freeTimeMstData.getString("mstDetCntrRate", 0));
                        cntrList.addLData(cntrTemp);

                    }
                    dao5.add("cud/iv/tb_iv09009/createFreetimeCntrInfo"     , cntrList);
                    dao5.executeUpdate();

                    //BPEL 전주 컨테이너 관리 테이블의 'P'로 대기중인 컨테이너 반영건의 데이타를 'N'으로 업데이트 한다.
                    //CSN OPEN DB의 데이타를 전주 OPEN PROCESS가 끌어갈수 있도록 FLAG를 ''상태에서 'N'으로 변경한다.
//                  LData input5 = new LData();
//                  input5.setString("blNo"     ,   headerData.getString("mblNo"        , 0));
//                  input5.setString("custOrdNo",   headerData.getString("custOrdNo"    , 0));
//                  input5.setString("dmYmd", freeTimeDem);
//                  input5.setString("dtYmd", freeTimeDet);
//                  dao5.add("cud/iv/tb_iv09009/updateFreetimeCntrInfoOutboundProc"     , input5);
//                  dao5.executeUpdate();

                    dao5.add("cud/iv/tb_iv09009/updateFreetimeCntrInfoOutboundProc"     , cntrList);
                    dao5.executeUpdate();
                }
            }

/*
기본작업경로 생성을 실행한다.
                  sales_ord_no
                , work_route_seq
                , ORD_DIV_DGR_CNT
                , dpt_ar_cd
                , dpt_ar_zip_cd
                , dpt_ar_zip_addr
                , dpt_ar_dtl_addr
                , arv_ar_cd
                , arv_ar_zip_cd
                , arv_ar_zip_addr
                , arv_ar_dtl_addr
                , strt_req_ymd
                , strt_req_hm
                , aptd_req_ymd
                , aptd_req_hm

*/
            LData workRoute = new LData();
            workRoute.setString("salesOrdNo",   salesOrdNo);
            workRoute.setString("dptArCd",      "");
            workRoute.setString("dptArTypeCd",  "");
            workRoute.setString("arvArCd",      workPlCd);
            workRoute.setString("arvArTypeCd",  OmConstants.AR_TYPE_CD_CENTER);
            workRoute.setString("strtReqYmd",   "");
            workRoute.setString("strtReqHm",    "");
            workRoute.setString("aptdReqYmd",   headerData.getString("aptdReqYmd",0));
            workRoute.setString("aptdReqHm",    OmConstants.COMMON_REQ_HM);
            workRoute.setString("regrId",       headerData.getString("regrId",  0));
            workRoute.setString("mdfrId",       headerData.getString("mdfrId",  0));
            workRoute.set("LCompoundDao", dao3);
            pbc2.createBasisWorkRoute(workRoute, itemData);//기본작업경로 생성

            //통관정보 업데이트
            if(itemData != null && itemData.getDataCount() > 0) {
                dao2.add("cud/om/tb_om03004i/updateTbOm03004i", itemData);
                dao2.executeUpdate();
            }

            // 고객에서 오더생성 SMS전송
            LData smsData = new LData();
            smsData.setString("custCd"      , headerData.getString("rptCustCd", 0));
            smsData.setString("custOrdNo"   , headerData.getString("custOrdNo", 0));
            smsData.setString("statSctnCd"  , "02");
            smsData.set("LCompoundDao"      , dao3);

            sendCustOrdStatSms(smsData);

            input.setString("salesOrdNo", salesOrdNo);
            LMultiData dataHolder2 = new LMultiData();
            dataHolder2.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveImpBlSalesOrd", input));
            dataHolder2.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveImpBlSalesOrdItem", input));
            dataHolder2.add("IN_DS3", dao.executeQuery("select/om/om02/salesOrd/retrieveImpBlSalesOrdCntr", input));
            dataHolder2.add("IN_DS4", dao.executeQuery("select/iv/iv09/cntrMngt/retrieveFreeTimeCntrInfoConfirm", input));

            return dataHolder2;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createImpBlSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 수입BL 취소하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void cancelImpBlSalesOrd(LData inputData) throws LException {
        try {

            laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

            //고객오더번호로 취소된 SO가 있는지 확인
            LData ordData   = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpCntrSalesOrdExist", inputData);
            if(ordData == null || ordData.getString("salesOrdNo") == null || ordData.getString("salesOrdNo").length() < 1) {
                throw new LBizException("이미 BL확정이 취소되었습니다.");
            }

            LData ordCmptData   = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpCntrSalesOrdCmptExist", inputData);
            if(ordCmptData != null && ordCmptData.getString("salesOrdNo") != null && !ordCmptData.getString("salesOrdNo").equals("")) {
                throw new LBizException("이미 완료된 오더입니다.");
            }

            //창고확인
            LData workPl = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveWmWorkPlCd", inputData);

            //WM확정상태 확인
            LData cancelData = null;
            if(workPl != null && workPl.getString("wmWorkPlCd") != null && !workPl.getString("wmWorkPlCd").equals("")) {
                inputData.setString("workPlCd", workPl.getString("wmWorkPlCd"));
                /**
                LBridgeDao bDao = new LBridgeDao();
                bDao.setSpec("WMS");
                bDao.setQueryString("select/om/om02/salesOrd/retrieveAvailCancelImpBl");
                bDao.setParameter(inputData);
                LMultiData result = bDao.executeQuery();
                cancelData = result.getLData(0);
                **/ 
                cancelData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveAvailCancelImpBl", inputData);

            }

            if(cancelData != null && cancelData.getString("status") != null && !cancelData.getString("status").equals("")) {
                if("3".equals(cancelData.getString("status"))) {
                    throw new LBizException("WM확정상태로 B/L확정 취소를 진행할 수 없습니다.");
                } else if("9".equals(cancelData.getString("status"))) {
                    throw new LBizException("통관처리가 진행되어 처리할 수 없습니다.");
                }
            }

//          LData grRsltYn = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveGiRsltExist", inputData);
//          if(grRsltYn != null && grRsltYn.getInt("cnt") > 0) {
//                  throw new LBizException("통관처리가 진행되어 처리할 수 없습니다.");
//          }

            //SO취소 처리
            inputData.set("LCompoundDao", dao);
            LMultiData ret = cancelSO(inputData);

            if(ret != null && ret.getDataCount() > 0) {
                if(!ret.getString("key", 0).equals("S")) {
                    throw new LBizException(ret.getString("message", 0));
                }
            }

            //한솔 홈데코인 경우 수입 BL 확정 웹서비스 호출
            if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)) {
                LData param = new LData();
                param.setString("custOrdNo"     , inputData.getString("custOrdNo"));
                param.setString("dcsnSctnCd"    , OmConstants.IMPORT_BL_DCSN_SCTN_CD_CANCEL);
                param.setString("chgSctnCd"     , "1");
                param.setString("arvPortYmd"    , "");
                param.setString("cgwrkQty"      , "0");

                transferHansolhomedecoImpBlDcsn(param);
            } else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)) {
                LData param = new LData();
                param.setString("custOrdNo" , inputData.getString("custOrdNo"));
                param.setString("dcsnYn"    , "N");

                dao.add("cud/om/n_bl/updateBlDcsn", param);
                dao.executeUpdate();
            }

            //전주페이퍼인 경우 수입 BL 확정시 생성된 컨테이너 관리 테이블을 삭제한다.
            if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)&&
                    inputData.getString("cargoFormCd").equals("C")) {
                //dao.add("cud/iv/tb_iv09009/deleteFreetimeCntrInfo", inputData);
                dao.add("cud/iv/tb_iv09009/deleteFreetimeCntrInfoHeader", inputData);
                dao.add("cud/iv/tb_iv09009/deleteFreetimeCntrInfoLine", inputData);
                dao.add("cud/iv/tb_iv09009/deleteFreetimeCntrInfoOpenDb", inputData);
                dao.executeUpdate();
            }
        } catch(LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelImpBlSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException("B/L확정 취소시 오류가 발생했습니다.", se);
        }

    }
    /**
     * 고객오더아이템의 작업센터코드와 위치정보를 통해 작업장코드를 조회한다.
     *
     * @param coMulti
     * @return
     * @throws LException
     */
    private String getWorkPlaceCodeLMultiData(LData co, LMultiData coMulti, int index) throws LException {
        String workPlCd = "";
        int    cnt      = 0;

        try {
            LData input = new LData();

            if (coMulti != null && coMulti.getDataCount() > 0) {
                input.setString("custCd"    , co.getString("ctrtCustCd"));
                input.setString("workCntrCd", coMulti.getString("workCntrCd", index));
                if(coMulti.containsKey("saveLocCd")) {
                    input.setString("saveLocCd" , coMulti.getString("saveLocCd" , index) == null  ? "" : coMulti.getString("saveLocCd"  , index));
                } else {
                    input.setString("saveLocCd" ,"");
                }
            }

            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao(
                                                            "select/om/om02/custCdMpng/retrieveCustCdMpngDptAndArv",
                                                            input);
            LData result    = commonDao.executeQueryForSingle();
            workPlCd        = result.getString("workPlCd");
            cnt             = result.getInt("cnt");

            if(cnt == 0) {
                throw new LBizException("작업장 매핑 데이타가 존재하지 않습니다." + input.getString("workCntrCd") + " " + input.getString("saveLocCd"));
            } else if( cnt > 1) {
                throw new LBizException("작업장 매핑 데이타가 하나이상 존재합니다.." + input.getString("workCntrCd") + " " + input.getString("saveLocCd"));
            }

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(this.getClass().getName() + "."
                    + "getWorkPlaceCodeLMultiData()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
        return workPlCd;
    }

    /**
     * 수입출고오더분배 헤더 조회하는 메소드.
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveImpGiOrdList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try {
            return dao.executeQuery("select/om/om02/salesOrd/retrieveImpGiOrdList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveImpGiOrdList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }
    /**
     * 수입출고오더분배 작업경로 조회하는 메소드.
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveImpGiItemWorkRouteList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try {
            return dao.executeQuery("select/om/om02/salesOrd/retrieveImpGiItemWorkRouteList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveImpGiItemWorkRouteList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }

    /**
     * 수입출고오더분배 BL 가용재고 조회하는 메소드.
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveBlAvailStock(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try {
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBlAvailStock", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBlAvailStock()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * Liner PIC 조회하는 메소드.
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveShipOfcrList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try {
            return dao.executeQuery("select/ma/ma01/ptnInfoMngt/retrieveShipOfcrList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveShipOfcrList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    public LData updateSalesOrdAuto(LData header, LMultiData item) throws LException {

        LData retVal = new LData();
        retVal.setString("result"    , "S");
        retVal.setString("message"   , "");
        retVal.setString("salesOrdNo", "");

        LData      salesOrd     = null;
        LMultiData salesOrdItem = null;

        try{

            LLog.debug.println("****************** updateSalesOrdAuto : header \n");
            LLog.debug.println("****************** header "+header);
            LLog.debug.println("***************************");

            LLog.debug.println("****************** updateSalesOrdAuto : item \n");
            LLog.debug.println("****************** item "+item);
            LLog.debug.println("***************************");

            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(header);

            String ifId = header.getString("ifId");
            if(ifId.equals("IF_HPP_OM_ImportBL") || ifId.equals("IF_HHP_OM_ImportBL") || ifId.equals("IF_NSK_OM_ImportOrder"))
            {
                LData ordData   = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpBlSalesOrdNo", header);
                if(ordData == null || ordData.getString("salesOrdNo") == null || "".equals(ordData.getString("salesOrdNo"))) {
                    return retVal;
                } else {
                    retVal.setString("result"   , "E");
                    retVal.setString("message"  , "이미 BL확정됨 : " + ordData.getString("salesOrdNo"));
                    throw new LBizException("이미 BL확정됨 : " + ordData.getString("salesOrdNo"));
                }
            }

            //확정여부테이블에서 확정상태를 조회하여 체크한다. PPG 일 경우
            if(header.getString("custCd").equals(OmConstants.CUST_CO_CD_PG) ){
                LData ordData   = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpBlSalesOrdNo", header);
                LData workRouteCnt = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteCount", ordData);
                if(workRouteCnt != null && workRouteCnt.getInt("cnt") > 0) {
                    //리턴 취소불가메세지
                    retVal.setString("result", "E");
                    retVal.setString("message", "확정된 내역이 존재하여 오더 취소가 불가합니다.");
                    throw new LBizException("확정된 내역이 존재하여 오더수정 불가 : " + ordData.getString("salesOrdNo"));
                }
            }
            
            //2015-04-14 전주페이퍼 조건 추가
            if( ifId.equals("IF_NSK_OM_SalesOrder") && header.getString("custCd").equals(OmConstants.CUST_CO_CD_NC) ){
                LData ordData   = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpBlSalesOrdNo", header);
                LData workRouteCnt = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteCount", ordData);
                if(workRouteCnt != null && workRouteCnt.getInt("cnt") > 0) {
                    //리턴 취소불가메세지
                    retVal.setString("result", "E");
                    retVal.setString("message", "확정된 내역이 존재하여 오더 취소가 불가합니다.");
                    throw new LBizException("확정된 내역이 존재하여 오더수정 불가 : " + ordData.getString("salesOrdNo"));
                }
            }

            /* 판매오더매핑조회 call( 고객오더헤더정보, 고객오더아이템리스트)
             * return : 판매오더헤더정보, 판매오더아이템리스트
             * */
            ICustCdMpng pbc     = (ICustCdMpng) PbcUtil.getPbc(ICustCdMpng.class);
            LMultiData result   = pbc.retrieveSalesOrdMpng(header, item);

            salesOrd            = (LData)result.getLData("so",          0);
            salesOrdItem        = (LMultiData)result.get("soMulti",     0);

            LLog.debug.println("****************** updateSalesOrdAuto : salesOrdItem \n");
            LLog.debug.println("****************** salesOrdItem "+salesOrdItem);
            LLog.debug.println("***************************");


            /* 2. 공통 필수항목 체크
               헤더: 오더유형코드(checker), 고객오더번호, 계약고객코드(checker,파트너)
               아이템: 고객오더라인번호, 고객코드(대표고객코드), 아이템코드(checker), 오더량(수량/중량/CBM 중 하나라도 값이 있어야 함)
               -> 공통 필수항목이 없으면 오류 발생*/
            LData tempData          = new LData();
            IChecker ordTypeChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 8);
            tempData.setString("ordTypeCd"  , salesOrd.getString("ordTypeCd"));

            if(!ordTypeChecker.isExist(tempData)) {
                retVal.setString("result"   , "E");
                retVal.setString("message"  , "존재하지 않는 오더유형코드:" + salesOrd.getString("ordTypeCd"));
                //return retVal;
                throw new LBizException("존재하지 않는 오더유형코드:" + salesOrd.getString("ordTypeCd"));
            }

            if(salesOrd.getString("custOrdNo") == null || salesOrd.getString("custOrdNo").equals("")){
                retVal.setString("result"   , "E");
                retVal.setString("message"  , "고객오더번호 누락");
                throw new LBizException("고객오더번호 누락");
            }

            IChecker ptnCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 3);
            tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));

            if(!ptnCdChecker.isExist(tempData)) {
                retVal.setString("result"   , "E");
                retVal.setString("message"  , "존재하지 않는 계약고객코드:" + salesOrd.getString("ctrtCustCd"));
                throw new LBizException("존재하지 않는 계약고객코드:" + salesOrd.getString("ctrtCustCd"));
            }

            if(salesOrd.getString("custOfCustCd") != null && !"".equals(salesOrd.getString("custOfCustCd"))){
                LData custOfcustCdChkParam = new LData();
                laf.application.dao.LCompoundDao custOfcustCdChkDao = new laf.application.dao.LCompoundDao();
                custOfcustCdChkParam.setString("ptnCd"     , salesOrd.getString("rptCustCd"));
                custOfcustCdChkParam.setString("custPtnCd", salesOrd.getString("custOfCustCd"));
                LData ptnCd = custOfcustCdChkDao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveChkCustPtnExistYn", custOfcustCdChkParam);

                // 전주페이퍼 수출인 경우 고객거래선을 둘째자리부터 조회하도록 수정 : 전주에서 내려줄때 수출 내수 구분을 모르고 전송하기때문
                if(salesOrd.getString("rptCustCd").equals("P1100") && salesOrd.getString("ifId").equals("IF_NSK_OM_ExportOrder")){
                    ptnCd = custOfcustCdChkDao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveChkCustPtnNskExistYn", custOfcustCdChkParam);
                }


                if(ptnCd == null || ptnCd.getString("ptnCd") == null || ptnCd.getString("ptnCd").equals("")){
                    retVal.setString("result", "E");
                    retVal.setString("message", "존재하지 않는 고객거래선코드:" + salesOrd.getString("custOfCustCd"));
                    throw new LBizException("존재하지 않는 고객거래선코드:"+salesOrd.getString("custOfCustCd"));
                }
            }

            IChecker itemCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 5);

            for(int i = 0; i < salesOrdItem.getDataCount(); i++){
                if(salesOrdItem.getString("custOrdLineNo", i) == null || salesOrdItem.getString("custOrdLineNo", i).equals("")){
                    retVal.setString("result"   , "E");
                    retVal.setString("message"  , "고객오더라인번호 누락");
                    throw new LBizException("고객오더라인번호 누락");
                }

                tempData.setString("ptnCd"  , salesOrdItem.getString("custCd",i));
                tempData.setString("itemCd" , salesOrdItem.getString("itemCd",i));
                if(!itemCdChecker.isExist(tempData)) {
                    retVal.setString("result"   , "E");
                    retVal.setString("message"  , "존재하지 않는 아이템코드:" + salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
                    throw new LBizException("존재하지 않는 아이템코드:" + salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
                }
            }

            /* 3. 오더유형 속성 조회
               수출입내수구분, 물류서비스구분, 가용재고확인여부(계약고객속성도 고려해서 함께 조회함),
               긴급관리여부
             수출입내수구분 ->값세팅
            */
            LData ordTypeData             = dao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", salesOrd);

            tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));
            LData ptnMasterData           = dao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnInfoDtlSalesOrd", tempData);

            String masterAvailStockConfYn = ptnMasterData.getString("availStockConfYn") == null ? "N" : ptnMasterData.getString("availStockConfYn");//가용재고확인여부 파트너마스터

            String availStockConfYn       = ordTypeData.getString("availStockConfYn"); //가용재고확인여부
            String logisSvcSctnCd         = ordTypeData.getString("logisSvcSctnCd");//물류서비스구분
            String expImpDomSctnCd        = ordTypeData.getString("expImpDomSctnCd");//수출입내수구분
            String exprMngtYn             = ordTypeData.getString("exprMngtYn");//긴급관리여부
            String logisArCd              = ordTypeData.getString("logisArCd"); //물류지역구분

            salesOrd.setString("expImpDomSctnCd", expImpDomSctnCd);

            String cargoFormCd = salesOrd.getString("cargoFormCd");

            if(OmConstants.EXP_IMP_EXPORT.equals(expImpDomSctnCd) && !(OmConstants.CARGO_FORM_BULK.equals(cargoFormCd) || OmConstants.CARGO_FORM_CONTAINER.equals(cargoFormCd)) ) {
                retVal.setString("result", "E");
                retVal.setString("message", "화물형태 누락");
                throw new LBizException("화물형태 누락");
            }

            /* 4. 작업정보관리유형코드 결정
               인터페이스ID 별로 결정됨

               IF_HPP_ImportBL, IF_HHP_ImportBL, IF_LAF_Sales_Order, IF_LAF_Purcharse_Order
               --> 헤더별 '01'

               IF_HPP_SalesOrder, IF_HPP_PO, IF_HPP_TransferOrder, IF_HPP_STOReq,
               IF_HPP_ExportOrder,IF_HHP_SalesOrder, IF_HHP_PO
               --> 아이템별 '02'

               기타 case --> '01'
            */
            if(ifId.equals("IF_HPP_OM_SalesOrder"       )
                || ifId.equals("IF_HPP_OM_POChange"     )
                || ifId.equals("IF_HPP_OM_PO"           )
                || ifId.equals("IF_HPP_OM_TransferOrder")
                || ifId.equals("IF_HPP_OM_STOReq"       )
                || ifId.equals("IF_HPP_OM_ExportOrder"  )
                || ifId.equals("IF_HHP_OM_SalesOrder"   )
                || ifId.equals("IF_HHP_OM_TransferOrder")
                || ifId.equals("IF_HHP_OM_POChange"     )
                || ifId.equals("IF_HHP_OM_PO"           )
                || ifId.equals("IF_HPL_OM_SalesOrder"   )){

                    salesOrd.setString("workInfoMngtTypeCd","02");

            }else salesOrd.setString("workInfoMngtTypeCd","01");

            /* 5.물류서비스구분별 필수항목 체크 및 validation
               출발지, 도착지코드, 작업장코드를 마스터에서 조회.
               마스터에 없는 코드이면 오류

               case : 입고 01
                 필수: 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 운송 03
                 필수: 출발지코드, 도착지코드, 납기요청일자

               case : 운송입고 05
                 필수: 출발지코드, 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 출고 02
                 필수: 출발지코드, 납기요청일자
                 출발지 종류가 '센터'가 아니면 오류

               case : 출고운송 04
                 필수: 출발지코드, 도착지코드, 납기요청일자
                 출발지 종류가 '센터'가 아니면 오류

               case : 출고운송입고 06
                 필수: 출발지코드, 도착지코드, 납기요청일자
                 출발지,도착지 종류가 '센터'가 아니면 오류

               case : 항만하역 07
                 필수: 작업장코드, 선박명, 항차

               case : 항만하역입고 08
                 필수: 작업장코드, 도착지코드, 선박명, 항차
                 도착지 종류가 '센터'가 아니면 오류

               case : 운송항만하역 13
                 필수: 출발지코드, 도착지코드, 납기요청일자, 작업장코드, 선박명, 항차

               case : 출고운송항만하역 14
                 필수: 출발지코드, 도착지코드, 납기요청일자, 작업장코드, 선박명, 항차
                 출발지 종류가 '센터'가 아니면 오류

               case : 항만하역입고출고운송 09
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
                 출발지 종류가 '센터'가 아니면 오류

               case : 항만하역입고출고운송입고 10
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
                 출발지,도착지 종류가 '센터'가 아니면 오류

               case : 항만하역운송 11
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자

               case : 항만하역운송입고 12
                 필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 포워딩 15
                 필수: 해상항공구분코드

               case : 포워딩운송 20
                 필수: 해상항공구분코드, 출발지코드, 도착지코드, 납기요청일자

               case : 포워딩운송입고 21
                 필수: 해상항공구분코드, 출발지코드, 도착지코드, 납기요청일자
                 도착지 종류가 '센터'가 아니면 오류

               case : 운송포워딩 16
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드

               case : 출고운송포워딩 17
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
                 출발지 종류가 '센터'가 아니면 오류

               case : 운송포워딩입고 18
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
                 도착지 종류가 '센터'가 아니면 오류

               case : 출고운송포워딩입고 19
                 필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
                 출발지,도착지 종류가 '센터'가 아니면 오류
             */

            String workPlCd = salesOrd.getString("workPlCd"); //작업장코드
            if(workPlCd != null && !workPlCd.equals("")){
                IChecker workPlCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 7);
                tempData.setString("corpCd"     , salesOrd.getString("corpCd"));
                tempData.setString("workPlCd"   , workPlCd);
                if(!workPlCdChecker.isExist(tempData)) {
                    workPlCd = "";
                }
            }

            String shipNm               = salesOrd.getString("shipNm"           )== null ? "" : salesOrd.getString("shipNm");//선박명
            String portCnt              = salesOrd.getString("portCnt"          )== null ? "" : salesOrd.getString("portCnt");//항차
            String oceanAirSctnCd       = salesOrd.getString("oceanAirSctnCd"   )== null ? "" : salesOrd.getString("oceanAirSctnCd");//해상항공구분코드
            String dptArKind            = ""; //출발지 종류
            String arvArKind            = ""; //도착지종류
            String dptArDept            = ""; //출발지 부서
            String arvArDept            = ""; //도착지 부서
            String dptArCd              = ""; //출발지코드
            String arvArCd              = ""; //도착지코드
            String aptdReqYmd           = ""; //납기요청일자
            String arvWmYn              = "N";
            String dptWmYn              = "N";
            LData dptArCdData           = null;
            LData arvArCdData           = null;
            String workInfoMngtTypeCd   = salesOrd.getString("workInfoMngtTypeCd");
            String custOrdLineNo        = "";

            LMultiData loopData = new LMultiData();
            if(workInfoMngtTypeCd.equals("01")){
                loopData.addLData(salesOrd);
                for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    custOrdLineNo = ":라인" +salesOrdItem.getString("custOrdLineNo", i);

                    dptArCd     = salesOrdItem.getString("dptArCd",i) == null ? "" : salesOrdItem.getString("dptArCd",i); //출발지코드
                    arvArCd     = salesOrdItem.getString("arvArCd",i) == null ? "" : salesOrdItem.getString("arvArCd",i); //도착지코드
                    aptdReqYmd  = salesOrdItem.getString("aptdReqYmd",i) == null ? "" : salesOrdItem.getString("aptdReqYmd",i); //납기요청일자


                    //LLog.debug.println("********* 지류유통******: dptArCd start ***"+dptArCd);
                    //LLog.debug.println("********* 지류유통******: arvArCd start ***"+arvArCd);

                    tempData.setString("code", dptArCd);
                    tempData.setString("workSctnCd", salesOrdItem.getString("dptArTypeCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    dptArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);

                    tempData.setString("code", arvArCd);
                    tempData.setString("workSctnCd", salesOrdItem.getString("arvArTypeCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    arvArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);

                    if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
                        dptArKind   = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
                        dptArCd     = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
                        dptArDept   = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
                        dptWmYn     = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");

                    }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {
                        retVal.setString("message", "존재하지않는출발지코드" + dptArCd+":"+custOrdLineNo);
                        throw new LBizException("존재하지않는출발지코드"+ dptArCd+":"+custOrdLineNo);
                    }

                    if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
                        arvArKind   = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
                        arvArCd     = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
                        arvArDept   = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
                        arvWmYn     = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");

                    }else{
                        retVal.setString("message", "존재하지않는도착지코드" + arvArCd+":"+custOrdLineNo);
                        throw new LBizException("존재하지않는도착지코드"+ arvArCd+":"+custOrdLineNo);
                    }

                    if(salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                        if(salesOrdItem.getString("arvArZipCd",i).equals("")
                        && salesOrdItem.getString("arvArZipAddr",i).equals("")
                        && salesOrdItem.getString("arvArDtlAddr",i).equals("") ){
                                salesOrdItem.modifyString("arvArZipCd", i, arvArCdData.getString("centerZipCd"));
                                salesOrdItem.modifyString("arvArZipAddr", i, arvArCdData.getString("centerZipAddr"));
                                salesOrdItem.modifyString("arvArDtlAddr", i, arvArCdData.getString("centerDtlAddr"));
                        }
                    }

                    if(salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){

                        if(salesOrdItem.getString("dptArZipCd",i).equals("")
                        && salesOrdItem.getString("dptArZipAddr",i).equals("")
                        && salesOrdItem.getString("dptArDtlAddr",i).equals("") ){
                                salesOrdItem.modifyString("dptArZipCd", i, dptArCdData.getString("centerZipCd"));
                                salesOrdItem.modifyString("dptArZipAddr", i, dptArCdData.getString("centerZipAddr"));
                                salesOrdItem.modifyString("dptArDtlAddr", i, dptArCdData.getString("centerDtlAddr"));
                        }
                    }
                }

            }else{
                for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    loopData.addLData(salesOrdItem.getLData(i));
                }

                    dptArCd     = salesOrd.getString("dptArCd") == null ? "" : salesOrd.getString("dptArCd"); //출발지코드
                    arvArCd     = salesOrd.getString("arvArCd") == null ? "" : salesOrd.getString("arvArCd"); //도착지코드
                    aptdReqYmd  = salesOrd.getString("aptdReqYmd") == null ? "" : salesOrd.getString("aptdReqYmd"); //납기요청일자

                    tempData.setString("code", dptArCd);
                    tempData.setString("workSctnCd", salesOrd.getString("dptArTypeCd"));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    dptArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);

                    tempData.setString("code", arvArCd);
                    tempData.setString("workSctnCd", salesOrd.getString("arvArTypeCd"));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    arvArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);


                    if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
                        dptArKind   = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
                        dptArCd     = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
                        dptArDept   = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
                        dptWmYn     = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");

                    }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {

                        if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)){
                            retVal.setString("message", "[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는출발지코드" + dptArCd);
                            throw new LBizException("[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는출발지코드"+ dptArCd);
                        }else{
                            retVal.setString("message", "존재하지않는출발지코드" + dptArCd);
                            throw new LBizException("존재하지않는출발지코드"+ dptArCd);
                        }
                    }

                    if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
                        arvArKind   = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
                        arvArCd     = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
                        arvArDept   = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
                        arvWmYn     = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");

                    }else{
                        if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)){
                            retVal.setString("message", "[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는도착지코드" + arvArCd);
                            throw new LBizException("[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는도착지코드"+ arvArCd);
                        }else{
                            retVal.setString("message", "존재하지않는도착지코드" + arvArCd);
                            throw new LBizException("존재하지않는도착지코드"+ arvArCd);
                        }
                    }

                    if(salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                        if(salesOrd.getString("arvArZipCd").equals("")
                        && salesOrd.getString("arvArZipAddr").equals("")
                        && salesOrd.getString("arvArDtlAddr").equals("") ){
                            salesOrd.setString("arvArZipCd", arvArCdData.getString("centerZipCd"));
                            salesOrd.setString("arvArZipAddr", arvArCdData.getString("centerZipAddr"));
                            salesOrd.setString("arvArDtlAddr", arvArCdData.getString("centerDtlAddr"));
                        }
                    }
                    if(salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CENTER)
                            || salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){

                        if(salesOrd.getString("dptArZipCd").equals("")
                        && salesOrd.getString("dptArZipAddr").equals("")
                        && salesOrd.getString("dptArDtlAddr").equals("") ){
                            salesOrd.setString("dptArZipCd", dptArCdData.getString("centerZipCd"));
                            salesOrd.setString("dptArZipAddr", dptArCdData.getString("centerZipAddr"));
                            salesOrd.setString("dptArDtlAddr", dptArCdData.getString("centerDtlAddr"));

                        }
                    }
            }

            //출도착지 담당자 셋팅
            if(salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                tempData.setString("custPtnCd", salesOrd.getString("dptArCd"));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                if(salesOrd.getString("dptArOfcrNm").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("dptArOfcrNm", ofcrData.getString("ordOfcrNm"));
                    }
                }
                if(salesOrd.getString("dptArOfcrTelNo").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("dptArOfcrTelNo", ofcrData.getString("rptTelNo"));
                    }
                }
            }

            if(salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                tempData.setString("custPtnCd", salesOrd.getString("arvArCd"));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                if(salesOrd.getString("arvArOfcrNm").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("arvArOfcrNm", ofcrData.getString("ordOfcrNm"));
                    }
                }
                if(salesOrd.getString("arvArOfcrTelNo").equals("")){
                    if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                        salesOrd.setString("arvArOfcrTelNo", ofcrData.getString("rptTelNo"));
                    }
                }
            }
            for(int i = 0;i<salesOrdItem.getDataCount();i++){
                if(salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                    tempData.setString("custPtnCd", salesOrdItem.getString("dptArCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                    if(salesOrdItem.getString("dptArOfcrNm",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("dptArOfcrNm", i, ofcrData.getString("ordOfcrNm"));
                        }
                    }
                    if(salesOrdItem.getString("dptArOfcrTelNo",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("dptArOfcrTelNo", i, ofcrData.getString("rptTelNo"));
                        }
                    }
                }
                if(salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                    tempData.setString("custPtnCd", salesOrdItem.getString("arvArCd",i));
                    tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                    LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
                    if(salesOrdItem.getString("arvArOfcrNm",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("arvArOfcrNm", i, ofcrData.getString("ordOfcrNm"));
                        }
                    }
                    if(salesOrdItem.getString("arvArOfcrTelNo",i).equals("")){
                        if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
                            salesOrdItem.modifyString("arvArOfcrTelNo", i, ofcrData.getString("rptTelNo"));
                        }
                    }
                }
            }

            for(int i = 0;i<loopData.getDataCount();i++){
                if(workInfoMngtTypeCd.equals("01")){

                }else{
                    custOrdLineNo = ":라인" +loopData.getString("custOrdLineNo", i);
                }

                dptArCd     = loopData.getString("dptArCd",i) == null ? "" : loopData.getString("dptArCd",i); //출발지코드
                arvArCd     = loopData.getString("arvArCd",i) == null ? "" : loopData.getString("arvArCd",i); //도착지코드
                aptdReqYmd  = loopData.getString("aptdReqYmd",i) == null ? "" : loopData.getString("aptdReqYmd",i); //납기요청일자


                //LLog.debug.println("********* 지류유통******: loopData dptArCd start ***"+dptArCd);
                //LLog.debug.println("********* 지류유통******: loopData arvArCd start ***"+arvArCd);

                tempData.setString("code", dptArCd);
                tempData.setString("workSctnCd", loopData.getString("dptArTypeCd",i));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                dptArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);

                tempData.setString("code", arvArCd);
                tempData.setString("workSctnCd", loopData.getString("arvArTypeCd",i));
                tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                arvArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);


                if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
                    dptArKind   = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
                    dptArCd     = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
                    dptArDept   = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
                    dptWmYn     = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");

                }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {
                    if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)){
                        retVal.setString("message", "[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는출발지코드" + dptArCd);
                        throw new LBizException("[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는출발지코드"+ dptArCd);
                    }else{
                        retVal.setString("message", "존재하지않는출발지코드" + dptArCd);
                        throw new LBizException("존재하지않는출발지코드"+ dptArCd);
                    }
                }

                if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
                    arvArKind   = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
                    arvArCd     = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
                    arvArDept   = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
                    arvWmYn     = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");

                }else{

                    if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)){
                        retVal.setString("message", "[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는도착지코드" + arvArCd);
                        throw new LBizException("[Recycle]-<CO:"+ salesOrd.getString("custOrdNo")+">존재하지않는도착지코드"+ arvArCd);
                    }else{
                        retVal.setString("message", "존재하지않는도착지코드" + arvArCd);
                        throw new LBizException("존재하지않는도착지코드"+ arvArCd);
                    }
                }

                if(loopData.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                        || loopData.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
                    if(loopData.getString("arvArZipCd",i).equals("")
                    && loopData.getString("arvArZipAddr",i).equals("")
                    && loopData.getString("arvArDtlAddr",i).equals("") ){
                        if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                            salesOrd.setString("arvArZipCd", arvArCdData.getString("centerZipCd"));
                            salesOrd.setString("arvArZipAddr", arvArCdData.getString("centerZipAddr"));
                            salesOrd.setString("arvArDtlAddr", arvArCdData.getString("centerDtlAddr"));
                        }else{
                            salesOrdItem.modifyString("arvArZipCd", i, arvArCdData.getString("centerZipCd"));
                            salesOrdItem.modifyString("arvArZipAddr", i, arvArCdData.getString("centerZipAddr"));
                            salesOrdItem.modifyString("arvArDtlAddr", i, arvArCdData.getString("centerDtlAddr"));
                        }
                    }
                }
                if(loopData.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
                        || loopData.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){

                    if(loopData.getString("dptArZipCd",i).equals("")
                    && loopData.getString("dptArZipAddr",i).equals("")
                    && loopData.getString("dptArDtlAddr",i).equals("") ){
                        if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                            salesOrd.setString("dptArZipCd", dptArCdData.getString("centerZipCd"));
                            salesOrd.setString("dptArZipAddr", dptArCdData.getString("centerZipAddr"));
                            salesOrd.setString("dptArDtlAddr", dptArCdData.getString("centerDtlAddr"));
                        }else{
                            salesOrdItem.modifyString("dptArZipCd", i, dptArCdData.getString("centerZipCd"));
                            salesOrdItem.modifyString("dptArZipAddr", i, dptArCdData.getString("centerZipAddr"));
                            salesOrdItem.modifyString("dptArDtlAddr", i, dptArCdData.getString("centerDtlAddr"));
                        }

                    }
                }

                switch(Integer.parseInt(logisSvcSctnCd)){

                    case 1:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락" + custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 3:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                    break;

                    case 5:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 2:
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 4:
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 6:
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 7:
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }

                    break;

                    case 8:
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 13:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 14:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        break;

                    case 9:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 10:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 11:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 12:
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(shipNm.equals("")){
                            retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
                        }
                        if(portCnt.equals("")){
                            retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
                        }
                        if(workPlCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                        break;

                    case 15:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                    break;

                    case 20:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        break;

                    case 21:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 16:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                    break;

                    case 17:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    case 18:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                        break;

                    case 19:
                        if(oceanAirSctnCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
                        }
                        if(arvArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
                        }
                        if(dptArCd.equals("")){
                            retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
                        }
                        if(aptdReqYmd.equals("")){
                            retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
                        }
                        if(!arvWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
                        }
                        if(!dptWmYn.equals("Y")){
                            retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                            throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
                        }
                    break;

                    default:
                    break;
                }
            }

            /*
            6. 고객오더번호로 판매오더정보를 조회한다.
                다음 항목을 조회한 데이터로 매핑된 데이타를 채운다.
                4.1 매핑된 판매오더
                      판매오더번호
                      법인번호
                      오더관리실행부서코드
                      오더관리포워딩부서코드
                      오더관리실행담당자ID
                      오더관리포워딩담당자ID
                      계약번호
                      오더요청고객코드
                      청구고객코드
                      매출부서코드
                      영업담당자ID
                 4.2 매핑된 판매오더아이템
                      판매오더번호
             */

            LData      order = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdFromCustOrdNo", salesOrd);
            LMultiData salesOrdItem1 = new LMultiData();
            LMultiData tempItemList = new LMultiData();
            if(order != null) {

                salesOrd.setString("salesOrdNo"         , order.getString("salesOrdNo"));
                salesOrd.setString("corpCd"             , order.getString("corpCd"));
                salesOrd.setString("ordMngtExceDeptCd"  , order.getString("ordMngtExceDeptCd"));
                salesOrd.setString("ordMngtFwdDeptCd"   , order.getString("ordMngtFwdDeptCd"));
                salesOrd.setString("ordMngtExceOfcrId"  , order.getString("ordMngtExceOfcrId"));
                salesOrd.setString("ordMngtFwdOfcrId"   , order.getString("ordMngtFwdOfcrId"));
                salesOrd.setString("ctrtNo"             , order.getString("ctrtNo"));
                salesOrd.setString("ordReqCustCd"       , order.getString("ordReqCustCd"));
                salesOrd.setString("bilgCustCd"         , order.getString("bilgCustCd"));
                salesOrd.setString("sellDeptCd"         , order.getString("sellDeptCd"));
                salesOrd.setString("salesOfcrId"        , order.getString("salesOfcrId"));
                salesOrd.setString("salesOrdCmptSctnCd" , order.getString("salesOrdCmptSctnCd"));

                int lineNo = 0;
                if(ifId.equals("IF_SMN_OM_ShippingRequest") || ifId.equals("IF_SFC_OM_ShippingRequest")
                        || ifId.equals("IF_CII_OM_ShippingRequest") ) {

                }else{
                    LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveMaxLineNo", order);
                    lineNo  = lData.getInt("lineNo");
                }

                for(int i = 0; i < salesOrdItem.getDataCount();i++){
                    LData ordItem = salesOrdItem.getLData(i);
//                  제지 수출오더인 경우 혼적된 아이템을 고려하여 수출오더번호로 아이템을 조회한다.
                    if(ifId.equals("IF_HPP_OM_ExportOrder")) {
                        LData itemLData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdItemFromCustOrd", ordItem);
                        if(itemLData == null || itemLData.getString("lineNo") == null || "".equals(itemLData.getString("lineNo"))) {
                            //lineNo = lineNo+10;
                        	//2015-12-29 제지수출오더는 라인번호는 +1
                        	lineNo = lineNo+1;
                            ordItem.setString("salesOrdNo"  , order.getString("salesOrdNo"));
                            ordItem.setString("lineNo"      , lineNo+"");
                            ordItem.setString("addYn"       , "Y");
                        } else {
                            ordItem.setString("salesOrdNo"  , itemLData.getString("salesOrdNo"));
                            ordItem.setString("lineNo"      , itemLData.getString("lineNo"));
                            ordItem.setString("addYn"       , "N");
                        }
                    } else {
                        ordItem.setString("salesOrdNo", order.getString("salesOrdNo"));
                        LData itemLData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdItemFromSalesOrd", ordItem);
                        if(itemLData == null || itemLData.getString("lineNo") == null || "".equals(itemLData.getString("lineNo"))) {
                            lineNo = lineNo+10;
                            ordItem.setString("lineNo"      , lineNo+"");
                            ordItem.setString("addYn"       , "Y");
                        } else {
                            ordItem.setString("lineNo"      , itemLData.getString("lineNo"));
                            ordItem.setString("addYn"       , "N");
                        }
                    }
                    salesOrdItem1.addLData(ordItem);
                }

//              제지 수출오더인 경우 조회된 아이템의 항목중  전송된 co에 해당하는  so외의 다른 so, 즉 혼적된 so가 포함되었다면 혼적된 so를 so_no단위로 추출하여 가지고 있음
                if(ifId.equals("IF_HPP_OM_ExportOrder")) {
                    boolean isSkip      = false;
                    LData tempItem      = null;
                    LData tmpItem       = null;
                    String salesOrdNo   = "";

                    if(salesOrdItem1 != null && salesOrdItem1.getDataCount() > 0) {
                        for(int i = 0; i < salesOrdItem1.getDataCount(); i++) {
                            tempItem    = salesOrdItem1.getLData(i);
                            salesOrdNo  = tempItem.getString("salesOrdNo");

                            if(!salesOrdNo.equals(order.getString("salesOrdNo"))) {
                                if(tempItemList != null && tempItemList.getDataCount() > 0) {
                                    isSkip = false;
                                    for(int j = 0; j < tempItemList.getDataCount(); j++) {
                                        tmpItem = tempItemList.getLData(j);

                                        if(salesOrdNo.equals(tmpItem.getString("salesOrdNo")) ){
                                            isSkip = true;
                                            break;
                                        }
                                    }

                                    if(!isSkip){
                                        tempItemList.addLData(tempItem);
                                    }
                                } else {
                                    tempItemList.addLData(tempItem);
                                }
                            }
                        }
                    }
                }
            }

            /* 7. 계약번호 및 관련 정보 조회
               고객오더유형별계약조회 오퍼레이션 사용
               계약번호, 매출부서코드, 영업사원ID, 청구고객코드를 세팅함. 오더담당부서코드도 받음.

               리턴값의 건수가 1건 이상인 경우에는
               계약번호, 매출부서코드, 영업사원ID, 청구고객코드를 세팅하지 않고 다음으로 넘어간다.

               리턴값의 건수가 0건인 경우에는
               오류 발생
             */
            
            /* 주석처리. cys. 2013-12-17
            LMultiData ctrtTmp      = retrieveCustOrdTypeEachCtrt(salesOrd);
            LMultiData ctrtData     = (LMultiData)ctrtTmp.get("OBJECT_TO_GDRs",0);

            String ordChrgDeptCd = ""; //오더담당부서코드

            if(ctrtData.getDataCount()==1){
                salesOrd.setString("ctrtNo", ctrtData.getLData(0).getString("code"));
                salesOrd.setString("sellDeptCd", ctrtData.getLData(0).getString("sellDeptCd"));
                salesOrd.setString("salesOfcrId", ctrtData.getLData(0).getString("salesOfcrId"));
                salesOrd.setString("bilgCustCd", ctrtData.getLData(0).getString("bilgCd"));
                ordChrgDeptCd = ctrtData.getLData(0).getString("ordChrgDeptCd");
            }else if(ctrtData.getDataCount() > 1){}
            else{
                retVal.setString("result", "E");
                retVal.setString("message", "고객오더유형별계약조회오류");
                throw new LBizException("고객오더유형별계약조회오류");
            }
            */

            /* 9. 오더관리실행부서세팅
               if 출발지 작업장 유형이 센터인 경우 -> 출발지 작업장에 매핑된 부서
               else
                  if 도착지 작업장 유형이 센터인 경우 -> 도착지 작업장에 매핑된 부서
                  else
                     계약서에 정의된 오더 부서
                  end if
               end if
               부서가 없으면 오류
             */

            LData OrdMngtExceDeptCdData = setOrdMngtExceDeptCd(salesOrd);
            salesOrd.setString("ordMngtExceDeptCd", OrdMngtExceDeptCdData.getString("ordMngtExceDeptCd"));
            salesOrd.setString("tranPlanCntrCd"   , OrdMngtExceDeptCdData.getString("tranPlanCntrCd"));
            if(OrdMngtExceDeptCdData.getString("result").equals("E") || salesOrd.getString("ordMngtExceDeptCd")==null || salesOrd.getString("ordMngtExceDeptCd").equals("")){
                retVal.setString("result", "E");
                retVal.setString("message", "오더관리실행부서 세팅오류:");
                if(OrdMngtExceDeptCdData.getString("message")!=null && !OrdMngtExceDeptCdData.getString("message").equals(""))
                    throw new LBizException(OrdMngtExceDeptCdData.getString("message"));
                else
                    throw new LBizException("오더관리실행부서 세팅오류:");
            }

            /* 10. 오더관리실행담당자ID 세팅(TB_OM05006)
               계약고객코드, 오더관리실행부서코드, 수출입내수구분코드로 오더관리담당자 기준정보에서 main 담당자 조회
               조건에 맞는 담당자가 없으면 세팅 안함.
               조회조건: 부서코드, 대표고객코드, 수출입내수구분코드, 주요담당자여부 = 'Y'인 사람 조회
             */
            tempData.setString("ordChrgDeptCd", salesOrd.getString("ordMngtExceDeptCd"));
            tempData.setString("custCd", salesOrd.getString("rptCustCd"));
            tempData.setString("expImpDomSctnCd", salesOrd.getString("expImpDomSctnCd"));
            LData ofcrIdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdMngtExceOfcrId", tempData);

            if(ofcrIdData.getString("userId")!=null && !ofcrIdData.getString("userId").equals(""))
                salesOrd.setString("ordMngtExceOfcrId", ofcrIdData.getString("userId"));


            /* 14. 장기오더여부 판단 (장기오더여부 판단 대상은 출고오더만 판단)(오더유형의 물류서비스구분이 출고가 낀것.
                작업정보관리유형이 '01'이면 헤더 납기일자로 1번만 작업함.
                작업정보관리유형이 '02'이면 아이템별 납기일자로 아이템별로 작업함
                납기일자가 고객오더접수일자 D+2일이상 큰 경우 장기오더여부에 'Y'로 세팅함.
             */
            if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_09)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_10)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_14)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_17)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_19)
                    || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_28)){
                if(salesOrd.getString("custOrdRecpDate") != null && !salesOrd.getString("custOrdRecpDate").equals("")){

                    if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                        String custOrdRecpDate = pbf.fw.support.util.DateUtil.addDays(salesOrd.getString("custOrdRecpDate").substring(0, 8),2);
                        if(salesOrd.getString("aptdReqYmd").compareTo(custOrdRecpDate)>=0)
                            salesOrd.setString("ltrmOrdYn","Y");
                    }else{
                        for(int i = 0;i<salesOrdItem.getDataCount();i++){
                            if(salesOrdItem.getString("aptdReqYmd",i).compareTo(pbf.fw.support.util.DateUtil.addDays(salesOrd.getString("custOrdRecpDate").substring(0, 8),2))>=0)
                                salesOrd.setString("ltrmOrdYn","Y");
                        }
                    }
                }
            }
            /* 15. 긴급여부판단 (긴급관리여부가 'Y' 이고 대기오더가 'Y'가 아닌 경우에만 실행함)
               작업정보관리유형이 '01'이면 헤더 납기일자로 1번만 작업함.
               작업정보관리유형이 '02'이면 아이템별 납기일자로 아이템별로 작업함

               마감긴급여부 판단 기준:
               납기일자가 당일인 경우에만 처리함.
               센터별고객별 마감시간 정보(OM05004)를 읽어서 C/O 접수 일시와 비교하여 긴급 여부 세팅.

               리드타임긴급여부 판단 기준:(권역테이블 MA01007)
               납기일자가 당일인 경우에만 처리함.
               출발지코드와 도착지 우편번호를 사용하여 권역 테이블에서 평균 리드타임 조회
               C/O접수일시 + 리드타임을 하여 납기일시보다 커지면 긴급으로 세팅.
             */
            String backOrdYn = "N";
            //if(salesOrd.getString("backOrdYn")!= null)
            //  backOrdYn = salesOrd.getString("backOrdYn");
            //else
            //  salesOrd.setString("backOrdYn","N");

            // 수배송TPL에 대해 오더변경(일괄자가운송전환/일괄CSN운송전환) 대상자에 대한 대기오더처리
//          if(  !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
//            && !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
//            && !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)
//            && !salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)
//            ) {
//              LData wlYnInfo = dao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnCdWlYn", salesOrd);
//              if("Y".equals(wlYnInfo.getString("ltmYn"))) {
//                  LData ordTypeChgYn = dao.executeQueryForSingle("select/om/om02/salesOrd/getOrdTypeChgYn", salesOrd);
//                  if("Y".equals(ordTypeChgYn.getString("ordTypeChgYn"))) {
//                      backOrdYn = "Y";
//                      salesOrd.setString("backOrdYn","Y");
//                  }
//              }
//          }

            if(exprMngtYn.equals("Y") && !backOrdYn.equals("Y")){
                if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
                    if(salesOrd.getString("aptdReqYmd").equals(pbf.fw.support.util.DateUtil.getCurrentDateString("yyyyMMdd"))){

                        tempData.setString("workCntrCd", salesOrd.getString("dptArCd"));
                        tempData.setString("custCd", salesOrd.getString("rptCustCd"));
                        tempData.setString("useYn", "Y");
                        LData orderCloseBasisData   = dao.executeQueryForSingle("select/om/om05/orderCloseBasisMng/retrieveOrderCloseBasisMngList", tempData);

                        if(orderCloseBasisData.getString("clsStdHms") != null &&
                           salesOrd.getString("custOrdRecpDate").substring(8, 12).compareTo(orderCloseBasisData.getString("clsStdHms"))>0)
                            salesOrd.setString("clsExprYn","Y"); //마감긴급
                        salesOrd.setString("leadTimeExprYn","N");
                        tempData.setString("workPlCd", salesOrd.getString("dptArCd"));
                        tempData.setString("corpCd", salesOrd.getString("corpCd"));
                        tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                        tempData.setString("ordTypeCd", salesOrd.getString("ordTypeCd"));
                        if(salesOrd.getString("arvArZipCd")!=null && !salesOrd.getString("arvArZipCd").equals("")
                                && !salesOrd.getString("arvArZipCd").equals(" ")    ){
                            tempData.setString("zipArCd", salesOrd.getString("arvArZipCd").substring(0, 3));

                            LData avgOpMasterData = dao.executeQueryForSingle("select/ma/ma01/regnCdMngt/retrieveAvgOpHms", tempData);
                            if(avgOpMasterData != null && avgOpMasterData.containsKey("avgOpHms") && !avgOpMasterData.getString("avgOpHms").equals(""))
                                if((salesOrd.getString("custOrdRecpDate").concat(avgOpMasterData.getString("avgOpHms"))).compareTo(salesOrd.getString("aptdReqYmd")) >0)
                                    salesOrd.setString("leadTimeExprYn","Y"); //리드타임긴급
                        }

                    }
                }else{
                    for(int i = 0;i<salesOrdItem.getDataCount();i++){
                        if(salesOrdItem.getString("aptdReqYmd",i).equals(pbf.fw.support.util.DateUtil.getCurrentDateString("yyyyMMdd"))){

                            tempData.setString("workCntrCd", salesOrdItem.getString("dptArCd",i));
                            LData orderCloseBasisData   = dao.executeQueryForSingle("select/om/om05/orderCloseBasisMng/retrieveOrderCloseBasisMngList", tempData);
                            if(orderCloseBasisData.getString("clsStdHms") != null &&
                               salesOrd.getString("custOrdRecpDate").substring(8, 12).compareTo(orderCloseBasisData.getString("clsStdHms"))>0)
                                salesOrdItem.modifyString("clsExprYn",i,"Y"); //마감긴급
                            salesOrdItem.modifyString("leadTimeExprYn",i,"N");
                            tempData.setString("workPlCd", salesOrdItem.getString("dptArCd",i));
                            tempData.setString("corpCd", salesOrd.getString("corpCd"));
                            tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
                            tempData.setString("ordTypeCd", salesOrd.getString("ordTypeCd"));
                            if(salesOrdItem.getString("arvArZipCd", i)!=null && !salesOrdItem.getString("arvArZipCd", i).equals("")
                                    && !salesOrdItem.getString("arvArZipCd", i).equals(" ")){
                                tempData.setString("zipArCd", salesOrdItem.getString("arvArZipCd",i).substring(0, 3));

                                LData avgOpMasterData = dao.executeQueryForSingle("select/ma/ma01/regnCdMngt/retrieveAvgOpHms", tempData);
                                if(avgOpMasterData != null && avgOpMasterData.containsKey("avgOpHms") && !avgOpMasterData.getString("avgOpHms").equals(""))
                                    if((salesOrd.getString("custOrdRecpDate").concat(avgOpMasterData.getString("avgOpHms"))).compareTo(salesOrdItem.getString("aptdReqYmd",i)) >0)
                                        salesOrdItem.modifyString("leadTimeExprYn",i,"Y"); //리드타임긴급
                            }
                        }
                    }
                }
            }

            /* 16. 아이템별 작업관리 유형의 헤더정보 조정 (아이템별 작업관리인 경우에만 실행)
                아이템별 납기일시 중 가장 늦은 납기일시를 헤더에 세팅
                아이템별로 하나라도 긴급이나 장기오더가 있으면 헤더에도 'Y'로
             */
            if(salesOrd.getString("workInfoMngtTypeCd").equals("02")){
                for(int i = 0;i<salesOrdItem.getDataCount();i++){
                    if(salesOrdItem.getString("aptdReqYmd",i).concat(salesOrdItem.getString("aptdReqHm",i)).compareTo(salesOrd.getString("aptdReqYmd").concat(salesOrd.getString("aptdReqHm")))>0)
                        salesOrd.setString("aptdReqYmd", salesOrdItem.getString("aptdReqYmd",i));
                        salesOrd.setString("aptdReqHm", salesOrdItem.getString("aptdReqHm",i));
                    if(salesOrdItem.getString("leadTimeExprYn",i).equals("Y"))
                        salesOrd.setString("leadTimeExprYn", "Y");
                    if(salesOrdItem.getString("clsExprYn",i).equals("Y"))
                        salesOrd.setString("clsExprYn", "Y");
                    if(salesOrdItem.getString("ltrmOrdYn",i).equals("Y"))
                        salesOrd.setString("ltrmOrdYn", "Y");
                }
            }

            //movetype setting
            LData move = new LData();
            move.setString("dptArCd"            , salesOrd.getString("dptArCd"          ));
            move.setString("dptArTypeCd"        , salesOrd.getString("dptArTypeCd"      ));
            move.setString("arvArCd"            , salesOrd.getString("arvArCd"          ));
            move.setString("arvArTypeCd"        , salesOrd.getString("arvArTypeCd"      ));
            move.setString("expImpDomSctnCd"    , salesOrd.getString("expImpDomSctnCd"  ));
            move.setString("custOrdTypeCd"      , salesOrd.getString("custOrdTypeCd"    ));
            move.setString("custMoveTypeCd"     , salesOrd.getString("custMoveTypeCd"   ));
            move.setString("ordTypeCd"          , salesOrd.getString("ordTypeCd"        ));
            move.setString("rptCustCd"          , salesOrd.getString("rptCustCd"        ));
            move.setString("custOfCustCd"       , salesOrd.getString("custOfCustCd"     ));

            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC) &&
               salesOrdItem.containsKey("col04")){ //노스케인경우
                String selfGdsCd = salesOrdItem.getString("col04", 0);
                move.setString("selfGdsCd"          , selfGdsCd);
            }else
                move.setString("selfGdsCd"          , "");

            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV) ||salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)) {
                String transValue = "";
                if(salesOrd.containsKey("col01")){ //이브자리인 경우 : 직송값
                    transValue = salesOrd.getString("col01");
                }
                move.setString("transValue"         , transValue);

            }else {
                move.setString("transValue"         , "");
            }

            // 입고운송유형인지, 출고운송유형인지 판단하여 헤더 col05(입고운송유형), col06(출고운송유형)에 세팅함
            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV) ||salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)) {

                LData inputTemp = new LData();

                inputTemp.setString("dptArCd"           , salesOrd.getString("dptArCd"          ));
                inputTemp.setString("dptArTypeCd"       , salesOrd.getString("dptArTypeCd"      ));
                inputTemp.setString("arvArCd"           , salesOrd.getString("arvArCd"          ));
                inputTemp.setString("arvArTypeCd"       , salesOrd.getString("arvArTypeCd"      ));
                inputTemp.setString("expImpDomSctnCd"   , salesOrd.getString("expImpDomSctnCd"  ));
                inputTemp.setString("custOrdTypeCd"     , salesOrd.getString("custOrdTypeCd"    ));
                inputTemp.setString("custMoveTypeCd"    , salesOrd.getString("custMoveTypeCd"   ));
                inputTemp.setString("ordTypeCd"         , salesOrd.getString("ordTypeCd"        ));
                inputTemp.setString("rptCustCd"         , salesOrd.getString("rptCustCd"        ));
                inputTemp.setString("custCd"            , salesOrd.getString("rptCustCd"        ));
                inputTemp.setString("custOfCustCd"      , salesOrd.getString("custOfCustCd"     ));

                LMultiData dptArv   = dao.executeQuery("select/om/om02/salesOrd/retrieveMoveDptArvUseYn",inputTemp);

                if(dptArv != null && dptArv.getDataCount() > 0){
                    if("Y".equals(dptArv.getString("dptArCdYn",0)) && "N".equals(dptArv.getString("arvArCdYn",0))){
                        // 출발지로 고객거래선의 입고운송유형값을 가져온다.
                        inputTemp.setString("arvArCd"         , "");
                        LData resultTemp    = dao.executeQueryForSingle("select/om/om02/salesOrd/getGiGrTypeCd",inputTemp);
                        salesOrd.setString("col05"        , resultTemp.getString("col")); // 입고운송유형코드

                    }else if("Y".equals(dptArv.getString("arvArCdYn",0)) && "N".equals(dptArv.getString("dptArCdYn",0))){
                        // 도착지로 고객거래선의 출고운송유형값을 가져온다.
                        inputTemp.setString("dptArCd"         , "");
                        LData resultTemp    = dao.executeQueryForSingle("select/om/om02/salesOrd/getGiGrTypeCd",inputTemp);
                        salesOrd.setString("col06"        , resultTemp.getString("col")); // 출고운송유형코드
                    }else if("Y".equals(dptArv.getString("dptArCdYn",0)) && "Y".equals(dptArv.getString("arvArCdYn",0))){
                        //   도착지로 고객거래선의 출고운송유형값을 출발지로 고객거래선의 입고운송유형 값을 가져온다.
                        LData col05 = dao.executeQueryForSingle("select/om/om02/salesOrd/getGrTypeCd",inputTemp); // 입고운송유형
                        LData col06 = dao.executeQueryForSingle("select/om/om02/salesOrd/getGiTypeCd",inputTemp);   // 출고운송유형
                        salesOrd.setString("col05"        , col05.getString("col05"));
                        salesOrd.setString("col06"        , col06.getString("col06"));

                    }else{ // 고객거래선을 참조하지 않고 고객오더유형과 고객이동유형코드만 가지고 오더유형을 결정함

                    }
                }else{
                    throw new LBizException("이브자리 이동유형 미존재 오류");
                }

            }

            String moveTypeCd = retrieveMoveType(move);

            //2013-05-02 장항항 원부자재 출고오더 오더유형및 이동유형 변경
            String jDptArCd = salesOrd.getString("dptArCd");
            String jcustMoveTypeCd = salesOrd.getString("custMoveTypeCd");

            if( (salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                    || ("Y".equals(ART_YN) && salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))    )
                &&jDptArCd != null && ("5500".equals(jDptArCd)||"5550".equals(jDptArCd))
                && jcustMoveTypeCd != null && "Z03".equals(jcustMoveTypeCd) ) {
                moveTypeCd = "2103";
            }

            salesOrd.setString("moveTypeCd", moveTypeCd);

            //수량중량 검증
            if(!salesOrdItem1.containsKey("basisUnitCd")){
                for(int i = 0;i<salesOrdItem1.getDataCount();i++){
                    salesOrdItem1.addString("basisUnitCd", "EA");
                }
            }
            for(int i = 0;i<salesOrdItem1.getDataCount();i++){
                LData lData = new LData();
                lData.setString("ptnCd" , salesOrdItem1.getString("custCd", i));
                lData.setString("itemCd", salesOrdItem1.getString("itemCd", i));
                LData itemMasterData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfo", lData);
                if(itemMasterData != null && !itemMasterData.isEmpty()){
                    salesOrdItem1.modifyString("basisUnitCd", i, itemMasterData.getString("basisUnitCd"));

                    if(itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_EV)||itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_SS)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem1.modifyString("basisUnitCd", i, "EA");
                        }
                    }else if (itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_PG)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem1.modifyString("basisUnitCd", i, "KG");
                        }
                    }else if (itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_SC)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem1.modifyString("basisUnitCd", i, "KG");
                        }
                    }else if (itemMasterData.getString("ptnCd").equals(OmConstants.CUST_CO_CD_CB)){
                        if(itemMasterData.getString("basisUnitCd")== null || itemMasterData.getString("basisUnitCd").equals("")){
                            salesOrdItem1.modifyString("basisUnitCd", i, "EA");
                        }
                    }
                }
            }

            //salesOrd.set("LCompoundDao", header.get("LCompoundDao"));
            salesOrd.set("LCompoundDao", dao);

            LMultiData changeData = new LMultiData();

            if(ifId.equals("IF_SMN_OM_ShippingRequest") || ifId.equals("IF_SFC_OM_ShippingRequest")
              || ifId.equals("IF_CII_OM_ShippingRequest")
            ) {

            }else{
                changeData = changeQtyWgt(salesOrd, salesOrdItem1);
            }

            String ordVerifyYn = "Y";
            for(int i = 0;i<changeData.getDataCount();i++){
                if(changeData.getString("workFlag", i).equals("S")){
                	
                	if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HW)){
                		
                	}else{
                		salesOrdItem1.modify("ordQty"   , i, changeData.get("ordQty"   , i));
                		salesOrdItem1.modify("ordWgt"   , i, changeData.get("ordWgt"   , i));
                	}
                    
                    salesOrdItem1.modify("ordCbm"   , i, changeData.get("ordCbm"   , i));
                    salesOrdItem1.modify("qtyUnitCd", i, changeData.get("qtyUnitCd", i));
                    salesOrdItem1.modify("wgtUnitCd", i, changeData.get("wgtUnitCd", i));
                    
                    if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NS)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DF)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MX)
                      || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IR)){
                        salesOrdItem.modify("pckgQty", i, changeData.get("pckgQty", i));
                    }

                }else if((!salesOrdItem1.containsKey("delYn")       || "N".equals(salesOrdItem1.getString("delYn", i))) &&
                         (!salesOrdItem1.containsKey("ordReasonCd") ||  salesOrdItem1.getString("ordReasonCd", i) == null || "".equals(salesOrdItem1.getString("ordReasonCd", i)))){

                    salesOrdItem1.modify("ordVerifyYn", i, "N");
                    salesOrdItem1.modify("col30", i, changeData.get("workMessage", i));
                    ordVerifyYn = "N";
                    //혼적이 되었을수 있으므로 현재 header의 salesOrdNo와 동일한 salesOrdNo인 아이템으로 오더검증여부가 'N'이라면 header도 오더검증여부를 'N'으로 설정
                    if(salesOrdItem1.getString("salesOrdNo", i).equals(salesOrd.getString("salesOrdNo"))) {
                        salesOrd.setString("ordVerifyYn", ordVerifyYn);
                    }
                }
            }

            for(int i = 0;i<salesOrdItem1.getDataCount();i++){
                // 이브자리에 대해 입출고오더(오더유형:1)에 대해 직송여부가 직송(3)인 경우 오더생성만 함
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)){
                    if(salesOrd.getString("custOrdTypeCd").equals("1")
                      &&(salesOrd.getString("custMoveTypeCd").equals("01") || salesOrd.getString("custMoveTypeCd").equals("03"))
                      && salesOrd.getString("col01").equals("3")){
                        salesOrdItem1.modify("ordVerifyYn", i, "N");
                        salesOrdItem1.modify("col30", i, "입출고오더에 대해 직송(3)인 경우");
                        ordVerifyYn = "N";
                        salesOrd.setString("ordVerifyYn", ordVerifyYn);
                    }
                }

                // 커피빈에 대해서 출고오더유형은 권역코드가 필수
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)){
                    if((salesOrd.getString("custOrdTypeCd").equals("O1") || salesOrd.getString("custOrdTypeCd").equals("OUT1"))
                      && "".equals(salesOrd.getString("col04"))){
                        salesOrdItem.modify("ordVerifyYn", i, "N");
                        salesOrdItem.modify("col30", i, "거래선 권역코드 NULL");
                        ordVerifyYn = "N";

                    }
                }

                //  전주페이퍼일경우 오더유형이 국내내수판매반품운송입고 이고 호기값이 널일경우 오더검증여부로 세팅
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)){
                    if(salesOrd.getString("custOrdTypeCd").equals("D") || salesOrd.getString("ordTypeCd").equals("1033")){
                        if(!salesOrdItem1.containsKey("mnCd") || salesOrdItem1.getString("mnCd", i) == null || "".equals(salesOrdItem.getString("mnCd", i))){
                            salesOrdItem1.modify("ordVerifyYn", i, "N");
                            salesOrdItem1.modify("col30", i, "호기값 누락");
                            ordVerifyYn = "N";
                            salesOrd.setString("ordVerifyYn", ordVerifyYn);// 2009.09.01 추가
                        }
                    }
                }

                //  전주페이퍼일경우 오더유형이 국내내수판매반품운송입고 이고 특성값이 널일경우 오더검증여부로 세팅
                if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)){
                    if(salesOrd.getString("custOrdTypeCd").equals("D") || salesOrd.getString("ordTypeCd").equals("1033")){
                        if(!salesOrdItem.containsKey("pculCd") || salesOrdItem.getString("pculCd", i) == null || "".equals(salesOrdItem.getString("pculCd", i))){
                            salesOrdItem1.modify("ordVerifyYn", i, "N");
                            salesOrdItem1.modify("col30", i, "특성값 누락");
                            ordVerifyYn = "N";
                            salesOrd.setString("ordVerifyYn", ordVerifyYn); // 2009.09.01 추가
                        }
                    }
                }
            }

            // 이브자리에 대해 입출고오더(오더유형:1)에 대해 직송여부가 직송(3)인 경우 오더생성만 함 : 오더 확정 보냄
            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)){
                if(salesOrd.getString("custOrdTypeCd").equals("1")
                  &&(salesOrd.getString("custMoveTypeCd").equals("01") || salesOrd.getString("custMoveTypeCd").equals("03"))
                  && salesOrd.getString("col01").equals("3")){

                    // 자동완료처리 함
                    salesOrd.setString("salesOrdStatCd"     , OmConstants.SALES_ORD_STAT_CD_06);
                    salesOrd.setString("mdfrId"             , "CSN");
                    salesOrd.setString("salesOrdCmptSctnCd" , OmConstants.SALES_ORD_CMPT_SCTN_CD_AUTO);

                    dao.add("cud/om/tb_om02001/updateSalesOrdCmpt", salesOrd);
                    dao.executeUpdate();


                    // 오더확정정보 송신(이브자리) : 확정
                    IStepEachRsltMngt evePbc    = (IStepEachRsltMngt) PbcUtil.getPbc(IStepEachRsltMngt.class);
                    salesOrd.set("LCompoundDao",dao);
                    evePbc.transferEveEtcOrdDcsn(salesOrd);

                }
            }

            tempData.setString("corpCd",            salesOrd.getString("corpCd"));
            tempData.setString("rptCustCd",         salesOrd.getString("rptCustCd"));
            tempData.setString("expImpDomSctnCd",   salesOrd.getString("expImpDomSctnCd"));
            tempData.setString("ordTypeCd",         salesOrd.getString("ordTypeCd"));
            tempData.setString("dptArTypeCd",       salesOrd.getString("dptArTypeCd"));
            tempData.setString("dptArCd",           salesOrd.getString("dptArCd"));
            tempData.setString("arvArTypeCd",       salesOrd.getString("arvArTypeCd"));
            tempData.setString("arvArCd",           salesOrd.getString("arvArCd"));

            if(salesOrdItem.getDataCount() > 0) {
                 tempData.setString("plantCd",      salesOrdItem.getString("plantCd",0));
            } else {
                tempData.setString("plantCd",       "");
            }

            tempData.setString("moveTypeCd",        salesOrd.getString("moveTypeCd"));
            //2015-01-22 제일모직 전자재료 부문 SDI 로직으로  변경
            tempData.setString("divCode",        salesOrd.getString("col23"));

            //2015-05-21 CFS 적송오더의 경우 KRPUS->KRPUS 로 처리가 되는데 생산처 코드가 없어 강제로 plantcd 넣어줌.
            if( (salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP) || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                && salesOrd.getString("custMoveTypeCd").equals("Z27") 
                && StringUtil.isNull(tempData.getString("plantCd")).equals("") 
                && !StringUtil.isNull(header.getString("workCntrCd")).equals("") ) {
 
                /**       
                2000  - 02(장항)
                3000  - 03(대전)
                5000  - 11(천안)
                8000  - 07(신탄진)
                
                P200 - 07(신탄진)
                P300 - 06(오산)
                **/
           	
            	if( header.getString("workCntrCd").equals("2000") ) {
            		tempData.setString("plantCd",           "02");
            	}
            	else if( header.getString("workCntrCd").equals("3000") ) {
            		tempData.setString("plantCd",           "03");
            	}
            	else if( header.getString("workCntrCd").equals("5000") ) {
            		tempData.setString("plantCd",           "11");
            	}
            	else if( header.getString("workCntrCd").equals("P200") ) {
            		tempData.setString("plantCd",           "07");
            	}
            	else if( header.getString("workCntrCd").equals("P300") ) {
            		tempData.setString("plantCd",           "06");
            	}
            	else if( header.getString("workCntrCd").equals("8000") ) {
            		tempData.setString("plantCd",           "07");
            	}
            }            

//          LData bilgCustCdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfo", tempData);
//          if(bilgCustCdData != null && !bilgCustCdData.isEmpty()){
//              salesOrd.setString("sellDeptCd", bilgCustCdData.getString("sellDeptCd"));
//              salesOrd.setString("bilgCustCd", bilgCustCdData.getString("bilgCustCd"));
//          }

            /* 주석처리. cys. 2013-12-17
            tempData.setString("clasCd",        "BILG_CUST_SCTN_CD");
            tempData.setString("comnCd",        salesOrd.getString("col02"));
            LData custBilgCustCd = dao.executeQueryForSingle("select/ma/ma01/comnCdMngt/retrieveBilgCustCd", tempData);

            LData bilgCustCdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfo", tempData);
            if(bilgCustCdData != null && !bilgCustCdData.isEmpty()){

                if(custBilgCustCd != null && !custBilgCustCd.isEmpty()){
                    salesOrd.setString("bilgCustCd", custBilgCustCd.getString("bilgCustCd"));
                }else{
                    if("ERROR".equals(bilgCustCdData.getString("bilgCustCd"))){
                        throw new LBizException("청구고객_매출부서 매핑오류");
                    }
                    salesOrd.setString("bilgCustCd", bilgCustCdData.getString("bilgCustCd"));
                }

                salesOrd.setString("sellDeptCd", bilgCustCdData.getString("sellDeptCd")); // 매출부서

            }
            */
            
            //신규 계약번호, 청구고객, 매출부서 매핑. cys 2013-12-17 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoInh(tempData);
            if( ctrtCustInfo != null ) {
            	salesOrd.setString("ctrtNo", ctrtCustInfo.getString("ctrtNo"));
            	salesOrd.setString("bilgCustCd", ctrtCustInfo.getString("bilgCustCd"));
            	salesOrd.setString("sellDeptCd", ctrtCustInfo.getString("sellDeptCd"));
            	salesOrd.setString("salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
             }                
            //--------------------------------------------------------------------------------------------------


            LMultiData dataHolder = new LMultiData();
            //CompDaoUtil.deliverLCompoundDao(header, dataHolder);
            dataHolder.add("LCompoundDao", dao);

            dataHolder.add("salesOrd"           , salesOrd);

            LMultiData ordItem1 = new LMultiData();
            LData tempItem = null;
            if(salesOrdItem1 != null && salesOrdItem1.getDataCount() > 0) {
                for(int i=0; i < salesOrdItem1.getDataCount(); i++) {
                    tempItem = salesOrdItem1.getLData(i);
                    if(tempItem.getString("salesOrdNo").equals(salesOrd.getString("salesOrdNo"))) {
                        ordItem1.addLData(tempItem);
                    }
                }
            }

//          dataHolder.add("salesOrdItem"       , salesOrdItem1);
            dataHolder.add("salesOrdItem"       , ordItem1);

            LData salesOrdPrcl       = new LData();
            Set   salesOrdPrclSet    = salesOrd.keySet();
            Iterator salesOrdPrclIte = salesOrdPrclSet.iterator();
            while(salesOrdPrclIte.hasNext()){
                String dataKey = salesOrdPrclIte.next().toString();
                if(dataKey != null && !dataKey.equals("GauceJobType")&& !dataKey.equals("updFlag")) {
                    if(dataKey.equals("salesOrdNo")) {
                        salesOrdPrcl.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
                    } else {
                        if(dataKey.substring(0,3).equals("col")) {
                            salesOrdPrcl.setString(dataKey, salesOrd.getString(dataKey));
                        }
                    }
                }
            }
            dataHolder.add("salesOrdPrcl",salesOrdPrcl);

            LMultiData itemPrcl = new LMultiData();
            LData      temp     = null;
            if(salesOrdItem1 != null && salesOrdItem1.getDataCount() > 0) {
                for(int i=0; i < salesOrdItem1.getDataCount(); i++) {
                    temp = new LData();
                    Set itemPrclSet = salesOrdItem1.getLData(i).keySet();
                    Iterator itemPrclIte = itemPrclSet.iterator();
                    while(itemPrclIte.hasNext()){
                        String dataKey = itemPrclIte.next().toString();
                        if(dataKey != null && !dataKey.equals("GauceJobType") && !dataKey.equals("updFlag")) {
                            if(dataKey.equals("salesOrdNo")) {
                                temp.setString("salesOrdNo", salesOrdItem1.getString("salesOrdNo", i));
                            } else if(dataKey.equals("lineNo")) {
                                    temp.setString("lineNo", salesOrdItem1.getString("lineNo", i));
                            } else {
                                if(dataKey.substring(0,3).equals("col")) {
                                    temp.setString(dataKey, salesOrdItem1.getString(dataKey, i));
                                }
                            }
                        }
                    }
                    if(temp.getString("salesOrdNo").equals(salesOrd.getString("salesOrdNo"))) {
                        itemPrcl.addLData(temp);
                    }
                }
            }
            dataHolder.add("salesOrdItemPrcl",itemPrcl);

            dataHolder.add("salesOrdFis"        , null);
            dataHolder.add("booking"            , null);

            LData input = new LData();
            input.setString("regrId", OmConstants.COMMON_USER);
            input.setString("mdfrId", OmConstants.COMMON_USER);
            dataHolder.add("INPUT"              , input);

            LData param = new LData();
            param.setString("domMdfProcYn", "N");
            param.setString("mdfDlyProcYn", "N");

            updateSalesOrd(dataHolder, param);

//          제지 수출오더인 경우 혼적된 경우를 고려하여 위에서 salesOrdNo단위로 추출한 데이터(tempItemList)로 updateSalesOrd를 더 호출해 준다.
            if(ifId.equals("IF_HPP_OM_ExportOrder")) {
                LData tmpItem               = null;
                LData consolSO              = null;
                LData consolSOPrcl          = null;
                LMultiData consolSOItem     = null;
                LMultiData consolSOItemPrcl = null;

                LLog.debug.println("********* IF_HPP_OM_ExportOrder******: updateSalesOrdAuto start ***\n");

                if(tempItemList != null && tempItemList.getDataCount() > 0) {
                    for(int i=0; i < tempItemList.getDataCount(); i++) {
                        tmpItem = tempItemList.getLData(i);
                        consolSO     = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdHeaderAll", tmpItem);
                        consolSOPrcl = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdPrclList", tmpItem);

                        consolSOItem = new LMultiData();
                        if(salesOrdItem1 != null && salesOrdItem1.getDataCount() > 0) {
                            for(int j=0; j < salesOrdItem1.getDataCount(); j++) {
                                if(salesOrdItem1.getString("salesOrdNo", j).equals(tmpItem.getString("salesOrdNo"))) {
                                    consolSOItem.addLData(salesOrdItem1.getLData(j));

                                    //해당 아이템의 오더검증여부가 'N'이라면 header의 오더검증여부도 'N'으로 설정
                                    if(salesOrdItem1.getString("ordVerifyYn", j).equals("N")) {
                                        consolSO.setString("ordVerifyYn", "N");
                                    }
                                }
                            }
                        }
                        //추출된 아이템으로 부터 아이템특이항목을 추출한다.
                        consolSOItemPrcl = new LMultiData();
                        temp     = null;
                        if(consolSOItem != null && consolSOItem.getDataCount() > 0) {
                            for(int x=0; x < consolSOItem.getDataCount(); x++) {
                                temp = new LData();
                                Set itemPrclSet = consolSOItem.getLData(x).keySet();
                                Iterator itemPrclIte = itemPrclSet.iterator();
                                while(itemPrclIte.hasNext()){
                                    String dataKey = itemPrclIte.next().toString();
                                    if(dataKey != null && !dataKey.equals("GauceJobType") && !dataKey.equals("updFlag")) {
                                        if(dataKey.equals("salesOrdNo")) {
                                            temp.setString("salesOrdNo", consolSOItem.getString("salesOrdNo", x));
                                        } else if(dataKey.equals("lineNo")) {
                                                temp.setString("lineNo", consolSOItem.getString("lineNo", x));
                                        } else {
                                            if(dataKey.substring(0,3).equals("col")) {
                                                temp.setString(dataKey, consolSOItem.getString(dataKey, x));
                                            }
                                        }
                                    }
                                }
                                consolSOItemPrcl.addLData(temp);
                            }
                        }

                        dataHolder = new LMultiData();
                        //CompDaoUtil.deliverLCompoundDao(header, dataHolder);
                        dataHolder.add("LCompoundDao", dao);

                        dataHolder.add("salesOrd"           , consolSO);
                        dataHolder.add("salesOrdItem"       , consolSOItem);
                        dataHolder.add("salesOrdPrcl"       , consolSOPrcl);
                        dataHolder.add("salesOrdItemPrcl"   , consolSOItemPrcl);
                        dataHolder.add("salesOrdFis"        , null);
                        dataHolder.add("booking"            , null);

                        input = new LData();
                        input.setString("regrId", OmConstants.COMMON_USER);
                        input.setString("mdfrId", OmConstants.COMMON_USER);
                        dataHolder.add("INPUT"              , input);

                        param = new LData();
                        param.setString("domMdfProcYn", "N");
                        param.setString("mdfDlyProcYn", "N");

                        updateSalesOrd(dataHolder, param);
                        LLog.debug.println("********* IF_HPP_OM_ExportOrder******: updateSalesOrdAuto end ***\n");

                    }
                }
            }
            retVal.setString("salesOrdNo"   , salesOrd.getString("salesOrdNo"));
            retVal.setString("backOrdYn"    , salesOrd.getString("backOrdYn"));

            return retVal;

        } catch (LBizException be) {
            header.setString("errCd"    , "");
            header.setString("errConts" , be.getMessage());
            laf.application.dao.LCommonDao dao3 = new laf.application.dao.LCommonDao();
            dao3.executeProcedure("cud/om/tb_om02001/callHistoryPrc", header);

            throw be;
        } catch (Exception se) {
            header.setString("errCd"    , "");
            header.setString("errConts" , se.getMessage());
            laf.application.dao.LCommonDao dao3 = new laf.application.dao.LCommonDao();
            dao3.executeProcedure("cud/om/tb_om02001/callHistoryPrc", header);
            LLog.err.println(  this.getClass().getName() + "." + "updateSalesOrdAuto()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }
//    public LData updateSalesOrdAuto(LData header, LMultiData item) throws LException {
//
//        LData retVal = new LData();
//        retVal.setString("result"  , "S");
//        retVal.setString("message"     , "");
//        retVal.setString("salesOrdNo", "");
//
//        LData        salesOrd     = null;
//        LMultiData salesOrdItem = null;
//
//      try{
//
//          laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(header);
//
//          String ifId = header.getString("ifId");
//          if(ifId.equals("IF_HPP_OM_ImportBL") || ifId.equals("IF_HHP_OM_ImportBL") || ifId.equals("IF_NSK_OM_ImportOrder"))
//          {
//              LData ordData   = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpBlSalesOrdNo", header);
//              if(ordData == null || ordData.getString("salesOrdNo") == null || "".equals(ordData.getString("salesOrdNo"))) {
//                  return retVal;
//              } else {
//                  retVal.setString("result"   , "E");
//                  retVal.setString("message"  , "이미 BL확정됨 : " + ordData.getString("salesOrdNo"));
//                  throw new LBizException("이미 BL확정됨 : " + ordData.getString("salesOrdNo"));
//              }
//          }
//
//          /* 판매오더매핑조회 call( 고객오더헤더정보, 고객오더아이템리스트)
//           * return : 판매오더헤더정보, 판매오더아이템리스트
//           * */
//          ICustCdMpng pbc     = (ICustCdMpng) PbcUtil.getPbc(ICustCdMpng.class);
//          LMultiData result   = pbc.retrieveSalesOrdMpng(header, item);
//
//          salesOrd            = (LData)result.getLData("so",          0);
//          salesOrdItem        = (LMultiData)result.get("soMulti",     0);
//
//          /* 2. 공통 필수항목 체크
//             헤더: 오더유형코드(checker), 고객오더번호, 계약고객코드(checker,파트너)
//             아이템: 고객오더라인번호, 고객코드(대표고객코드), 아이템코드(checker), 오더량(수량/중량/CBM 중 하나라도 값이 있어야 함)
//             -> 공통 필수항목이 없으면 오류 발생*/
//          LData tempData          = new LData();
//          IChecker ordTypeChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 8);
//          tempData.setString("ordTypeCd"  , salesOrd.getString("ordTypeCd"));
//
//          if(!ordTypeChecker.isExist(tempData)) {
//              retVal.setString("result"   , "E");
//              retVal.setString("message"  , "존재하지 않는 오더유형코드:" + salesOrd.getString("ordTypeCd"));
//              //return retVal;
//              throw new LBizException("존재하지 않는 오더유형코드:" + salesOrd.getString("ordTypeCd"));
//          }
//
//          if(salesOrd.getString("custOrdNo") == null || salesOrd.getString("custOrdNo").equals("")){
//              retVal.setString("result"   , "E");
//              retVal.setString("message"  , "고객오더번호 누락");
//              throw new LBizException("고객오더번호 누락");
//          }
//
//          IChecker ptnCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 3);
//          tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));
//
//          if(!ptnCdChecker.isExist(tempData)) {
//              retVal.setString("result"   , "E");
//              retVal.setString("message"  , "존재하지 않는 계약고객코드:" + salesOrd.getString("ctrtCustCd"));
//              throw new LBizException("존재하지 않는 계약고객코드:" + salesOrd.getString("ctrtCustCd"));
//          }
//
//          if(salesOrd.getString("custOfCustCd") != null && !"".equals(salesOrd.getString("custOfCustCd"))){
//              LData custOfcustCdChkParam = new LData();
//              laf.application.dao.LCompoundDao custOfcustCdChkDao = new laf.application.dao.LCompoundDao();
//              custOfcustCdChkParam.setString("ptnCd"     , salesOrd.getString("rptCustCd"));
//              custOfcustCdChkParam.setString("custPtnCd", salesOrd.getString("custOfCustCd"));
//              LData ptnCd = custOfcustCdChkDao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveChkCustPtnExistYn", custOfcustCdChkParam);
//
//              if(ptnCd == null || ptnCd.getString("ptnCd") == null || ptnCd.getString("ptnCd").equals("")){
//                  retVal.setString("result", "E");
//                  retVal.setString("message", "존재하지 않는 고객거래선코드:" + salesOrd.getString("custOfCustCd"));
//                  throw new LBizException("존재하지 않는 고객거래선코드:"+salesOrd.getString("custOfCustCd"));
//              }
//          }
//
//          IChecker itemCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 5);
//
//          for(int i = 0; i < salesOrdItem.getDataCount(); i++){
//              if(salesOrdItem.getString("custOrdLineNo", i) == null || salesOrdItem.getString("custOrdLineNo", i).equals("")){
//                  retVal.setString("result"   , "E");
//                  retVal.setString("message"  , "고객오더라인번호 누락");
//                  throw new LBizException("고객오더라인번호 누락");
//              }
//
//              tempData.setString("ptnCd"  , salesOrdItem.getString("custCd",i));
//              tempData.setString("itemCd" , salesOrdItem.getString("itemCd",i));
//              if(!itemCdChecker.isExist(tempData)) {
//                  retVal.setString("result"   , "E");
//                  retVal.setString("message"  , "존재하지 않는 아이템코드:" + salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
//                  throw new LBizException("존재하지 않는 아이템코드:" + salesOrdItem.getString("custCd",i) + " " + salesOrdItem.getString("itemCd",i));
//              }
//          }
//
//          /* 3. 오더유형 속성 조회
//             수출입내수구분, 물류서비스구분, 가용재고확인여부(계약고객속성도 고려해서 함께 조회함),
//             긴급관리여부
//           수출입내수구분 ->값세팅
//          */
//          LData ordTypeData             = dao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", salesOrd);
//          tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));
//          LData ptnMasterData           = dao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnInfoDtlSalesOrd", tempData);
//          String availStockConfYn       = ordTypeData.getString("availStockConfYn"); //가용재고확인여부
//          String masterAvailStockConfYn = ptnMasterData.getString("availStockConfYn") == null ? "N" : ptnMasterData.getString("availStockConfYn");//가용재고확인여부 파트너마스터
//          String logisSvcSctnCd         = ordTypeData.getString("logisSvcSctnCd");//물류서비스구분
//          String expImpDomSctnCd        = ordTypeData.getString("expImpDomSctnCd");//수출입내수구분
//          String exprMngtYn             = ordTypeData.getString("exprMngtYn");//긴급관리여부
//          salesOrd.setString("expImpDomSctnCd", expImpDomSctnCd);
//          String logisArCd              = ordTypeData.getString("logisArCd"); //물류지역구분
//
//          /* 4. 작업정보관리유형코드 결정
//             인터페이스ID 별로 결정됨
//
//             IF_HPP_ImportBL, IF_HHP_ImportBL, IF_LAF_Sales_Order, IF_LAF_Purcharse_Order
//             --> 헤더별 '01'
//
//             IF_HPP_SalesOrder, IF_HPP_PO, IF_HPP_TransferOrder, IF_HPP_STOReq,
//             IF_HPP_ExportOrder,IF_HHP_SalesOrder, IF_HHP_PO
//             --> 아이템별 '02'
//
//             기타 case --> '01'
//          */
//          if(ifId.equals("IF_HPP_OM_SalesOrder")
//                  || ifId.equals("IF_HPP_OM_POChange")
//                  || ifId.equals("IF_HPP_OM_PO")
//                  || ifId.equals("IF_HPP_OM_TransferOrder")
//                  || ifId.equals("IF_HPP_OM_STOReq")
//                  || ifId.equals("IF_HPP_OM_ExportOrder")
//                  || ifId.equals("IF_HHP_OM_SalesOrder")
//                  || ifId.equals("IF_HHP_OM_TransferOrder")
//                  || ifId.equals("IF_HHP_OM_POChange")
//                  || ifId.equals("IF_HHP_OM_PO")){
//                  salesOrd.setString("workInfoMngtTypeCd","02");
//          }else salesOrd.setString("workInfoMngtTypeCd","01");
//
//          /* 5.물류서비스구분별 필수항목 체크 및 validation
//             출발지, 도착지코드, 작업장코드를 마스터에서 조회.
//             마스터에 없는 코드이면 오류
//
//             case : 입고 01
//               필수: 도착지코드, 납기요청일자
//               도착지 종류가 '센터'가 아니면 오류
//
//             case : 운송 03
//               필수: 출발지코드, 도착지코드, 납기요청일자
//
//             case : 운송입고 05
//               필수: 출발지코드, 도착지코드, 납기요청일자
//               도착지 종류가 '센터'가 아니면 오류
//
//             case : 출고 02
//               필수: 출발지코드, 납기요청일자
//               출발지 종류가 '센터'가 아니면 오류
//
//             case : 출고운송 04
//               필수: 출발지코드, 도착지코드, 납기요청일자
//               출발지 종류가 '센터'가 아니면 오류
//
//             case : 출고운송입고 06
//               필수: 출발지코드, 도착지코드, 납기요청일자
//               출발지,도착지 종류가 '센터'가 아니면 오류
//
//             case : 항만하역 07
//               필수: 작업장코드, 선박명, 항차
//
//             case : 항만하역입고 08
//               필수: 작업장코드, 도착지코드, 선박명, 항차
//               도착지 종류가 '센터'가 아니면 오류
//
//             case : 운송항만하역 13
//               필수: 출발지코드, 도착지코드, 납기요청일자, 작업장코드, 선박명, 항차
//
//             case : 출고운송항만하역 14
//               필수: 출발지코드, 도착지코드, 납기요청일자, 작업장코드, 선박명, 항차
//               출발지 종류가 '센터'가 아니면 오류
//
//             case : 항만하역입고출고운송 09
//               필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
//               출발지 종류가 '센터'가 아니면 오류
//
//             case : 항만하역입고출고운송입고 10
//               필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
//               출발지,도착지 종류가 '센터'가 아니면 오류
//
//             case : 항만하역운송 11
//               필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
//
//             case : 항만하역운송입고 12
//               필수: 작업장코드, 선박명, 항차, 출발지코드, 도착지코드, 납기요청일자
//               도착지 종류가 '센터'가 아니면 오류
//
//             case : 포워딩 15
//               필수: 해상항공구분코드
//
//             case : 포워딩운송 20
//               필수: 해상항공구분코드, 출발지코드, 도착지코드, 납기요청일자
//
//             case : 포워딩운송입고 21
//               필수: 해상항공구분코드, 출발지코드, 도착지코드, 납기요청일자
//               도착지 종류가 '센터'가 아니면 오류
//
//             case : 운송포워딩 16
//               필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
//
//             case : 출고운송포워딩 17
//               필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
//               출발지 종류가 '센터'가 아니면 오류
//
//             case : 운송포워딩입고 18
//               필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
//               도착지 종류가 '센터'가 아니면 오류
//
//             case : 출고운송포워딩입고 19
//               필수: 출발지코드, 도착지코드, 납기요청일자, 해상항공구분코드
//               출발지,도착지 종류가 '센터'가 아니면 오류
//           */
//
//          String workPlCd = salesOrd.getString("workPlCd"); //작업장코드
//          if(workPlCd != null && !workPlCd.equals("")){
//              IChecker workPlCdChecker = (IChecker)PbcUtil.getPbc(IChecker.class, 7);
//              tempData.setString("corpCd"     , salesOrd.getString("corpCd"));
//              tempData.setString("workPlCd"   , workPlCd);
//              if(!workPlCdChecker.isExist(tempData)) {
//                  workPlCd = "";
//              }
//          }
//
//          String shipNm               = salesOrd.getString("shipNm"           )== null ? "" : salesOrd.getString("shipNm");//선박명
//          String portCnt              = salesOrd.getString("portCnt"          )== null ? "" : salesOrd.getString("portCnt");//항차
//          String oceanAirSctnCd       = salesOrd.getString("oceanAirSctnCd"   )== null ? "" : salesOrd.getString("oceanAirSctnCd");//해상항공구분코드
//          String dptArKind            = ""; //출발지 종류
//          String arvArKind            = ""; //도착지종류
//          String dptArDept            = ""; //출발지 부서
//          String arvArDept            = ""; //도착지 부서
//          String dptArCd              = ""; //출발지코드
//          String arvArCd              = ""; //도착지코드
//          String aptdReqYmd           = ""; //납기요청일자
//          String arvWmYn              = "N";
//          String dptWmYn              = "N";
//          LData dptArCdData           = null;
//          LData arvArCdData           = null;
//          String workInfoMngtTypeCd   = salesOrd.getString("workInfoMngtTypeCd");
//          String custOrdLineNo        = "";
//
//          LMultiData loopData = new LMultiData();
//          if(workInfoMngtTypeCd.equals("01")){
//              loopData.addLData(salesOrd);
//              for(int i = 0;i<salesOrdItem.getDataCount();i++){
//                  custOrdLineNo = ":라인" +salesOrdItem.getString("custOrdLineNo", i);
//                  dptArCd = salesOrdItem.getString("dptArCd",i) == null ? "" : salesOrdItem.getString("dptArCd",i); //출발지코드
//                  arvArCd = salesOrdItem.getString("arvArCd",i) == null ? "" : salesOrdItem.getString("arvArCd",i); //도착지코드
//                  aptdReqYmd = salesOrdItem.getString("aptdReqYmd",i) == null ? "" : salesOrdItem.getString("aptdReqYmd",i); //납기요청일자
//                  tempData.setString("code", dptArCd);
//                  tempData.setString("workSctnCd", salesOrdItem.getString("dptArTypeCd",i));
//                  tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                  dptArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
//                  tempData.setString("code", arvArCd);
//                  tempData.setString("workSctnCd", salesOrdItem.getString("arvArTypeCd",i));
//                  tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                  arvArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
//
//
//                  if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
//                      dptArKind = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
//                      dptArCd = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
//                      dptArDept = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
//                      dptWmYn = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");
//                  }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {
//                      retVal.setString("message", "존재하지않는출발지코드" + dptArCd+":"+custOrdLineNo);
//                      throw new LBizException("존재하지않는출발지코드"+ dptArCd+":"+custOrdLineNo);
//                  }
//                  if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
//                      arvArKind = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
//                      arvArCd = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
//                      arvArDept = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
//                      arvWmYn = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");
//                  }else{
//                      retVal.setString("message", "존재하지않는도착지코드" + arvArCd+":"+custOrdLineNo);
//                      throw new LBizException("존재하지않는도착지코드"+ arvArCd+":"+custOrdLineNo);
//                  }
//
//                  if(salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
//                          || salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//                      if(salesOrdItem.getString("arvArZipCd",i).equals("")
//                      && salesOrdItem.getString("arvArZipAddr",i).equals("")
//                      && salesOrdItem.getString("arvArDtlAddr",i).equals("") ){
//                              salesOrdItem.modifyString("arvArZipCd", i, arvArCdData.getString("centerZipCd"));
//                              salesOrdItem.modifyString("arvArZipAddr", i, arvArCdData.getString("centerZipAddr"));
//                              salesOrdItem.modifyString("arvArDtlAddr", i, arvArCdData.getString("centerDtlAddr"));
//                      }
//                  }
//                  if(salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
//                          || salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//
//                      if(salesOrdItem.getString("dptArZipCd",i).equals("")
//                      && salesOrdItem.getString("dptArZipAddr",i).equals("")
//                      && salesOrdItem.getString("dptArDtlAddr",i).equals("") ){
//                              salesOrdItem.modifyString("dptArZipCd", i, dptArCdData.getString("centerZipCd"));
//                              salesOrdItem.modifyString("dptArZipAddr", i, dptArCdData.getString("centerZipAddr"));
//                              salesOrdItem.modifyString("dptArDtlAddr", i, dptArCdData.getString("centerDtlAddr"));
//
//                      }
//                  }
//
//              }
//
//
//          }else{
//              for(int i = 0;i<salesOrdItem.getDataCount();i++){
//                  loopData.addLData(salesOrdItem.getLData(i));
//              }
//
//                  dptArCd = salesOrd.getString("dptArCd") == null ? "" : salesOrd.getString("dptArCd"); //출발지코드
//                  arvArCd = salesOrd.getString("arvArCd") == null ? "" : salesOrd.getString("arvArCd"); //도착지코드
//                  aptdReqYmd = salesOrd.getString("aptdReqYmd") == null ? "" : salesOrd.getString("aptdReqYmd"); //납기요청일자
//                  tempData.setString("code", dptArCd);
//                  tempData.setString("workSctnCd", salesOrd.getString("dptArTypeCd"));
//                  tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                  dptArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
//                  tempData.setString("code", arvArCd);
//                  tempData.setString("workSctnCd", salesOrd.getString("arvArTypeCd"));
//                  tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                  arvArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
//
//
//                  if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
//                      dptArKind = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
//                      dptArCd = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
//                      dptArDept = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
//                      dptWmYn = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");
//                  }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {
//                      retVal.setString("message", "존재하지않는출발지코드" + dptArCd);
//                      throw new LBizException("존재하지않는출발지코드"+ dptArCd);
//                  }
//
//                  if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
//                      arvArKind = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
//                      arvArCd = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
//                      arvArDept = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
//                      arvWmYn = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");
//                  }else{
//                      retVal.setString("message", "존재하지않는도착지코드" + arvArCd);
//                      throw new LBizException("존재하지않는도착지코드"+ arvArCd);
//                  }
//
//                  if(salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CENTER)
//                          || salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//                      if(salesOrd.getString("arvArZipCd").equals("")
//                      && salesOrd.getString("arvArZipAddr").equals("")
//                      && salesOrd.getString("arvArDtlAddr").equals("") ){
//                          salesOrd.setString("arvArZipCd", arvArCdData.getString("centerZipCd"));
//                          salesOrd.setString("arvArZipAddr", arvArCdData.getString("centerZipAddr"));
//                          salesOrd.setString("arvArDtlAddr", arvArCdData.getString("centerDtlAddr"));
//                      }
//                  }
//                  if(salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CENTER)
//                          || salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//
//                      if(salesOrd.getString("dptArZipCd").equals("")
//                      && salesOrd.getString("dptArZipAddr").equals("")
//                      && salesOrd.getString("dptArDtlAddr").equals("") ){
//                          salesOrd.setString("dptArZipCd", dptArCdData.getString("centerZipCd"));
//                          salesOrd.setString("dptArZipAddr", dptArCdData.getString("centerZipAddr"));
//                          salesOrd.setString("dptArDtlAddr", dptArCdData.getString("centerDtlAddr"));
//
//                      }
//                  }
//
//          }
//
//          //출도착지 담당자 셋팅
//          if(salesOrd.getString("dptArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//              if(salesOrd.getString("dptArOfcrNm").equals("")){
//                  tempData.setString("custPtnCd", salesOrd.getString("dptArCd"));
//                  tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                  LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
//                  if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
//                      salesOrd.setString("dptArOfcrNm", ofcrData.getString("ordOfcrNm"));
//                      salesOrd.setString("dptArOfcrTelNo", ofcrData.getString("ofcrTelNo"));
//                  }
//              }
//          }
//          if(salesOrd.getString("arvArTypeCd").equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//              if(salesOrd.getString("arvArOfcrNm").equals("")){
//                  tempData.setString("custPtnCd", salesOrd.getString("arvArCd"));
//                  tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                  LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
//                  if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
//                      salesOrd.setString("arvArOfcrNm", ofcrData.getString("ordOfcrNm"));
//                      salesOrd.setString("arvArOfcrTelNo", ofcrData.getString("ofcrTelNo"));
//                  }
//              }
//          }
//          for(int i = 0;i<salesOrdItem.getDataCount();i++){
//              if(salesOrdItem.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//                  if(salesOrdItem.getString("dptArOfcrNm",i).equals("")){
//                      tempData.setString("custPtnCd", salesOrdItem.getString("dptArCd",i));
//                      tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                      LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
//                      if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
//                          salesOrdItem.modifyString("dptArOfcrNm", i, ofcrData.getString("ordOfcrNm"));
//                          salesOrdItem.modifyString("dptArOfcrTelNo", i, ofcrData.getString("ofcrTelNo"));
//                      }
//                  }
//              }
//              if(salesOrdItem.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//                  if(salesOrdItem.getString("arvArOfcrNm",i).equals("")){
//                      tempData.setString("custPtnCd", salesOrdItem.getString("arvArCd",i));
//                      tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                      LData ofcrData = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", tempData);
//                      if(!ofcrData.equals("") && ofcrData != null && !ofcrData.isEmpty()){
//                          salesOrdItem.modifyString("arvArOfcrNm", i, ofcrData.getString("ordOfcrNm"));
//                          salesOrdItem.modifyString("arvArOfcrTelNo", i, ofcrData.getString("ofcrTelNo"));
//                      }
//                  }
//              }
//          }
//
//          for(int i = 0;i<loopData.getDataCount();i++){
//              if(workInfoMngtTypeCd.equals("01")){
//
//              }else{
//                  custOrdLineNo = ":라인" +loopData.getString("custOrdLineNo", i);
//              }
//
//              dptArCd = loopData.getString("dptArCd",i) == null ? "" : loopData.getString("dptArCd",i); //출발지코드
//              arvArCd = loopData.getString("arvArCd",i) == null ? "" : loopData.getString("arvArCd",i); //도착지코드
//              aptdReqYmd = loopData.getString("aptdReqYmd",i) == null ? "" : loopData.getString("aptdReqYmd",i); //납기요청일자
//              tempData.setString("code", dptArCd);
//              tempData.setString("workSctnCd", loopData.getString("dptArTypeCd",i));
//              tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//              dptArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
//              tempData.setString("code", arvArCd);
//              tempData.setString("workSctnCd", loopData.getString("arvArTypeCd",i));
//              tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//              arvArCdData = dao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveVwMa0101", tempData);
//
//
//              if(!dptArCd.equals("") && dptArCdData != null && !dptArCdData.isEmpty()){
//                  dptArKind = dptArCdData.getString("workPlSctnCd")== null ? "" : dptArCdData.getString("workPlSctnCd");
//                  dptArCd = dptArCdData.getString("code")== null ? "" : dptArCdData.getString("code");
//                  dptArDept = dptArCdData.getString("deptCd")== null ? "" : dptArCdData.getString("deptCd");
//                  dptWmYn = dptArCdData.getString("wmYn")== null ? "N" : dptArCdData.getString("wmYn");
//              }else if(!dptArCd.equals("") && dptArCdData != null && dptArCdData.isEmpty()) {
//                  retVal.setString("message", "존재하지않는출발지코드" + dptArCd);
//                  throw new LBizException("존재하지않는출발지코드"+ dptArCd);
//              }
//
//              if(!arvArCd.equals("") &&  arvArCdData != null && !arvArCdData.isEmpty()){
//                  arvArKind = arvArCdData.getString("workPlSctnCd")== null ? "" : arvArCdData.getString("workPlSctnCd");
//                  arvArCd = arvArCdData.getString("code")== null ? "" : arvArCdData.getString("code");
//                  arvArDept = arvArCdData.getString("deptCd")== null ? "" : arvArCdData.getString("deptCd");
//                  arvWmYn = arvArCdData.getString("wmYn")== null ? "N" : arvArCdData.getString("wmYn");
//              }else{
//                  retVal.setString("message", "존재하지않는도착지코드" + arvArCd);
//                  throw new LBizException("존재하지않는도착지코드"+ arvArCd);
//              }
//
//              if(loopData.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
//                      || loopData.getString("arvArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//                  if(loopData.getString("arvArZipCd",i).equals("")
//                  && loopData.getString("arvArZipAddr",i).equals("")
//                  && loopData.getString("arvArDtlAddr",i).equals("") ){
//                      if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
//                          salesOrd.setString("arvArZipCd", arvArCdData.getString("centerZipCd"));
//                          salesOrd.setString("arvArZipAddr", arvArCdData.getString("centerZipAddr"));
//                          salesOrd.setString("arvArDtlAddr", arvArCdData.getString("centerDtlAddr"));
//                      }else{
//                          salesOrdItem.modifyString("arvArZipCd", i, arvArCdData.getString("centerZipCd"));
//                          salesOrdItem.modifyString("arvArZipAddr", i, arvArCdData.getString("centerZipAddr"));
//                          salesOrdItem.modifyString("arvArDtlAddr", i, arvArCdData.getString("centerDtlAddr"));
//                      }
//                  }
//              }
//              if(loopData.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CENTER)
//                      || loopData.getString("dptArTypeCd",i).equals(OmConstants.AR_TYPE_CD_CUST_PTN)){
//
//                  if(loopData.getString("dptArZipCd",i).equals("")
//                  && loopData.getString("dptArZipAddr",i).equals("")
//                  && loopData.getString("dptArDtlAddr",i).equals("") ){
//                      if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
//                          salesOrd.setString("dptArZipCd", dptArCdData.getString("centerZipCd"));
//                          salesOrd.setString("dptArZipAddr", dptArCdData.getString("centerZipAddr"));
//                          salesOrd.setString("dptArDtlAddr", dptArCdData.getString("centerDtlAddr"));
//                      }else{
//                          salesOrdItem.modifyString("dptArZipCd", i, dptArCdData.getString("centerZipCd"));
//                          salesOrdItem.modifyString("dptArZipAddr", i, dptArCdData.getString("centerZipAddr"));
//                          salesOrdItem.modifyString("dptArDtlAddr", i, dptArCdData.getString("centerDtlAddr"));
//                      }
//
//                  }
//              }
//
//              switch(Integer.parseInt(logisSvcSctnCd)){
//
//                  case 1:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락" + custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 3:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 5:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 2:
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 4:
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 6:
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 7:
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//
//                  break;
//
//                  case 8:
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 13:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 14:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                      break;
//
//                  case 9:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 10:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 11:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 12:
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(shipNm.equals("")){
//                          retVal.setString("message", "필수항목체크오류:선박명누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:선박명누락"+ custOrdLineNo);
//                      }
//                      if(portCnt.equals("")){
//                          retVal.setString("message", "필수항목체크오류:항차누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:항차누락"+ custOrdLineNo);
//                      }
//                      if(workPlCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:작업장코드누락"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                      break;
//
//                  case 15:
//                      if(oceanAirSctnCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 20:
//                      if(oceanAirSctnCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      break;
//
//                  case 21:
//                      if(oceanAirSctnCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 16:
//                      if(oceanAirSctnCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 17:
//                      if(oceanAirSctnCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  case 18:
//                      if(oceanAirSctnCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                      break;
//
//                  case 19:
//                      if(oceanAirSctnCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:해상항공구분코드누락"+ custOrdLineNo);
//                      }
//                      if(arvArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지코드누락"+ custOrdLineNo);
//                      }
//                      if(dptArCd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지코드누락"+ custOrdLineNo);
//                      }
//                      if(aptdReqYmd.equals("")){
//                          retVal.setString("message", "필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:납기요청일자누락"+ custOrdLineNo);
//                      }
//                      if(!arvWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:도착지종류센터아님"+ custOrdLineNo);
//                      }
//                      if(!dptWmYn.equals("Y")){
//                          retVal.setString("message", "필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                          throw new LBizException("필수항목체크오류:출발지종류센터아님"+ custOrdLineNo);
//                      }
//                  break;
//
//                  default:
//                  break;
//              }
//          }
//
//          /*
//          6. 고객오더번호로 판매오더정보를 조회한다.
//              다음 항목을 조회한 데이터로 매핑된 데이타를 채운다.
//              4.1 매핑된 판매오더
//                    판매오더번호
//                    법인번호
//                    오더관리실행부서코드
//                    오더관리포워딩부서코드
//                    오더관리실행담당자ID
//                    오더관리포워딩담당자ID
//                    계약번호
//                    오더요청고객코드
//                    청구고객코드
//                    매출부서코드
//                    영업담당자ID
//               4.2 매핑된 판매오더아이템
//                    판매오더번호
//           */
//
//          LData      order = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdFromCustOrdNo", salesOrd);
//          LMultiData salesOrdItem1 = new LMultiData();
//          if(order != null) {
//              salesOrd.setString("salesOrdNo"         , order.getString("salesOrdNo"));
//              salesOrd.setString("corpCd"             , order.getString("corpCd"));
//              salesOrd.setString("ordMngtExceDeptCd"  , order.getString("ordMngtExceDeptCd"));
//              salesOrd.setString("ordMngtFwdDeptCd"   , order.getString("ordMngtFwdDeptCd"));
//              salesOrd.setString("ordMngtExceOfcrId"  , order.getString("ordMngtExceOfcrId"));
//              salesOrd.setString("ordMngtFwdOfcrId"   , order.getString("ordMngtFwdOfcrId"));
//              salesOrd.setString("ctrtNo"             , order.getString("ctrtNo"));
//              salesOrd.setString("ordReqCustCd"       , order.getString("ordReqCustCd"));
//              salesOrd.setString("bilgCustCd"         , order.getString("bilgCustCd"));
//              salesOrd.setString("sellDeptCd"         , order.getString("sellDeptCd"));
//              salesOrd.setString("salesOfcrId"        , order.getString("salesOfcrId"));
//
//              LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveMaxLineNo", order);
//              int lineNo  = lData.getInt("lineNo");
//              for(int i = 0; i < salesOrdItem.getDataCount();i++){
//                  LData ordItem = salesOrdItem.getLData(i);
//                  ordItem.setString("salesOrdNo", order.getString("salesOrdNo"));
//                  LData itemLData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdItemFromCustOrd", ordItem);
//                  if(itemLData == null || itemLData.getString("lineNo") == null || "".equals(itemLData.getString("lineNo"))) {
//                      lineNo = lineNo+10;
//                      ordItem.setString("lineNo"      , lineNo+"");
//                      ordItem.setString("addYn"       , "Y");
//                  } else {
//                      ordItem.setString("lineNo"      , itemLData.getString("lineNo"));
//                      ordItem.setString("addYn"       , "N");
//                  }
//                  salesOrdItem1.addLData(ordItem);
//              }
//          }
//
//          /* 7. 계약번호 및 관련 정보 조회
//             고객오더유형별계약조회 오퍼레이션 사용
//             계약번호, 매출부서코드, 영업사원ID, 청구고객코드를 세팅함. 오더담당부서코드도 받음.
//
//             리턴값의 건수가 1건 이상인 경우에는
//             계약번호, 매출부서코드, 영업사원ID, 청구고객코드를 세팅하지 않고 다음으로 넘어간다.
//
//             리턴값의 건수가 0건인 경우에는
//             오류 발생
//           */
//          LMultiData ctrtTmp      = retrieveCustOrdTypeEachCtrt(salesOrd);
//          LMultiData ctrtData     = (LMultiData)ctrtTmp.get("OBJECT_TO_GDRs",0);
//
//          String ordChrgDeptCd = ""; //오더담당부서코드
//
//          if(ctrtData.getDataCount()==1){
//              salesOrd.setString("ctrtNo", ctrtData.getLData(0).getString("code"));
//              salesOrd.setString("sellDeptCd", ctrtData.getLData(0).getString("sellDeptCd"));
//              salesOrd.setString("salesOfcrId", ctrtData.getLData(0).getString("salesOfcrId"));
//              salesOrd.setString("bilgCustCd", ctrtData.getLData(0).getString("bilgCd"));
//              ordChrgDeptCd = ctrtData.getLData(0).getString("ordChrgDeptCd");
//          }else if(ctrtData.getDataCount() > 1){}
//          else{
//              retVal.setString("result", "E");
//              retVal.setString("message", "고객오더유형별계약조회오류");
//              throw new LBizException("고객오더유형별계약조회오류");
//          }
//
//
//          /* 9. 오더관리실행부서세팅
//             if 출발지 작업장 유형이 센터인 경우 -> 출발지 작업장에 매핑된 부서
//             else
//                if 도착지 작업장 유형이 센터인 경우 -> 도착지 작업장에 매핑된 부서
//                else
//                   계약서에 정의된 오더 부서
//                end if
//             end if
//             부서가 없으면 오류
//           */
//
//          LData OrdMngtExceDeptCdData = setOrdMngtExceDeptCd(salesOrd);
//          salesOrd.setString("ordMngtExceDeptCd", OrdMngtExceDeptCdData.getString("ordMngtExceDeptCd"));
//          salesOrd.setString("tranPlanCntrCd"   , OrdMngtExceDeptCdData.getString("tranPlanCntrCd"));
//          if(OrdMngtExceDeptCdData.getString("result").equals("E") || salesOrd.getString("ordMngtExceDeptCd")==null || salesOrd.getString("ordMngtExceDeptCd").equals("")){
//              retVal.setString("result", "E");
//              retVal.setString("message", "오더관리실행부서 세팅오류:");
//              if(OrdMngtExceDeptCdData.getString("message")!=null && !OrdMngtExceDeptCdData.getString("message").equals(""))
//                  throw new LBizException(OrdMngtExceDeptCdData.getString("message"));
//              else
//                  throw new LBizException("오더관리실행부서 세팅오류:");
//          }
//
//
//
//          /* 10. 오더관리실행담당자ID 세팅(TB_OM05006)
//             계약고객코드, 오더관리실행부서코드, 수출입내수구분코드로 오더관리담당자 기준정보에서 main 담당자 조회
//             조건에 맞는 담당자가 없으면 세팅 안함.
//             조회조건: 부서코드, 대표고객코드, 수출입내수구분코드, 주요담당자여부 = 'Y'인 사람 조회
//           */
//          tempData.setString("ordChrgDeptCd", salesOrd.getString("ordMngtExceDeptCd"));
//          tempData.setString("custCd", salesOrd.getString("rptCustCd"));
//          tempData.setString("expImpDomSctnCd", salesOrd.getString("expImpDomSctnCd"));
//          LData ofcrIdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdMngtExceOfcrId", tempData);
//
//          if(ofcrIdData.getString("userId")!=null && !ofcrIdData.getString("userId").equals(""))
//              salesOrd.setString("ordMngtExceOfcrId", ofcrIdData.getString("userId"));
//
//
//          /* 14. 장기오더여부 판단 (장기오더여부 판단 대상은 출고오더만 판단)(오더유형의 물류서비스구분이 출고가 낀것.
//              작업정보관리유형이 '01'이면 헤더 납기일자로 1번만 작업함.
//              작업정보관리유형이 '02'이면 아이템별 납기일자로 아이템별로 작업함
//              납기일자가 고객오더접수일자 D+2일이상 큰 경우 장기오더여부에 'Y'로 세팅함.
//           */
//          if(logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_09)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_10)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_14)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_17)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_19)
//                  || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_28)){
//              if(salesOrd.getString("custOrdRecpDate") != null && !salesOrd.getString("custOrdRecpDate").equals("")){
//
//                  if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
//                      String custOrdRecpDate = pbf.fw.support.util.DateUtil.addDays(salesOrd.getString("custOrdRecpDate").substring(0, 8),2);
//                      if(salesOrd.getString("aptdReqYmd").compareTo(custOrdRecpDate)>=0)
//                          salesOrd.setString("ltrmOrdYn","Y");
//                  }else{
//                      for(int i = 0;i<salesOrdItem.getDataCount();i++){
//                          if(salesOrdItem.getString("aptdReqYmd",i).compareTo(pbf.fw.support.util.DateUtil.addDays(salesOrd.getString("custOrdRecpDate").substring(0, 8),2))>=0)
//                              salesOrd.setString("ltrmOrdYn","Y");
//                      }
//                  }
//              }
//          }
//          /* 15. 긴급여부판단 (긴급관리여부가 'Y' 이고 대기오더가 'Y'가 아닌 경우에만 실행함)
//             작업정보관리유형이 '01'이면 헤더 납기일자로 1번만 작업함.
//             작업정보관리유형이 '02'이면 아이템별 납기일자로 아이템별로 작업함
//
//             마감긴급여부 판단 기준:
//             납기일자가 당일인 경우에만 처리함.
//             센터별고객별 마감시간 정보(OM05004)를 읽어서 C/O 접수 일시와 비교하여 긴급 여부 세팅.
//
//             리드타임긴급여부 판단 기준:(권역테이블 MA01007)
//             납기일자가 당일인 경우에만 처리함.
//             출발지코드와 도착지 우편번호를 사용하여 권역 테이블에서 평균 리드타임 조회
//             C/O접수일시 + 리드타임을 하여 납기일시보다 커지면 긴급으로 세팅.
//           */
//          String backOrdYn = "N";
//          //if(salesOrd.getString("backOrdYn")!= null)
//          //  backOrdYn = salesOrd.getString("backOrdYn");
//          //else
//          //  salesOrd.setString("backOrdYn","N");
//          if(exprMngtYn.equals("Y") && !backOrdYn.equals("Y")){
//              if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
//                  if(salesOrd.getString("aptdReqYmd").equals(pbf.fw.support.util.DateUtil.getCurrentDateString("yyyyMMdd"))){
//
//                      tempData.setString("workCntrCd", salesOrd.getString("dptArCd"));
//                      tempData.setString("custCd", salesOrd.getString("rptCustCd"));
//                      tempData.setString("useYn", "Y");
//                      LData orderCloseBasisData   = dao.executeQueryForSingle("select/om/om05/orderCloseBasisMng/retrieveOrderCloseBasisMngList", tempData);
//
//                      if(orderCloseBasisData.getString("clsStdHms") != null &&
//                         salesOrd.getString("custOrdRecpDate").substring(8, 12).compareTo(orderCloseBasisData.getString("clsStdHms"))>0)
//                          salesOrd.setString("clsExprYn","Y"); //마감긴급
//                      salesOrd.setString("leadTimeExprYn","N");
//                      tempData.setString("workPlCd", salesOrd.getString("dptArCd"));
//                      tempData.setString("corpCd", salesOrd.getString("corpCd"));
//                      tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                      tempData.setString("ordTypeCd", salesOrd.getString("ordTypeCd"));
//                      if(salesOrd.getString("arvArZipCd")!=null && !salesOrd.getString("arvArZipCd").equals("")){
//                          tempData.setString("zipArCd", salesOrd.getString("arvArZipCd").substring(0, 3));
//
//                          LData avgOpMasterData = dao.executeQueryForSingle("select/ma/ma01/regnCdMngt/retrieveAvgOpHms", tempData);
//                          if(avgOpMasterData != null && avgOpMasterData.containsKey("avgOpHms") && !avgOpMasterData.getString("avgOpHms").equals(""))
//                              if((salesOrd.getString("custOrdRecpDate").concat(avgOpMasterData.getString("avgOpHms"))).compareTo(salesOrd.getString("aptdReqYmd")) >0)
//                                  salesOrd.setString("leadTimeExprYn","Y"); //리드타임긴급
//                      }
//
//                  }
//              }else{
//                  for(int i = 0;i<salesOrdItem.getDataCount();i++){
//                      if(salesOrdItem.getString("aptdReqYmd",i).equals(pbf.fw.support.util.DateUtil.getCurrentDateString("yyyyMMdd"))){
//
//                          tempData.setString("workCntrCd", salesOrdItem.getString("dptArCd",i));
//                          LData orderCloseBasisData   = dao.executeQueryForSingle("select/om/om05/orderCloseBasisMng/retrieveOrderCloseBasisMngList", tempData);
//                          if(orderCloseBasisData.getString("clsStdHms") != null &&
//                             salesOrd.getString("custOrdRecpDate").substring(8, 12).compareTo(orderCloseBasisData.getString("clsStdHms"))>0)
//                              salesOrdItem.modifyString("clsExprYn",i,"Y"); //마감긴급
//                          salesOrdItem.modifyString("leadTimeExprYn",i,"N");
//                          tempData.setString("workPlCd", salesOrdItem.getString("dptArCd",i));
//                          tempData.setString("corpCd", salesOrd.getString("corpCd"));
//                          tempData.setString("ptnCd", salesOrd.getString("rptCustCd"));
//                          tempData.setString("ordTypeCd", salesOrd.getString("ordTypeCd"));
//                          if(salesOrdItem.getString("arvArZipCd", i)!=null && !salesOrdItem.getString("arvArZipCd", i).equals("")){
//                              tempData.setString("zipArCd", salesOrdItem.getString("arvArZipCd",i).substring(0, 3));
//
//                              LData avgOpMasterData = dao.executeQueryForSingle("select/ma/ma01/regnCdMngt/retrieveAvgOpHms", tempData);
//                              if(avgOpMasterData != null && avgOpMasterData.containsKey("avgOpHms") && !avgOpMasterData.getString("avgOpHms").equals(""))
//                                  if((salesOrd.getString("custOrdRecpDate").concat(avgOpMasterData.getString("avgOpHms"))).compareTo(salesOrdItem.getString("aptdReqYmd",i)) >0)
//                                      salesOrdItem.modifyString("leadTimeExprYn",i,"Y"); //리드타임긴급
//                          }
//
//                      }
//                  }
//              }
//          }
//
//          /* 16. 아이템별 작업관리 유형의 헤더정보 조정 (아이템별 작업관리인 경우에만 실행)
//              아이템별 납기일시 중 가장 늦은 납기일시를 헤더에 세팅
//              아이템별로 하나라도 긴급이나 장기오더가 있으면 헤더에도 'Y'로
//           */
//          if(salesOrd.getString("workInfoMngtTypeCd").equals("02")){
//              for(int i = 0;i<salesOrdItem.getDataCount();i++){
//                  if(salesOrdItem.getString("aptdReqYmd",i).concat(salesOrdItem.getString("aptdReqHm",i)).compareTo(salesOrd.getString("aptdReqYmd").concat(salesOrd.getString("aptdReqHm")))>0)
//                      salesOrd.setString("aptdReqYmd", salesOrdItem.getString("aptdReqYmd",i));
//                      salesOrd.setString("aptdReqHm", salesOrdItem.getString("aptdReqHm",i));
//                  if(salesOrdItem.getString("leadTimeExprYn",i).equals("Y"))
//                      salesOrd.setString("leadTimeExprYn", "Y");
//                  if(salesOrdItem.getString("clsExprYn",i).equals("Y"))
//                      salesOrd.setString("clsExprYn", "Y");
//                  if(salesOrdItem.getString("ltrmOrdYn",i).equals("Y"))
//                      salesOrd.setString("ltrmOrdYn", "Y");
//              }
//          }
//
//          //movetype setting
//          LData move = new LData();
//          move.setString("dptArCd"            , salesOrd.getString("dptArCd"          ));
//          move.setString("dptArTypeCd"        , salesOrd.getString("dptArTypeCd"      ));
//          move.setString("arvArCd"            , salesOrd.getString("arvArCd"          ));
//          move.setString("arvArTypeCd"        , salesOrd.getString("arvArTypeCd"      ));
//          move.setString("expImpDomSctnCd"    , salesOrd.getString("expImpDomSctnCd"  ));
//          move.setString("custOrdTypeCd"      , salesOrd.getString("custOrdTypeCd"    ));
//          move.setString("custMoveTypeCd"     , salesOrd.getString("custMoveTypeCd"   ));
//          move.setString("ordTypeCd"          , salesOrd.getString("ordTypeCd"        ));
//          move.setString("rptCustCd"          , salesOrd.getString("rptCustCd"        ));
//          move.setString("custOfCustCd"       , salesOrd.getString("custOfCustCd"     ));
//
//          if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC) &&
//             salesOrdItem.containsKey("col04")){ //노스케인경우
//              String selfGdsCd = salesOrdItem.getString("col04", 0);
//              move.setString("selfGdsCd"          , selfGdsCd);
//          }else
//              move.setString("selfGdsCd"          , "");
//
//          String moveTypeCd = retrieveMoveType(move);
//
//          salesOrd.setString("moveTypeCd", moveTypeCd);
//
//          //수량중량 검증
//          if(!salesOrdItem1.containsKey("basisUnitCd")){
//              for(int i = 0;i<salesOrdItem1.getDataCount();i++){
//                  salesOrdItem1.addString("basisUnitCd", "EA");
//              }
//          }
//          for(int i = 0;i<salesOrdItem1.getDataCount();i++){
//              LData lData = new LData();
//              lData.setString("ptnCd" , salesOrdItem1.getString("custCd", i));
//              lData.setString("itemCd", salesOrdItem1.getString("itemCd", i));
//              LData itemMasterData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfo", lData);
//              if(itemMasterData != null && !itemMasterData.isEmpty()){
//                  salesOrdItem1.modifyString("basisUnitCd", i, itemMasterData.getString("basisUnitCd"));
//              }
//          }
//
//          //salesOrd.set("LCompoundDao", header.get("LCompoundDao"));
//          salesOrd.set("LCompoundDao", dao);
//
//          LMultiData changeData = changeQtyWgt(salesOrd, salesOrdItem1);
//          String ordVerifyYn = "Y";
//          for(int i = 0;i<changeData.getDataCount();i++){
//              if(changeData.getString("workFlag", i).equals("S")){
//                  salesOrdItem1.modify("ordQty"   , i, changeData.get("ordQty"   , i));
//                  salesOrdItem1.modify("ordCbm"   , i, changeData.get("ordCbm"   , i));
//                  salesOrdItem1.modify("qtyUnitCd", i, changeData.get("qtyUnitCd", i));
//                  salesOrdItem1.modify("ordWgt"   , i, changeData.get("ordWgt"   , i));
//                  salesOrdItem1.modify("wgtUnitCd", i, changeData.get("wgtUnitCd", i));
//
//              }else if (!salesOrdItem1.containsKey("delYn") || "N".equals(salesOrdItem1.getString("delYn", i))){
//
//                  salesOrdItem1.modify("ordVerifyYn", i, "N");
//                  ordVerifyYn = "N";
//
//              }
//          }
//          salesOrd.setString("ordVerifyYn", ordVerifyYn);
//
//
//          tempData.setString("corpCd",            salesOrd.getString("corpCd"));
//          tempData.setString("rptCustCd",         salesOrd.getString("rptCustCd"));
//          tempData.setString("expImpDomSctnCd",   salesOrd.getString("expImpDomSctnCd"));
//          tempData.setString("ordTypeCd",         salesOrd.getString("ordTypeCd"));
//          tempData.setString("dptArTypeCd",       salesOrd.getString("dptArTypeCd"));
//          tempData.setString("dptArCd",           salesOrd.getString("dptArCd"));
//          tempData.setString("arvArTypeCd",       salesOrd.getString("arvArTypeCd"));
//          tempData.setString("arvArCd",           salesOrd.getString("arvArCd"));
//          if(salesOrdItem.getDataCount() > 0)
//               tempData.setString("plantCd",      salesOrdItem.getString("plantCd",0));
//          else tempData.setString("plantCd",      "");
//          tempData.setString("moveTypeCd",        salesOrd.getString("moveTypeCd"));
//          LData bilgCustCdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBilgCustInfo", tempData);
//          if(bilgCustCdData != null && !bilgCustCdData.isEmpty()){
//              salesOrd.setString("sellDeptCd", bilgCustCdData.getString("sellDeptCd"));
//              salesOrd.setString("bilgCustCd", bilgCustCdData.getString("bilgCustCd"));
//          }
//
//          LMultiData dataHolder = new LMultiData();
//          //CompDaoUtil.deliverLCompoundDao(header, dataHolder);
//          dataHolder.add("LCompoundDao", dao);
//
//          dataHolder.add("salesOrd"           , salesOrd);
//          dataHolder.add("salesOrdItem"       , salesOrdItem1);
//
//          LData salesOrdPrcl       = new LData();
//          Set   salesOrdPrclSet    = salesOrd.keySet();
//          Iterator salesOrdPrclIte = salesOrdPrclSet.iterator();
//          while(salesOrdPrclIte.hasNext()){
//              String dataKey = salesOrdPrclIte.next().toString();
//                if(dataKey != null && !dataKey.equals("GauceJobType")&& !dataKey.equals("updFlag")) {
//                  if(dataKey.equals("salesOrdNo")) {
//                      salesOrdPrcl.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
//                  } else {
//                      if(dataKey.substring(0,3).equals("col")) {
//                          salesOrdPrcl.setString(dataKey, salesOrd.getString(dataKey));
//                      }
//                  }
//                }
//          }
//          dataHolder.add("salesOrdPrcl",salesOrdPrcl);
//
//          LMultiData itemPrcl = new LMultiData();
//          LData      temp     = null;
//          if(salesOrdItem1 != null && salesOrdItem1.getDataCount() > 0) {
//              for(int i=0; i < salesOrdItem1.getDataCount(); i++) {
//                  temp = new LData();
//                  Set itemPrclSet = salesOrdItem1.getLData(i).keySet();
//                  Iterator itemPrclIte = itemPrclSet.iterator();
//                  while(itemPrclIte.hasNext()){
//                      String dataKey = itemPrclIte.next().toString();
//                      if(dataKey != null && !dataKey.equals("GauceJobType") && !dataKey.equals("updFlag")) {
//                          if(dataKey.equals("salesOrdNo")) {
//                              temp.setString("salesOrdNo", salesOrdItem1.getString("salesOrdNo", i));
//                          } else if(dataKey.equals("lineNo")) {
//                                  temp.setString("lineNo", salesOrdItem1.getString("lineNo", i));
//                          } else {
//                              if(dataKey.substring(0,3).equals("col")) {
//                                  temp.setString(dataKey, salesOrdItem1.getString(dataKey, i));
//                              }
//                          }
//                      }
//                  }
//                  itemPrcl.addLData(temp);
//              }
//          }
//          dataHolder.add("salesOrdItemPrcl",itemPrcl);
//
//          dataHolder.add("salesOrdFis"        , null);
//          dataHolder.add("booking"            , null);
//
//          LData input = new LData();
//          input.setString("regrId", OmConstants.COMMON_USER);
//          input.setString("mdfrId", OmConstants.COMMON_USER);
//          dataHolder.add("INPUT"              , input);
//
//          LData param = new LData();
//          param.setString("domMdfProcYn", "N");
//          param.setString("mdfDlyProcYn", "N");
//
//          updateSalesOrd(dataHolder, param);
//
//          retVal.setString("salesOrdNo"   , salesOrd.getString("salesOrdNo"));
//          retVal.setString("backOrdYn"    , salesOrd.getString("backOrdYn"));
//
//          return retVal;
//
//      } catch (LBizException be) {
//          header.setString("errCd"    , "");
//          header.setString("errConts" , be.getMessage());
//          laf.application.dao.LCommonDao dao3 = new laf.application.dao.LCommonDao();
//          dao3.executeProcedure("cud/om/tb_om02001/callHistoryPrc", header);
//
//          throw be;
//        } catch (Exception se) {
//          header.setString("errCd"    , "");
//          header.setString("errConts" , se.getMessage());
//          laf.application.dao.LCommonDao dao3 = new laf.application.dao.LCommonDao();
//          dao3.executeProcedure("cud/om/tb_om02001/callHistoryPrc", header);
//          LLog.err.println(  this.getClass().getName() + "." + "updateSalesOrdAuto()" + "=>" + se.getMessage());
//          throw new LSysException(se.getMessage(), se);
//      }
//    }

    /**
     * 고객 거래선 입고오더 등록 메소드
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public void createCustOfCustGrOrd(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);

        try {

            LData salesOrd = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", inputData);

            if(salesOrd == null || salesOrd.getString("moveTypeCd") == null || !salesOrd.getString("moveTypeCd").equals("2101")) {
                return;
            }

            LData param = new LData();
            param.setString("ptnCd"    , salesOrd.getString("rptCustCd"));
            param.setString("custPtnCd", salesOrd.getString("custOfCustCd"));
            LData ptnCd = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", param);

            if(ptnCd == null || ptnCd.getString("custMpngCd") == null || ptnCd.getString("custMpngCd").equals("")){
                return;
            }

            param.setString("custPtnCd", salesOrd.getString("arvArCd"));
            LData arvInfo = dao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoSalesOrd", param);

            if(arvInfo == null || arvInfo.getString("workPlCd") == null || arvInfo.getString("workPlCd").equals("")){
                return;
            }

            // 지류유통 고객인 경우 입고오더 생성 안함. 2013-02-24
            //LLog.debug.println("#####createCustOfCustGrOrd 직유통 오더 생성 안함.ptnCd=========>"+ptnCd);
            //LLog.debug.println("#####createCustOfCustGrOrd 직유통 오더 생성 안함.OmConstants.HPL_USE_YN=========>"+OmConstants.HPL_USE_YN);
            if( "Y".equals(OmConstants.HPL_USE_YN )
                    && ( ptnCd.getString("custMpngCd").equals(OmConstants.CUST_CO_CD_IL ) || ptnCd.getString("custMpngCd").equals(OmConstants.CUST_CO_CD_PS) )
                  ) {
                LLog.debug.println("#####createCustOfCustGrOrd 직유통 오더 생성 안함.=========\n");
                return;
            }

            //2013-09-30 오산센터 화인페이퍼 (100038) 이고 오산공통일 때만 처리함.
//          if(salesOrd.getString("custOfCustCd") != null && salesOrd.getString("custOfCustCd").equals("100038")
//             //&& salesOrd.getString("arvArCd") != null && !salesOrd.getString("arvArCd").equals("300002")) { //QA
//             && salesOrd.getString("arvArCd") != null && !salesOrd.getString("arvArCd").equals("316275")) { //운영
//                return;
//          }

            /** 
            //계약체크는 아래에서 하고 있음.
            LData tmpData = new LData();
            tmpData.setString("ctrtCustCd", ptnCd.getString("custMpngCd"));
            tmpData.setString("ordTypeCd" , "1023");   //국내내수판매정상입고
            LMultiData ctrtTmp      = retrieveCustOrdTypeEachCtrt(tmpData);
            if(ctrtTmp == null && ctrtTmp.getDataCount() == 0) {
                return;
            }

            LMultiData ctrtData     = (LMultiData)ctrtTmp.get("OBJECT_TO_GDRs",0);

            // 계약이 없는 경우 리턴
            if(ctrtData.getDataCount() == 0){
                return;
            } else if(ctrtData.getDataCount() == 1){
                salesOrd.setString("ctrtNo"         , ctrtData.getLData(0).getString("code"));
                //salesOrd.setString("sellDeptCd"   , ctrtData.getLData(0).getString("sellDeptCd"));
                salesOrd.setString("salesOfcrId"    , ctrtData.getLData(0).getString("salesOfcrId"));
                //salesOrd.setString("bilgCustCd"   , ctrtData.getLData(0).getString("bilgCd"));
            }
            **/

            salesOrd.setString("custOrdNo"          , "");
            salesOrd.setString("custOrdTypeCd"      , "");
            salesOrd.setString("custOrdRecpChnCd"   , "");
            salesOrd.setString("custOfcrNm"         , "");
            salesOrd.setString("custOfcrTelNo"      , "");
            salesOrd.setString("salesOrdCmptSctnCd" , "");
            salesOrd.setString("custOfCustCd"       , "");
            salesOrd.setString("salesOrdStatCd"     , "02");
            salesOrd.setString("backOrdYn"          , "N");
            salesOrd.setString("ifId"               , "");
            salesOrd.setString("rptCustCd"          , ptnCd.getString("custMpngCd"));
            salesOrd.setString("ctrtCustCd"         , ptnCd.getString("custMpngCd"));
            salesOrd.setString("custCd"             , ptnCd.getString("custMpngCd"));
            salesOrd.setString("ordReqCustCd"       , ptnCd.getString("custMpngCd"));
            salesOrd.setString("arvArCd"            , arvInfo.getString("workPlCd"));
            salesOrd.setString("arvArTypeCd"        , "01");
            salesOrd.setString("ordTypeCd"          , "1023");
            salesOrd.setString("rltdGiEoNo"         , inputData.getString("eoNo"));
            salesOrd.setString("regrId"             , OmConstants.COMMON_USER);
            salesOrd.setString("mdfrId"             , OmConstants.COMMON_USER);

            inputData.setString("ordDivDgrCnt"  , inputData.getString("rsltDgrCnt"));
            LData ldupEoCheck = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDupTbOm02001", inputData);
            int dupCnt = ldupEoCheck.getInt("cnt");
            if(dupCnt > 0){
                throw new LBizException("대리점입고오더 중복오류");
            }

            LData ordMngtExceDeptCdData = setOrdMngtExceDeptCd(salesOrd);

            if(ordMngtExceDeptCdData == null || ordMngtExceDeptCdData.getString("result").equals("E")){
                throw new LBizException("오더관리실행부서 세팅오류:");
            }

            salesOrd.setString("ordMngtExceDeptCd", ordMngtExceDeptCdData.getString("ordMngtExceDeptCd"));
            salesOrd.setString("tranPlanCntrCd"   , ordMngtExceDeptCdData.getString("tranPlanCntrCd"));

            LData tempData = new LData();
            tempData.setString("ordChrgDeptCd"  , salesOrd.getString("ordMngtExceDeptCd"));
            tempData.setString("custCd"         , salesOrd.getString("rptCustCd"));
            tempData.setString("expImpDomSctnCd", salesOrd.getString("expImpDomSctnCd"));
            LData ofcrIdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdMngtExceOfcrId", tempData);

            if(ofcrIdData.getString("userId")!=null && !ofcrIdData.getString("userId").equals(""))
                salesOrd.setString("ordMngtExceOfcrId", ofcrIdData.getString("userId"));

            //이동유형세팅
            LData move = new LData();
            move.setString("dptArCd"            , salesOrd.getString("dptArCd"          ));
            move.setString("dptArTypeCd"        , salesOrd.getString("dptArTypeCd"      ));
            move.setString("arvArCd"            , salesOrd.getString("arvArCd"          ));
            move.setString("arvArTypeCd"        , salesOrd.getString("arvArTypeCd"      ));
            move.setString("expImpDomSctnCd"    , salesOrd.getString("expImpDomSctnCd"  ));
            move.setString("custOrdTypeCd"      , salesOrd.getString("custOrdTypeCd"    ));
            move.setString("custMoveTypeCd"     , salesOrd.getString("custMoveTypeCd"   ));
            move.setString("ordTypeCd"          , salesOrd.getString("ordTypeCd"        ));
            move.setString("rptCustCd"          , salesOrd.getString("rptCustCd"        ));
            move.setString("custOfCustCd"       , salesOrd.getString("custOfCustCd"     ));
            move.setString("selfGdsCd"          , "");

            String moveTypeCd = retrieveMoveType(move);

            salesOrd.setString("moveTypeCd", moveTypeCd);

            //대리점 입고오더 plant_cd 가져오는 부분 추가 2014-03-26
            LMultiData  salesOrdItem     = null;
            salesOrdItem = dao.executeQuery("select/om/om02/salesOrd/retrieveCustOfCustGrItemList", inputData);
            
    		LData paramItem = new LData();
    		paramItem.setString("ptnCd",  salesOrd.getString("rptCustCd"));
    		paramItem.setString("itemCd", salesOrdItem.getString("itemCd", 0));
    		LData itemData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfoPopup", paramItem);
            
            LData paramData = new LData();
            paramData.setString("dptArCd"       , salesOrd.getString("dptArCd"          ));
            paramData.setString("dptArTypeCd"   , salesOrd.getString("dptArTypeCd"      ));
            paramData.setString("arvArCd"       , salesOrd.getString("arvArCd"          ));
            paramData.setString("arvArTypeCd"   , salesOrd.getString("arvArTypeCd"      ));
            paramData.setString("rptCustCd"     , salesOrd.getString("rptCustCd"        ));
            paramData.setString("ordTypeCd"     , salesOrd.getString("ordTypeCd"        ));
            paramData.setString("expImpDomSctnCd", salesOrd.getString("expImpDomSctnCd" ));
            paramData.setString("corpCd",         salesOrd.getString("corpCd"   ));
            paramData.setString("moveTypeCd", moveTypeCd);
            //대리점 입고오더 생성시 plant_cd 추가 2014-03-26
            if(itemData != null )
                paramData.setString("plantCd",        itemData.getString("plantCd") );
            else
            	paramData.setString("plantCd",           "");
            
            /**
            LData bilgCustInfo = getBilgCustInfo(paramData);
            if(bilgCustInfo != null) {
                salesOrd.setString("sellDeptCd" , bilgCustInfo.getString("sellDeptCd"));
                salesOrd.setString("bilgCustCd" , bilgCustInfo.getString("bilgCustCd"));
            }
            **/
            //신규 계약번호, 청구고객, 매출부서 매핑. leepj 2013-12-28 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoInh(paramData);

            if( ctrtCustInfo != null ) {
                salesOrd.setString("ctrtNo" , ctrtCustInfo.getString("ctrtNo"));
                salesOrd.setString("bilgCustCd" , ctrtCustInfo.getString("bilgCustCd"));
                salesOrd.setString("sellDeptCd" , ctrtCustInfo.getString("sellDeptCd"));
                salesOrd.setString("salesOfcrId" , ctrtCustInfo.getString("salesOfcrId"));
            }                

            salesOrd.setString("ordDivDgrCnt"   , inputData.getString("rsltDgrCnt"));

            //salesOrdItem.addString("regrId", "");
            //salesOrdItem.addString("mdfrId", "");
            LLog.debug.println("salesOrdItem=========\n" + salesOrdItem);
            if(salesOrdItem != null && salesOrdItem.getDataCount() > 0) {
                int lineNo = 0;
                for(int i=0; i < salesOrdItem.getDataCount(); i++) {
                    salesOrdItem.addString("regrId", "");
                    salesOrdItem.addString("mdfrId", "");
                    lineNo = lineNo + 10;
                    salesOrdItem.modifyString("arvArCd"     , i, arvInfo.getString("workPlCd"));
                    salesOrdItem.modifyString("arvArTypeCd" , i, "01");
                    salesOrdItem.modifyString("lineNo"      , i, String.valueOf(lineNo));
                    salesOrdItem.modifyString("custCd"      , i, salesOrd.getString("custCd"));
                    //salesOrdItem.modifyString("mnfNo"     , i, inputData.getString("mnfNo"));
                    //salesOrdItem.modifyDouble("ordQty"      , i, Double.parseDouble(inputData.getString("rsltQty")));
                    //salesOrdItem.modifyDouble("ordWgt"      , i, Double.parseDouble(inputData.getString("rsltWgt")));
                    //salesOrdItem.modifyDouble("ordCbm"      , i, Double.parseDouble(inputData.getString("rsltCbm")));
                    salesOrdItem.addString("col07"       , salesOrdItem.getString("prdtLotNo",i));
                    salesOrdItem.addString("col08"       , salesOrdItem.getString("diaSupl",i));
                    salesOrdItem.addString("col09"       , salesOrdItem.getString("papstyleGdsSupl",i));
                    salesOrdItem.modifyString("regrId"      , i, OmConstants.COMMON_USER);
                    salesOrdItem.modifyString("mdfrId"      , i, OmConstants.COMMON_USER);
                }
            }

            LData salesOrdNoData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewSalesOrdNo", salesOrd);
            String salesOrdNo = salesOrdNoData.getString("salesOrdNo");
            salesOrd.setString("salesOrdNo", salesOrdNo);
            if(salesOrdItem != null && salesOrdItem.getDataCount() > 0) {
                for(int i=0; i < salesOrdItem.getDataCount(); i++) {
                    salesOrdItem.modifyString("salesOrdNo", i, salesOrdNo);
                }
            }
            salesOrd.setString("ordDivDgrCnt"       , inputData.getString("rsltDgrCnt"));
            dao.add("cud/om/tb_om02001/createTbOm02001", salesOrd);
            dao.add("cud/om/tb_om02002/createTbOm02002", salesOrdItem);
            dao.add("cud/om/tb_om02004/createTbOm02004", salesOrd);
            dao.add("cud/om/tb_om02005/createTbOm02005", salesOrdItem);
            
            /** CSN 직수출일 때 booking 만들기 2015-03-27
            if() {
            	
            }
            **/
            
            dao.executeUpdate();

            salesOrd.set("LCompoundDao", dao);
            IWorkRouteMngt pbc2 = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);
            pbc2.createBasisWorkRoute(salesOrd, salesOrdItem);//기본작업경로 생성

            setSalesOrdHistory(salesOrd);
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "createCustOfCustGrOrd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createCustOfCustGrOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 고객 거래선 입고오더 등록 메소드
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *  실행오더번호
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public void cancelCustOfCustGrOrd(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);
        LMultiData retVal = null;
        try {
            LData ordInfo = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveCustOfCustOrderInfo", inputData);
            if(ordInfo != null && ordInfo.getString("salesOrdNo") != null && !ordInfo.getString("salesOrdNo").equals("")) {
                LData param = new LData();

                param.setString("salesOrdNo"        , ordInfo.getString("salesOrdNo"));
                param.setString("salesOrdCnclReason", "고객거래선출고취소");
                param.setString("cntDongProcYn"     , "Y");
                param.setString("regrId"            , OmConstants.COMMON_USER);
                param.setString("mdfrId"            , OmConstants.COMMON_USER);
                param.set("LCompoundDao", dao);

                retVal = cancelSO(param);

                if(retVal != null && retVal.getDataCount() > 0) {
                    if(retVal.getString("key", 0).equals("E")) {
                        throw new LBizException(retVal.getString("message", 0));
                    }
                }
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelCustOfCustGrOrd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelCustOfCustGrOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * HBL 중복조회.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveHblNoDouble(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveHblNoDouble", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveHblNoDouble()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieveHblNoDouble", se);
        }
    }

    /** 출고취소 대상 정보를 조회하는 메소드.
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData retrieveGiCnclTgtItem(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            if( (inputData.getString("salesOrdNo") != null && !"".equals(inputData.getString("salesOrdNo")))
                || (inputData.getString("custOrdNo") != null && !"".equals(inputData.getString("custOrdNo")))
                || (inputData.getString("shipmentNo") != null && !"".equals(inputData.getString("shipmentNo"))) ) {
                // 오더접근권한 체크
                retrieveOrdAccessAuth(inputData);
            }

            //LMultiData a = dao.executeQuery("select/om/om03/workRouteMngt/retrieveGiCnclTgtItem", inputData);
            //LLog.debug.println("a====>\n" + a);
            //return a;
            return dao.executeQuery("select/om/om03/workRouteMngt/retrieveGiCnclTgtItem", inputData);
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveGiCnclTgtItem()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
    private LMultiData setSortCancelGi(LMultiData inputData) throws LException {
        LMultiData tmpList = new LMultiData();
        LMultiData sortList = new LMultiData();
        LData input = null;
        LData sort = null;
        String eoNo = "";
        boolean isSkip = false;//jjh 추가
        if(inputData != null && inputData.getDataCount() > 0) {
            for(int i=0; i < inputData.getDataCount(); i++) {
                input = inputData.getLData(i);
                eoNo = input.getString("eoNo");
                if(tmpList != null && tmpList.getDataCount() > 0) {
                    isSkip = false;//jjh 추가
                    for(int j=0; j < tmpList.getDataCount(); j++) {
                        sort = tmpList.getLData(j);
                        if(eoNo.equals(sort.getString("eoNo")) ){
                            //tmpList.addLData(input);
                            isSkip = true;//jjh 추가
                            break;
                        }
                    }

                    //jjh 추가
                    if(!isSkip){
                        tmpList.addLData(input);
                    }
                } else {
                    tmpList.addLData(input);
                }
            }

            if(tmpList != null && tmpList.getDataCount() > 0) {
                for(int n = 0; n < tmpList.getDataCount(); n++) {
                    for(int z=0; z < inputData.getDataCount(); z++) {
                        input = inputData.getLData(z);
                        if(tmpList.getString("eoNo", n).equals(inputData.getString("eoNo", z))) {
                            sortList.addLData(input);
                        }
                    }
                }
            }
        }
        LLog.debug.println("sortList====>\n" + sortList);


        return sortList;
    }

    private LMultiData setSortCancelGiItem(LMultiData inputData, String eoNo) throws LException {
        LMultiData sortList = new LMultiData();
        LData input = null;
        LData sort = null;
        String lineNo = "";
        boolean isSkip = false;
        if(inputData != null && inputData.getDataCount() > 0) {
            for(int i=0; i < inputData.getDataCount(); i++) {

                if(eoNo.equals(inputData.getString("eoNo", i))){
                    input = inputData.getLData(i);
                    lineNo = input.getString("lineNo");
                    if(sortList != null && sortList.getDataCount() > 0) {
                        isSkip = false;
                        for(int j=0; j < sortList.getDataCount(); j++) {
                            sort = sortList.getLData(j);
                            if(lineNo.equals(sort.getString("lineNo"))){
                                isSkip = true;
                                break;
                            }
                        }

                        if(!isSkip){
                            sortList.addLData(input);
                        }
                    } else {
                        sortList.addLData(input);
                    }
                }
            }

        }
        LLog.debug.println("sortList====>\n" + sortList);

        return sortList;
    }

    private boolean isPortOut(LData inputData) throws LException {

        boolean portChk = false;
        String expImpDomSctnCd = inputData.getString("expImpDomSctnCd");
        String shipmentNo = inputData.getString("shipmentNo");
        String dptArCd = inputData.getString("dptArCd");
        if(expImpDomSctnCd != null && OmConstants.EXP_IMP_EXPORT.equals(expImpDomSctnCd)
            && shipmentNo != null && "O".equals(shipmentNo.substring(0, 1))
            && dptArCd != null && "KR".equals(dptArCd.substring(0, 2))) {
            portChk = true;
        }

        return portChk;
    }

    /** 출고취소 정보를 저장하는 메소드.
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData cancelGi(LMultiData inputData) throws LException {

        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        LData salesOrd = new LData();
        LMultiData salesOrdItem = new LMultiData();
        boolean xdockYn = false;
        try{

            LLog.debug.println("inputData=============>\n" + inputData);

            //1. 출고취소 가능여부 조회
            String cancelGiYn = "Y";
            LData input = new LData();
            LData result = null;
            if(inputData != null && inputData.getDataCount() > 0) {
                for(int i=0; i < inputData.getDataCount(); i++) {
                    LData cancelYn = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveCancelGiCancelOrd", inputData.getLData(i));
                    if(cancelYn != null && cancelYn.getInt("cnt") > 0) {
                        throw new LBizException("출고취소가 가능하지 않습니다.:이미 출고취소 되었습니다. Line No:" + inputData.getString("lineNo", i));
                    }

                    if(!isPortOut(inputData.getLData(i))) {
                        LData possYn = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveCancelGiPossItem", inputData.getLData(i));
                        if(possYn != null && possYn.getString("possYn") != null && possYn.getString("possYn").equals("N")) {
                            throw new LBizException("출고취소가 가능하지 않습니다.:종결된 아이템:" + inputData.getString("lineNo", i));
                        }
                    }
                    
                    //사간거래및 지류유통 대리점 출고오더 출고취소 체크로직 skip 2014-05-15
                    if(inputData.getString("rptCustCd", i).equals(OmConstants.CUST_CO_CD_HP) 
                       || inputData.getString("rptCustCd", i).equals(OmConstants.CUST_CO_CD_AT)){
                        if(inputData.getString("regrId", i) != null && !inputData.getString("regrId", i).equals("sysadm")) {
                        	LData dopgYn = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDopgOrd", inputData.getLData(i));
                            if(dopgYn != null && dopgYn.getInt("cnt") > 0) {
		                        throw new LBizException("사간거래 출고오더는 출고취소가 가능하지 않습니다. Sales Order No:" + inputData.getString("salesOrdNo", i));
		                    }
                        }
	                    
	                    if(inputData.getString("regrId", i) != null && !inputData.getString("regrId", i).equals("sysadm")) {
		                    LData pnsYn = dao.executeQueryForSingle("select/om/om02/salesOrd/retrievePnsOrd", inputData.getLData(i));
		                    if(pnsYn != null && pnsYn.getInt("cnt") > 0) {
		                        throw new LBizException("지류유통 대리점 출고오더는 출고취소가 가능하지 않습니다. Sales Order No:" + inputData.getString("salesOrdNo", i));
		                    }
	                    }
                    }
                    //페이퍼텍 P1927 출고취소 로직
                    if(inputData.getString("rptCustCd", i).equals("P1927")) {
                    	LData ptYn = dao.executeQueryForSingle("select/om/om02/salesOrd/retrievePaperTecOrd", inputData.getLData(i));
                    	if(ptYn != null && ptYn.getInt("cnt") > 0) {
                            throw new LBizException("출고오더는 매출확정되어 출고취소가 가능하지 않습니다. Sales Order No:" + inputData.getString("salesOrdNo", i));
                        }
                    }
                }
            }

            LMultiData eoNoList = new LMultiData();
            LMultiData itemList = new LMultiData();
            LData tmpEo = null;
            if(inputData != null && inputData.getDataCount() > 0) {
                eoNoList = setSortCancelGi(inputData);
            }
            LLog.debug.println("eoNoList=============>\n" + eoNoList);

            if(eoNoList != null && eoNoList.getDataCount() > 0) {
            	
            	result = dao.executeQueryForSingle("select/om/om02/salesOrd/checkArvYn", eoNoList.getLData(0));
            	LLog.debug.println("도착여부result=============>\n" + result);
            	cancelGiYn = result.getString("arvYn");
                if(cancelGiYn.equals("Y")){
                    throw new LBizException("출고취소가 가능하지 않습니다.:도착완료");
                }
            	
                result = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveGiCnclPossYn", eoNoList.getLData(0));
                LLog.debug.println("매출입확정result=============>\n" + result);
                cancelGiYn = result.getString("cancelGiYn");
                if(cancelGiYn.equals("N")){
                    throw new LBizException("출고취소가 가능하지 않습니다.:매출입확정");
                }

                result = dao.executeQueryForSingle("select/iv/iv02/dctodcStockInq/retrieveSalesOrdGiCancelCheck", eoNoList.getLData(0));
                LLog.debug.println("수불마감완료result=============>\n" + result);

                if(result != null && result.getInt("cnt") > 0) {
                    throw new LBizException("출고취소가 가능하지 않습니다.:수불마감완료");
                }

                result = dao.executeQueryForSingle("select/iv/iv02/dctodcStockInq/retrieveSalesOrdXdockCheck", eoNoList.getLData(0));
                LLog.debug.println("XDock여부 result=============>\n" + result);

                if(result != null && result.getString("xdockOrdNo") != null && !result.getString("xdockOrdNo").equals("")) {
                    LData resultXdock = dao.executeQueryForSingle("select/iv/iv02/dctodcStockInq/retrieveSalesOrdGiCancelXdockCheck", eoNoList.getLData(0));
                    if(resultXdock != null && resultXdock.getInt("cnt") > 0) {
                        throw new LBizException("출고취소가 가능하지 않습니다.:XDOCK 후속 Shipment생성");
                    } else {
                        xdockYn = true;
                    }
                }
            }

            //========================================================//
//          dao.add("cud/om/tb_om01001/updateCol25", inputData.getLData(0));
//          dao.executeUpdate();
            //========================================================//

            //2.대표고객
            SalesOrdMngtWSC wsc = new SalesOrdMngtWSC();
            tmpEo = null;
            for(int i = 0; i < eoNoList.getDataCount(); i++){
                String rptCustCd        = eoNoList.getString("rptCustCd"    , i);
                String ordTypeCd        = eoNoList.getString("ordTypeCd"    , i);
                String custOrdTypeCd    = eoNoList.getString("custOrdTypeCd", i);
                String custMoveTypeCd   = eoNoList.getString("custMoveTypeCd", i);
                String centerCd         = eoNoList.getString("arvArCd"      , i);

                LData tmpData           = eoNoList.getLData(i);
                if(tmpEo == null) {
                    tmpEo = new LData();
                    tmpEo.setString("eoNo", "");
                }

                if(tmpEo != null && !tmpEo.getString("eoNo").equals(tmpData.getString("eoNo"))) {
                    tmpEo.setString("eoNo", tmpData.getString("eoNo"));

                    //======동일한 실행오더번호에 속한 라인번호 찾아내기 Start=============
                    int nCnt = 0;
                    for(int n=0; n < eoNoList.keySize("eoNo"); n++) {
                        if(eoNoList.getString("eoNo", n).equals(tmpData.getString("eoNo"))) {
                            nCnt++;
                        }
                    }
                    String[] lineNoArr = new String[nCnt];
                    int k = nCnt;
                    for(int n=0; n < eoNoList.keySize("eoNo"); n++) {
                        if(eoNoList.getString("eoNo", n).equals(tmpData.getString("eoNo"))) {
                            if(k > 0) {
                                lineNoArr[nCnt - (k--)] = eoNoList.getString("lineNo", n);
                            }
                        }
                    }
                    List lineNoList = new ArrayList();
                    for(int z=0; z < lineNoArr.length; z++) {
                        lineNoList.add(lineNoArr[z]);
                    }
                    LData docParam = eoNoList.getLData(i);
                    docParam.set("lineNoList", lineNoList);
                    //============= Line No 찾기 End==============================

                    //입고실행오더번호 찾기 ( sales_ord_no ,work_route_seq같고 work_step_cd = '0001'(입고) ->03003
                    //      03003의 입고 단계로 03015에 조인 work_step_seq(출고작업단계순번) rslt_dgr_cnt
                    //      입고실행오더가 1건.
                    //)

                    //입고실행오더가 확정(03022 테이블)(존재하면)이면 출고취소 불가
                    result = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveGiCnclPossYn2", tmpData);
                    cancelGiYn = result.getString("cancelGiYn");
                    if(cancelGiYn.equals("N")){
                        throw new LBizException("출고취소가 가능하지 않습니다.-후속입고확정");
                    }

                    // 3 대리점입고확정
                    //대리점입고확정(004001)(존재하면)이면 출고취소 불가
                    result = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveGiCnclPossYn3", tmpData);
                    cancelGiYn = result.getString("cancelGiYn");
                    if(cancelGiYn.equals("N")){
                        throw new LBizException("출고취소가 가능하지 않습니다.-대리점입고확정");
                    }

                    // 4 MRO 선오더 확정/실적여부 확인
                    //확정(03022), 실적(004001)(존재하면 출고취소 불가
                    if(rptCustCd.equals(OmConstants.CUST_CO_CD_MR)){
                        result = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveGiCnclPossYn4", tmpData);
                        cancelGiYn = result.getString("cancelGiYn");
                        if(cancelGiYn.equals("N")){
                            throw new LBizException("출고취소가 가능하지 않습니다.-선오더확정");
                        }
                    }

                    LMultiData docNoListCopy = null;

                    //========================================================//
//                  dao.add("cud/om/tb_om01001/updateCol26", inputData.getLData(0));
//                  dao.executeUpdate();
                    //========================================================//

/*===================================임시로 막음 - .QA만 반영됨 ========================================================================================*/
                    if(!xdockYn) {
                        LData returnData = null;
                        try{
                            if(eoNoList.getString("ifId", i) != null && !eoNoList.getString("ifId", i).equals("")) {

                                if(rptCustCd.equals(OmConstants.CUST_CO_CD_HP)
                                        || ("Y".equals(ART_YN) && rptCustCd.equals(OmConstants.CUST_CO_CD_AT))  ){
                                    //IF_HPP_OM_SalesOrder 인경우
                                    if("IF_HPP_OM_SalesOrder".equals(eoNoList.getString("ifId", i)) ) {
                                        //sysadm이면 납품문서체크 skip
                                        if(eoNoList.getString("regrId", i) != null && !eoNoList.getString("regrId", i).equals("sysadm")) {
                                            LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                                            docNoListCopy = docNoList;
                                            if(docNoList != null && docNoList.getDataCount() > 0) {
                                                for(int x=0; x < docNoList.getDataCount(); x++) {
                                                    LData cnlCheck = docNoList.getLData(x);

                                                    returnData = wsc.hppGICancelCheck(cnlCheck);
                                                    if(returnData != null && !returnData.getString("returnType").equals("S")){
                                                    // 아직 적용되면 안됨 - 추후 원인 파악 후 적용 예정
                                                    //&& !returnData.getString("returnType").equals("F")){
                                                        throw new LBizException("출고취소가 가능하지 않습니다.-"+returnData.getString("returnMessage"));
                                                    }
                                                }
                                            }
                                        }

                                    //IF_HPP_OM_ExportOrder 인경우
                                    } else if ("IF_HPP_OM_ExportOrder".equals(eoNoList.getString("ifId", i)) ) {
                                        if(eoNoList.getString("regrId", i) != null && !eoNoList.getString("regrId", i).equals("sysadm")) {
                                            if(!isPortOut(eoNoList.getLData(i))) {
                                                LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                                                docNoListCopy = docNoList;
                                                if(docNoList != null && docNoList.getDataCount() > 0) {
                                                    for(int x=0; x < docNoList.getDataCount(); x++) {
                                                        LData cnlCheck = docNoList.getLData(x);

                                                        returnData = wsc.hppGICancelBlockCheck(cnlCheck);
                                                        if(returnData != null && !returnData.getString("returnType").equals("S")
                                                            && !returnData.getString("returnType").equals("F")){
                                                            throw new LBizException("출고취소가 가능하지 않습니다.-"+returnData.getString("returnMessage"));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    //IF_HPP_OM_PO, IF_HPP_OM_POChange, IF_HPP_OM_STO 인경우
                                    //통합레이어테이블에서 조회 TB_IV02007 sap전송여부
                                    //SELECT * FROM  tb_iv02007 WHERE gi_doc_no = '0000017665'
                                    } else if("IF_HPP_OM_PO".equals(eoNoList.getString("ifId", i))
                                            || "IF_HPP_OM_POChange".equals(eoNoList.getString("ifId", i))
                                            || "IF_HPP_OM_STOReq".equals(eoNoList.getString("ifId", i)) ) {

                                        LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoListBySalesOrdNo", docParam);
                                        LLog.debug.println("docNoList===========>" + docNoList);
                                        docNoListCopy = docNoList;

                                        if(docNoList != null && docNoList.getDataCount() > 0) {
                                            for(int x=0; x < docNoList.getDataCount(); x++) {
                                                LData cnlCheck = docNoList.getLData(x);
                                                returnData = dao.executeQueryForSingle("select/iv/iv02/grGiSpecInq/retrieveGiCnclPossYnBySalesOrdNo", cnlCheck);
                                                LLog.debug.println("cnlCheck returnData===========>" + returnData);

                                                if(returnData != null && returnData.getInt("cnt") > 0) {
                                                    throw new LBizException("출고취소가 가능하지 않습니다.-출고실적이 고객사로 전송되지 않았습니다.");
                                                }
                                            }
                                        }
                                    //IF_HPP_OM_TransferOrder 이고 오더유형이  국내수입조달정상출고,국내수입조달정상출고운송이면
                                    } else if("IF_HPP_OM_TransferOrder".equals(eoNoList.getString("ifId", 0))
                                            && (ordTypeCd.equals("3078") || ordTypeCd.equals("3079") ) ) {
                                        //sysadm이면 납품문서체크 skip
                                        if(eoNoList.getString("regrId", i) != null && !eoNoList.getString("regrId", i).equals("sysadm")) {

                                            LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                                            docNoListCopy = docNoList;
                                            if(docNoList != null && docNoList.getDataCount() > 0) {
                                                for(int x=0; x < docNoList.getDataCount(); x++) {
                                                    LData cnlCheck = docNoList.getLData(x);

                                                    returnData = wsc.hppImportDNCancel(cnlCheck);
                                                    if(returnData != null && !returnData.getString("returnType").equals("S")
                                                        && !returnData.getString("returnType").equals("F")){
                                                        throw new LBizException("출고취소가 가능하지 않습니다.-"+returnData.getString("returnMessage"));
                                                    }
                                                }
                                            }
                                        }

                                    } else if("IF_HPP_OM_TransferOrder".equals(eoNoList.getString("ifId", 0))
                                            && !(ordTypeCd.equals("3078") || ordTypeCd.equals("3079") ) ) {
                                    //IF_HPP_OM_TransferOrder 이고 오더유형이  국내수입조달정상출고,국내수입조달정상출고운송이 아니면
                                    //통합레이어테이블에서 조회 TB_IV02007 sap전송여부
                                        LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoListBySalesOrdNo", docParam);
                                        docNoListCopy = docNoList;
                                        if(docNoList != null && docNoList.getDataCount() > 0) {
                                            for(int x=0; x < docNoList.getDataCount(); x++) {
                                                LData cnlCheck = docNoList.getLData(x);
                                                returnData = dao.executeQueryForSingle("select/iv/iv02/grGiSpecInq/retrieveGiCnclPossYnBySalesOrdNo", cnlCheck);
                                                if(returnData != null && returnData.getInt("cnt") > 0) {
                                                    throw new LBizException("출고취소가 가능하지 않습니다.-출고실적이 고객사로 전송되지 않았습니다.");
                                                }
                                            }
                                        }

                                    } else {
                                    //이 모든경우가 아니면
                                    //통합레이어테이블에서 조회 TB_IV02007 sap전송여부
                                        LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoListBySalesOrdNo", docParam);
                                        docNoListCopy = docNoList;
                                        // 내부오더에 대해서는 OutBound 전송 하지 않음 : 2009.06.15
//                                      if(docNoList != null && docNoList.getDataCount() > 0) {
//                                          for(int x=0; x < docNoList.getDataCount(); x++) {
//                                              LData cnlCheck = docNoList.getLData(x);
//                                              returnData = dao.executeQueryForSingle("select/iv/iv02/grGiSpecInq/retrieveGiCnclPossYn", cnlCheck);
//                                              if(returnData != null && returnData.getInt("cnt") > 0) {
//                                                  throw new LBizException("출고취소가 가능하지 않습니다.-출고실적이 고객사로 전송되지 않았습니다.");
//                                              }
//                                          }
//                                      }
                                    }
//                                    LLog.debug.println("custOrdTypeCd===========>" + custOrdTypeCd);
//                                    LLog.debug.println("custMoveTypeCd===========>" + custMoveTypeCd);
//                                    LLog.debug.println("docParam===========>" + docParam);
                                    //LLog.debug.println("centerCd===========>" + centerCd);

                                    if("ZDOG".equals(custOrdTypeCd) || "Z01".equals(custMoveTypeCd) || "Z15".equals(custMoveTypeCd) || "Z33".equals(custMoveTypeCd)) {
//                                      LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                                        LLog.debug.println("docNoList===========>" + docNoListCopy);
                                        if(docNoListCopy != null && docNoListCopy.getDataCount() > 0) {
                                            for(int x=0; x < docNoListCopy.getDataCount(); x++) {
                                                LData mesData = docNoListCopy.getLData(x);
                                                mesData.setString("centerCd"    , centerCd);
                                                LData checkMes = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveMesCheck", mesData);
                                                if(checkMes != null && checkMes.getInt("checkCnt") > 0) {
                                                    throw new LBizException("출고취소가 가능하지 않습니다.-고객사 작업진행중 입니다.");
                                                }
                                            }
                                        }
                                    }

                                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_HH)){
                                    LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                                    if(docNoList != null && docNoList.getDataCount() > 0) {
                                        for(int x=0; x < docNoList.getDataCount(); x++) {
                                            LData cnlCheck = docNoList.getLData(x);
                                            //IF_HHP_OM_SalesOrder면
                                            //IF_OM_HHP_GICancelCheck 호출
                                            if("IF_HHP_OM_SalesOrder".equals(eoNoList.getString("ifId", i)) ) {
                                                returnData = wsc.hhpGICancelCheck(cnlCheck);

                                                if(returnData != null && !returnData.getString("returnType").equals("S")){
                                                    throw new LBizException("출고취소가 가능하지 않습니다.-"+returnData.getString("returnMessage"));
                                                }
                                            } else {
                                                //통합레이어테이블에서 조회 TB_IV02007 sap전송여부 : 2009.06.15 여부 체크 뺌
//                                              returnData = dao.executeQueryForSingle("select/iv/iv02/grGiSpecInq/retrieveGiCnclPossYn", cnlCheck);
//                                              if(returnData != null && returnData.getInt("cnt") > 0) {
//                                                  throw new LBizException("출고취소가 가능하지 않습니다.-출고실적이 고객사로 전송되지 않았습니다.");
//                                              }
                                            }
                                        }
                                    }

                                }else if(rptCustCd.equals(OmConstants.CUST_CO_CD_NC)){
                                    //노스케스코그 DB를 조회

                                // 아트원 웹서비스 컴파일 후 적용예정
                                }else if( "N".equals(ART_YN) && rptCustCd.equals(OmConstants.CUST_CO_CD_AT)){
                                    //sysadm이면 납품문서체크 skip
                                    if(eoNoList.getString("regrId", i) != null && !eoNoList.getString("regrId", i).equals("sysadm")) {
                                        LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                                        LData salesOrdInfo = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSORejectHeaderParam", docParam);

                                        docNoListCopy = docNoList;
                                        if(docNoList != null && docNoList.getDataCount() > 0) {
                                            for(int x=0; x < docNoList.getDataCount(); x++) {
                                                LData cnlCheck = docNoList.getLData(x);
                                                cnlCheck.setString("custOrdNo",salesOrdInfo.getString("custOrdNo"));

                                                returnData = wsc.artOneGICancelCheck(cnlCheck);
                                                if(returnData != null && !returnData.getString("returnType").equals("S")){
                                                    throw new LBizException("출고취소가 가능하지 않습니다.-"+returnData.getString("returnMessage"));
                                                }
                                            }
                                        }
                                    }
                                // 지류유통 웹서비스 컴파일 후 적용예정 2012-11-27
                                } else if( "Y".equals(OmConstants.HPL_USE_YN)
                                           && (rptCustCd.equals(OmConstants.CUST_CO_CD_IL) || rptCustCd.equals(OmConstants.CUST_CO_CD_PS)) ){
                                    //sysadm이면 납품문서체크 skip
                                    //IF_HPL_OM_SalesOrder 인경우
                                    if("IF_HPL_OM_SalesOrder".equals(eoNoList.getString("ifId", i)) || "IF_HPL_OM_CutOrder".equals(eoNoList.getString("ifId", i)) ) {
                                        //sysadm이면 납품문서체크 skip
                                        if(eoNoList.getString("regrId", i) != null && !eoNoList.getString("regrId", i).equals("sysadm")) {
                                            LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                                            docNoListCopy = docNoList;
                                            if(docNoList != null && docNoList.getDataCount() > 0) {
                                                for(int x=0; x < docNoList.getDataCount(); x++) {
                                                    LData cnlCheck = docNoList.getLData(x);

                                                    returnData = wsc.hplGICancelCheck(cnlCheck);
                                                    if(returnData != null && !returnData.getString("returnType").equals("S")){
                                                    // 아직 적용되면 안됨 - 추후 원인 파악 후 적용 예정
                                                    //&& !returnData.getString("returnType").equals("F")){
                                                        throw new LBizException("출고취소가 가능하지 않습니다.-"+returnData.getString("returnMessage"));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        } catch(Exception xe) {
                            xe.printStackTrace(LLog.debug);
                            LLog.debug.println("xe.getMessage===>" + xe.getMessage());
                            throw new LBizException(xe.getMessage());
                        }
                    }else { // X-Doc 이고 후속shipment가 없을 경우 IV02007.OMS_TRMS_STAT_CD='X'로 업데이트함

//                      try{
//
//                          dao.add("cud/om/tb_iv02007/updateXdocYn"    , tmpData);
//                          dao.executeUpdate();
//
//                      }catch(Exception xxe) {
//                          xxe.printStackTrace(LLog.debug);
//                          LLog.debug.println("xxe.getMessage===>" + xxe.getMessage());
//                          throw new LBizException(xxe.getMessage());
//                      }
                    }
/*===================================임시로 막음 - .QA만 반영됨 ========================================================================================*/

                }

            }

            String soNoList = "";
            LData param = null;
            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);

            //3. 반품 입고오더를 생성한다. (헤더, 아이템)
            if(eoNoList != null && eoNoList.getDataCount() > 0) {
                tmpEo = null;
                for(int x=0; x < eoNoList.getDataCount(); x++) {
                    input = eoNoList.getLData(x);

                    salesOrd = new LData();
                    salesOrdItem = new LMultiData();

                    if(tmpEo == null) {
                        tmpEo = new LData();
                        tmpEo.setString("eoNo", "");
                    }

                    if(tmpEo != null && !tmpEo.getString("eoNo").equals(input.getString("eoNo"))) {
                        String salesOrdNo = "";
                        result = null;
                        result = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);
                        salesOrdNo = result.getString("salesOrdNo");
                        soNoList += ", " + salesOrdNo;

                        input.setString("salesOrdNo", eoNoList.getString("salesOrdNo", x));
                        salesOrd = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrd", input);

                        //jjh 추가
                        itemList = setSortCancelGiItem(eoNoList, input.getString("eoNo"));

                        for(int i = 0; i < itemList.getDataCount(); i++){
                            LData tmp = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdItem", itemList.getLData(i));
                            //if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HW)){
                            //	tmp.setString("prdtReqNo",input.getString("prdtReqNo"));
                            //}
                            salesOrdItem.addLData(tmp);
                        }
                        LLog.debug.println("SalesOrdItem===>" + salesOrdItem);
                        /*
                        for(int i = 0; i < eoNoList.getDataCount(); i++){
                            if(eoNoList.getString("eoNo", x).equals(eoNoList.getString("eoNo", i)) && eoNoList.getString("lineNo", x).equals(eoNoList.getString("lineNo", i))){
                                input.setString("salesOrdNo", eoNoList.getString("salesOrdNo"   , i));
                                input.setString("lineNo"    , eoNoList.getString("lineNo"       , i));
                                LData tmp = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdItem", input);
                                salesOrdItem.addLData(tmp);
                            }
                            eoNoList.modify("cnclOrdNo", i, salesOrdNo);
                        }
                        */

                        eoNoList.modify("cnclOrdNo", x, salesOrdNo);

                        salesOrd.setString("salesOrdNo"     , salesOrdNo);
                        salesOrd.setString("giCnclReasonCd" , eoNoList.getString("giCnclReasonCd"   , x));
                        salesOrd.setString("rltdGiEoNo"     , eoNoList.getString("eoNo"             , x));
                        salesOrd.setString("regrId"         , eoNoList.getString("regrId"           , x));
                        salesOrd.setString("mdfrId"         , eoNoList.getString("regrId"           , x));
                        salesOrd.setString("aptdReqYmd"     , DateUtil.getCurrentDateString());
                        salesOrd.setString("aptdReqHm"      , "2359");

                        //movetype setting
                        LData move = new LData();
                        move.setString("dptArCd"            , salesOrd.getString("dptArCd"          ));
                        move.setString("dptArTypeCd"        , salesOrd.getString("dptArTypeCd"      ));
                        move.setString("arvArCd"            , salesOrd.getString("arvArCd"          ));
                        move.setString("arvArTypeCd"        , salesOrd.getString("arvArTypeCd"      ));
                        move.setString("expImpDomSctnCd"    , salesOrd.getString("expImpDomSctnCd"  ));
                        move.setString("custOrdTypeCd"      , salesOrd.getString("custOrdTypeCd"    ));
                        move.setString("custMoveTypeCd"     , salesOrd.getString("custMoveTypeCd"   ));
                        move.setString("ordTypeCd"          , salesOrd.getString("ordTypeCd"        ));
                        move.setString("rptCustCd"          , salesOrd.getString("rptCustCd"        ));
                        move.setString("custOfCustCd"       , salesOrd.getString("custOfCustCd"     ));

                        if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)){ //노스케인경우
                            LData selfGdsCdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSelfGdsCd", salesOrd);
                            String selfGdsCd = selfGdsCdData.getString("col04");
                            move.setString("selfGdsCd"          , selfGdsCd);

                        } else {
                            move.setString("selfGdsCd"          , "");
                        }

                        String moveTypeCd = retrieveMoveType(move);

                        salesOrd.setString("moveTypeCd", moveTypeCd);

                        for(int i = 0; i < salesOrdItem.getDataCount(); i++){
                            double rsltQty = 0.0;
                            double rsltWgt = 0.0;
                            double rsltCbm = 0.0;

                            salesOrdItem.modify("salesOrdNo", i, salesOrdNo);
                            salesOrdItem.modify("regrId"    , i, eoNoList.getString("regrId", x));
                            salesOrdItem.modify("mdfrId"    , i, eoNoList.getString("regrId", x));

                            for(int j = 0; j < eoNoList.getDataCount(); j++){
                                if(eoNoList.getString("eoNo", x).equals(eoNoList.getString("eoNo", j))
                                //&& eoNoList.getString("lineNo", x).equals(eoNoList.getString("lineNo", j))
                                //&& eoNoList.getString("lineNo", x).equals(salesOrdItem.getString("lineNo", i))){
                                && eoNoList.getString("lineNo", j).equals(salesOrdItem.getString("lineNo", i))){//jjh 추가
                                    rsltQty += eoNoList.getDouble("rsltQty", j);
                                    rsltWgt += eoNoList.getDouble("rsltWgt", j);
                                    rsltCbm += eoNoList.getDouble("rsltCbm", j);
                                }
                            }
                            salesOrdItem.modifyDouble("ordQty", i, rsltQty);
                            salesOrdItem.modifyDouble("ordWgt", i, rsltWgt);
                            salesOrdItem.modifyDouble("ordCbm", i, rsltCbm);
                        }
                        
                        salesOrd.setString("col01", eoNoList.getString("giCnclReasonText"   , x));
                        
                        dao.add("cud/om/tb_om02001/createSalesOrdAuto"  , salesOrd);
                        dao.add("cud/om/tb_om02004/createTbOm02004"     , salesOrd);
                        dao.add("cud/om/tb_om02002/createSalesOrd"      , salesOrdItem);
                        dao.add("cud/om/tb_om02005/createTbOm02005"     , salesOrdItem);

LLog.debug.println("salesOrd====>\n" + salesOrd);
LLog.debug.println("salesOrdITem====>\n" + salesOrdItem);

                        dao.executeUpdate();

                        param = new LData();
                        param = eoNoList.getLData(x);

                        param.set("LCompoundDao"            , dao);
                        param.setString("workProgStatCd"    , "03");
                        param.setString("rsltWorkStepSeq"   , inputData.getString("workStepSeq", 0));

                        pbc.cancelEo(param);


                        cancelCustOfCustGrOrd(param);

                        LData eoData = null;
                        for(int j = 0; j < eoNoList.getDataCount(); j++){
                            eoData = eoNoList.getLData(j);
                            if(eoNoList.getString("eoNo", x).equals(eoData.getString("eoNo")) ) {
                                eoData.setString("cnclOrdNo", salesOrdNo);
                                dao.add("cud/om/tb_om04003/updateCancelGi" , eoData);
                                dao.add("cud/om/tb_om04003h/updateCancelGi", eoData);
                            }
                        }
                        dao.executeUpdate();

                        //========================================================//
//                      dao.add("cud/om/tb_om01001/updateCol26", inputData.getLData(0));
//                      dao.executeUpdate();
                        //========================================================//

                        //실적이 있는 아이템이 남아있는지 체크해서 남아있으면 실행오더 생성
                        LMultiData rsltData = dao.executeQuery("select/om/om02/salesOrd/retrieveTransferGrEoRsltItemList", param);
                        if(rsltData != null && rsltData.getDataCount() > 0) {
                            pbc.divideEo(param);
                            createCustOfCustGrOrd(param);
                        }

                        //========================================================//
//                      dao.add("cud/om/tb_om01001/updateCol27", inputData.getLData(0));
//                      dao.executeUpdate();
                        //========================================================//

                        //4. 기본작업경로 생성을 요청한다.
                        IWorkRouteMngt pbc2     = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
                        salesOrd.set("LCompoundDao", dao);
                        pbc2.createBasisWorkRoute(salesOrd, salesOrdItem);

                        salesOrd.set("LCompoundDao", dao);
                        setSalesOrdHistory(salesOrd);


                        tmpEo.setString("eoNo", input.getString("eoNo"));
                    }
                }
            }

            //========================================================//
//          dao.add("cud/om/tb_om01001/updateCol29", inputData.getLData(0));
//          dao.executeUpdate();
            //========================================================//

            if(eoNoList != null && eoNoList.getDataCount() > 0) {
                tmpEo = null;
                for(int x=0; x < eoNoList.getDataCount(); x++) {
                    LData docParam = eoNoList.getLData(x);

                    if(tmpEo == null) {
                        tmpEo = new LData();
                        tmpEo.setString("eoNo", "");
                    }
                    if(tmpEo != null && !tmpEo.getString("eoNo").equals(docParam.getString("eoNo"))) {
                        tmpEo.setString("eoNo", docParam.getString("eoNo"));

                        //======동일한 실행오더번호에 속한 라인번호 찾아내기 Start=============
                        int nCnt = 0;
                        for(int n=0; n < eoNoList.keySize("eoNo"); n++) {
                            if(eoNoList.getString("eoNo", n).equals(docParam.getString("eoNo"))) {
                                nCnt++;
                            }
                        }
                        String[] lineNoArr = new String[nCnt];
                        int k = nCnt;
                        for(int n=0; n < eoNoList.keySize("eoNo"); n++) {
                            if(eoNoList.getString("eoNo", n).equals(docParam.getString("eoNo"))) {
                                if(k > 0) {
                                    lineNoArr[nCnt - (k--)] = eoNoList.getString("lineNo", n);
                                }
                            }
                        }
                        List lineNoList = new ArrayList();
                        for(int z=0; z < lineNoArr.length; z++) {
                            lineNoList.add(lineNoArr[z]);
                        }
                        docParam.set("lineNoList", lineNoList);

                        if("ZDOG".equals(docParam.getString("custOrdTypeCd")) || "Z01".equals(docParam.getString("custMoveTypeCd")) || "Z15".equals(docParam.getString("custMoveTypeCd")) || "Z33".equals(docParam.getString("custMoveTypeCd"))) {
                            LMultiData docNoList = dao.executeQuery("select/om/om02/salesOrd/retrieveGiDocNoList", docParam);
                            if(docNoList != null && docNoList.getDataCount() > 0) {
                                for(int z=0; z < docNoList.getDataCount(); z++) {
                                    LData mesData = docNoList.getLData(z);
                                    mesData.setString("centerCd"    , docParam.getString("arvArCd"));
                                    dao.add("cud/om/wj1t_warehouse_in/updateGiCancelMes", mesData);
                                }
                                dao.executeUpdate();
                            }
                        }

                    }
                }
            }
//          for(int i = 0;i<inputData.getDataCount();i++){
//              if(inputData.getString("ordDivDgrCnt", i) != null && !inputData.getString("ordDivDgrCnt", i).equals("") && Double.parseDouble(inputData.getString("ordDivDgrCnt", i)) != 0){
//              //함수호출
//                  param = new LData();
//
//                  param.set("LCompoundDao", dao);
//                  param = inputData.getLData(i);
//                  param.setString("workProgStatCd", "03");
//                  param.setString("rsltWorkStepSeq", inputData.getString("workStepSeq", i));
//                  param.setString("rsltDgrCnt", inputData.getString("ordDivDgrCnt", i));
//                  pbc.cancelEo(param);
//
//                  pbc.divideEo(param);
//
//                  cancelCustOfCustGrOrd(param);
//                  createCustOfCustGrOrd(param);
//              }
//          }

            LMultiData returnData = new LMultiData();
            if(soNoList != null && !soNoList.equals(""))
                soNoList = soNoList.substring(1);

            returnData.addString("salesOrdNo", soNoList);

            //========================================================//
//          dao.add("cud/om/tb_om01001/updateCol30", inputData.getLData(0));
//          dao.executeUpdate();
            //========================================================//

            return returnData;

        } catch (LBizException be) {
            salesOrd.setString("errCd"      , "");
            salesOrd.setString("errConts"   , be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelGi()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }


    /** 이동유형을 조회하는 메소드.
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    * dptArCd, dptArTypeCd, arvArCd, arvArTypeCd, rptCustCd, custMoveTypeCd, custOrdTypeCd, expImpDomSctnCd, ordTypeCd, selfGdsCd
    *
    * @return LData 조회된 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    private String retrieveMoveType(LData input) throws LException {
        laf.application.dao.LCompoundDao iDao = new laf.application.dao.LCompoundDao(); //CompDaoUtil.getTransaction(input, false);

        String strMoveType = "";
        LData dptAr = new LData();
        LData arvAr = new LData();

        LData dptArType = null;
        LData arvArType = null;
        String dptArTypeCd = "";
        String arvArTypeCd = "";
        LData ordTypeData = iDao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", input);
        //LLog.debug.println("retrieveMoveType : input>>>>>>>>>>>"+input);
        try {
            dptArTypeCd = input.getString("dptArTypeCd");
            if(OmConstants.AR_TYPE_CD_CENTER.equals(input.getString("dptArTypeCd")) ){
                dptAr.setString("corpCd"    , OmConstants.COMMON_CORP_CD);
                dptAr.setString("workPlCd"  , input.getString("dptArCd"));
                dptArType = iDao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveWorkPlInfoPopup", dptAr);
                if(dptArType.getString("workPlSctnCd") != null && dptArType.getString("workPlSctnCd").equals("04")) {
                    dptArType.setString("workPlSctnCd", "01");
                }
                dptArTypeCd += dptArType.getString("workPlSctnCd");
            } else if(OmConstants.AR_TYPE_CD_CUST_PTN.equals(input.getString("dptArTypeCd"))) {
                dptAr.setString("custPtnCd", input.getString("dptArCd"));
                dptAr.setString("ptnCd", input.getString("rptCustCd"));
                dptAr.setString("rptCustCd", input.getString("rptCustCd"));
                dptArType = iDao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoMoveType", dptAr);
                dptArTypeCd += dptArType.getString("custClasCd");
            } else {
                dptArTypeCd += "00";

            }
            arvArTypeCd = input.getString("arvArTypeCd");
            if(OmConstants.AR_TYPE_CD_CENTER.equals(input.getString("arvArTypeCd"))) {
                arvAr.setString("corpCd"    , OmConstants.COMMON_CORP_CD);
                arvAr.setString("workPlCd"  , input.getString("arvArCd"));
                arvArType = iDao.executeQueryForSingle("select/ma/ma01/workPlInfoMngt/retrieveWorkPlInfoPopup", arvAr);
                if(arvArType.getString("workPlSctnCd") != null && arvArType.getString("workPlSctnCd").equals("04")) {
                    arvArType.setString("workPlSctnCd", "01");
                }
                arvArTypeCd += arvArType.getString("workPlSctnCd");
            } else if(OmConstants.AR_TYPE_CD_CUST_PTN.equals(input.getString("arvArTypeCd"))) {
                arvAr.setString("custPtnCd", input.getString("arvArCd"));
                arvAr.setString("ptnCd", input.getString("rptCustCd"));
                arvAr.setString("rptCustCd", input.getString("rptCustCd"));
                //LLog.debug.println("retrieveMoveType : arvAr>>>>>>>>>>>"+arvAr);
                arvArType = iDao.executeQueryForSingle("select/ma/ma01/custPtnInfoMngt/retrieveCustPtnInfoMoveType", arvAr);
                //LLog.debug.println("retrieveMoveType : arvArType>>>>>>>>>>>"+arvArType);
                arvArTypeCd += arvArType.getString("custClasCd");
            } else {
                arvArTypeCd += "00";
            }


            LData moveType  = null;
            LData move      = new LData();
            String logisSvcSctnCd = "";
            if(ordTypeData != null && !ordTypeData.getString("logisSvcSctnCd").equals("")) {
                logisSvcSctnCd = getLogisSvcSctnCd(ordTypeData.getString("logisSvcSctnCd"));
            }
            move.setString("dptArCd"            , input.getString("dptArCd"));
            move.setString("arvArCd"            , input.getString("arvArCd"));
            move.setString("arvArTypeCd"        , input.getString("arvArTypeCd"));
            move.setString("expImpDomSctnCd"    , input.getString("expImpDomSctnCd"));
            move.setString("custOrdTypeCd"      , input.getString("custOrdTypeCd"));
            move.setString("custMoveTypeCd"     , input.getString("custMoveTypeCd"));
            move.setString("ordTypeCd"          , input.getString("ordTypeCd"));
            move.setString("rptCustCd"          , input.getString("rptCustCd"));
            move.setString("custOfCustCd"       , input.getString("custOfCustCd"));
            move.setString("selfGdsCd"          , input.getString("selfGdsCd"));

            input.setString("custCd"            , input.getString("rptCustCd"));

            if(input != null && input.getString("rptCustCd") != null
                    && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS))){ // 이브자리

                String custOrdTypeCd = input.getString("custOrdTypeCd");
                String custMoveTypeCd = input.getString("custMoveTypeCd");
                String dptArCd = input.getString("dptArCd");
                String arvArCd = input.getString("arvArCd");

                laf.application.dao.LCompoundDao LCompoundDao = new laf.application.dao.LCompoundDao();

                // 입고운송유형인지, 출고운송유형인지 판단한다.
                LMultiData dptArv   = LCompoundDao.executeQuery("select/om/om02/salesOrd/retrieveMoveDptArvUseYn",input);

                if(dptArv != null && dptArv.getDataCount() > 0){
                    if("Y".equals(dptArv.getString("dptArCdYn",0)) && "N".equals(dptArv.getString("arvArCdYn",0))){ // 출발지로 고객거래선의 입고운송유형값을 가져온다.
                        input.setString("arvArCd"         , "");
                        LData resultTemp    = LCompoundDao.executeQueryForSingle("select/om/om02/salesOrd/getGiGrTypeCd",input);
                        input.setString("col"         , resultTemp.getString("col")); // 입고운송유형코드

                    }else if("Y".equals(dptArv.getString("arvArCdYn",0)) && "N".equals(dptArv.getString("dptArCdYn",0))){ // 도착지로 고객거래선의 출고운송유형값을 가져온다.
                        input.setString("dptArCd"         , "");
                        LData resultTemp    = LCompoundDao.executeQueryForSingle("select/om/om02/salesOrd/getGiGrTypeCd",input);
                        input.setString("col"         , resultTemp.getString("col")); // 출고운송유형코드
                    }else if("Y".equals(dptArv.getString("dptArCdYn",0)) && "Y".equals(dptArv.getString("arvArCdYn",0))){ // 출발지로 고객거래선의 입고운송유형값을 가져온다.
                        //   도착지로 고객거래선의 출고운송유형값을 출발지로 고객거래선의 입고운송유형 값을 가져온다.
                        LData col05 = LCompoundDao.executeQueryForSingle("select/om/om02/salesOrd/getGrTypeCd",input); // 입고운송유형
                        LData col06 = LCompoundDao.executeQueryForSingle("select/om/om02/salesOrd/getGiTypeCd",input);  // 출고운송유형
                        input.setString("col05Value"          , col05.getString("col05"));
                        input.setString("col06Value"          , col06.getString("col06"));

                    }else{ // 고객거래선을 참조하지 않고 고객오더유형과 고객이동유형코드만 가지고 오더유형을 결정함

                    }
                }else{
                    throw new LBizException("이브자리 이동유형 미존재 오류");
                }


                LData transYn   = LCompoundDao.executeQueryForSingle("select/om/om02/salesOrd/getEveTransYn",input);
                if(transYn != null){
                    if("N".equals(transYn.getString("transYn"))){
                        input.setString("transValue"          , "");
                    }

                }else{
                    throw new LBizException("이브자리 이동유형 미존재 오류");
                }

                LLog.debug.println("*********************************");
                LLog.debug.println("********* transYn :  =>"+transYn);
                LLog.debug.println("*********************************");


                LData result    = LCompoundDao.executeQueryForSingle("select/om/om02/salesOrd/getEveMoveTypeCd",input);

                //String moveTypeCd     = result.getString("moveTypeCd");

                LLog.debug.println("*********************************");
                LLog.debug.println("********* input2 :  =>"+input);
                LLog.debug.println("*********************************");

            }

            if(input != null && input.getString("rptCustCd") != null
                    && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PG)
                        || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SC)
                        || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NS)
                        || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_OD)
                        || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CW)
                        || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SD)
                        || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB))){ //

                String custOrdTypeCd = input.getString("custOrdTypeCd");
                String custMoveTypeCd = input.getString("custMoveTypeCd");
                String dptArCd = input.getString("dptArCd");
                String arvArCd = input.getString("arvArCd");

                moveType    = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCd",input);

            }

            if(logisSvcSctnCd.equals(OmConstants.WORK_STEP_OUT)) { //출고

                if(input != null && input.getString("rptCustCd") != null
                        && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IL)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_BM)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_OD)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CW)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SD)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PS)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CN)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SF)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PE)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_YK)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MG)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DF)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_TS)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MR)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SE)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MX)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DE)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PV)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MK)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_C1)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_C2)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NR)
                            || input.getString("rptCustCd").equals("P1927")
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IR)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_LB)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_FF)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_GG)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SK)
                            )) {
                    move.setString("moveType", "2");
                    LMultiData moveTypeTemp = iDao.executeQuery("select/om/om02/salesOrd/retrieveRptMoveTypeCd", move);
                    LData arvTemp = null;


                    if(input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                            || ("Y".equals(ART_YN) && input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                    ) {
                        if(moveTypeTemp != null && moveTypeTemp.getDataCount() > 0) {
                            if(moveTypeTemp.getString("custOfCustCd", 0) != null && !moveTypeTemp.getString("custOfCustCd", 0).equals("")) {
                                arvTemp = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdHPOut", move);
                            }
                        }
                    }
                    if(arvTemp != null && arvTemp.getString("arvArCd") != null && !arvTemp.getString("arvArCd").equals("")) {
                        if(moveTypeTemp != null && moveTypeTemp.getDataCount() > 0) {
                            for(int x=0; x < moveTypeTemp.getDataCount(); x++) {
                                if( (moveTypeTemp.getString("arvArCd", x) != null && moveTypeTemp.getString("arvArCd", x).equals("%") )
                                    || arvTemp.getString("arvArCd").equals(moveTypeTemp.getString("arvArCd", x))) {
                                    moveType = new LData();
                                    moveType.setString("moveTypeCd", moveTypeTemp.getString("moveTypeCd", x));
                                    break;
                                }
                            }
                        }
                    } else {
                        if(moveTypeTemp != null && moveTypeTemp.getDataCount() > 0) {
                            moveType = new LData();
                            moveType.setString("moveTypeCd", moveTypeTemp.getString("moveTypeCd", 0));
                        }
                    }
                } else if(input != null && input.getString("rptCustCd") != null
                        && input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC) ) {
                    move.setString("moveType", "2");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdNosOutput", move);
                } else if(input != null && input.getString("rptCustCd") != null
                        && input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_RP) ) {
                    move.setString("moveType", "2");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdLaf", move);
                }else if(input != null && input.getString("rptCustCd") != null
                        && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)) ) {

                    // 단품화 오더유형에 대해 이동유형은 4101로 출고,입고는 동일함
                    if(input.getString("custOrdTypeCd")!= null && input.getString("custOrdTypeCd").equals("0")
                        &&  input.getString("custMoveTypeCd") !=null && input.getString("custMoveTypeCd").equals("09")){
                        input.setString("moveType", "4");
                    }else{
                        input.setString("moveType", "2");

                    }

                    LLog.debug.println("*********************************");
                    LLog.debug.println("********* moveType1 :  =>"+moveType);
                    LLog.debug.println("*********************************");

                }else if(input != null && input.getString("rptCustCd") != null
                        && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_KM)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_GM))
                        ) {
                    move.setString("moveType", "");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdLaf", move);
                }

            } else if(logisSvcSctnCd.equals(OmConstants.WORK_STEP_IN)) { //입고

                if(input != null && input.getString("rptCustCd") != null
                        && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IL)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_BM)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_OD)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CW)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SD)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PS)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CN)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SF)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PE)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_YK)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MG)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DF)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_TS)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MR)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SE)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MX)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DE)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PV)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MK)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_C1)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_C2)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NR)
                            || input.getString("rptCustCd").equals("P1927")
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IR)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_LB)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_FF)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_GG)
                            || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SK)
                ) {
                    move.setString("moveType", "1");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCd", move);

                } else if(input != null && input.getString("rptCustCd") != null
                        && input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC) ) {
                    move.setString("moveType", "1");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdNosInput", move);
                } else if(input != null && input.getString("rptCustCd") != null
                        && input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_RP) ) {
                    move.setString("moveType", "1");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdLaf", move);
                }else if(input != null && input.getString("rptCustCd") != null
                        && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)||input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)) ) {

                    // 단품화 오더유형에 대해 이동유형은 4101로 출고,입고는 동일함
                    if(input.getString("custOrdTypeCd") != null && input.getString("custOrdTypeCd").equals("0")
                        &&  input.getString("custMoveTypeCd") != null && input.getString("custMoveTypeCd").equals("09")){
                        input.setString("moveType", "4");
                    }else{
                        input.setString("moveType", "1");
                    }

                    LLog.debug.println("*********333333************************");

                    if(input.getString("custOrdTypeCd") != null && input.getString("custOrdTypeCd").equals("1")){
                        input.setString("col", "");
                    }
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/getEveMoveTypeCd", input);

                    LLog.debug.println("*********************************");
                    LLog.debug.println("********* moveType2 :  =>"+moveType);
                    LLog.debug.println("*********************************");
                }else if(input != null && input.getString("rptCustCd") != null
                        && (input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_KM)
                                || input.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_GM))
                        ) {
                    move.setString("moveType", "");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdLaf", move);
                }
            }

            if(moveType == null || moveType.getString("moveTypeCd") == null || moveType.getString("moveTypeCd").equals("")) {
                move.setString("dptArTypeCd", dptArTypeCd);
                move.setString("arvArTypeCd", arvArTypeCd);
                if(logisSvcSctnCd.equals(OmConstants.WORK_STEP_OUT)) { //출고
                    move.setString("moveTypeCd", "2");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdCommonOutput", move);
                } else if(logisSvcSctnCd.equals(OmConstants.WORK_STEP_IN)) { //입고
                    move.setString("moveTypeCd", "1");
                    moveType = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveRptMoveTypeCdCommonInput", move);
                }

            }

            if(moveType != null && moveType.getString("moveTypeCd") != null && !moveType.getString("moveTypeCd").equals("")) {
                strMoveType = moveType.getString("moveTypeCd");
            } else {
                if(logisSvcSctnCd.equals(OmConstants.WORK_STEP_OUT)) { //출고
                    strMoveType = OmConstants.MOVE_TYPE_CD_ETC_OUT;
                } else if(logisSvcSctnCd.equals(OmConstants.WORK_STEP_IN)) { //입고
                    strMoveType = OmConstants.MOVE_TYPE_CD_ETC_IN;
                } else {
                    strMoveType = OmConstants.MOVE_TYPE_CD_TRANSFER;
                }
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveMoveType()" + "=>" + be.getMessage());

            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveMoveType()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
        return strMoveType;
    }

    private String getLogisSvcSctnCd(String logisSvcSctnCd) {
        String ret = "";
        if( logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT)
         || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT_TRANS)
         || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_08)
         || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_12)
         || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_18)
         || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_21)
         || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_27)

        ) {
            ret = OmConstants.WORK_STEP_IN;
        } else if( logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_OUTPUT_TRANS_INPUT)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_09)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_10)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_14)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_17)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_19)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_29)   // 입고출고(택배) -- 출고
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_30)
                || logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_31)
        ) {
            ret = OmConstants.WORK_STEP_OUT;
        }

        return ret;
    }

    /** 한솔제지수출오더완료처리 하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LData processHansolpaperExpOrdCmpt(LData inputData, LMultiData multi) throws LException {
        LData retVal = new LData();
        retVal.setString("result", "S");
        retVal.setString("message", "작업이 성공적으로 수행되었습니다.");

        laf.application.dao.LCompoundDao iDao = CompDaoUtil.getTransaction(inputData);
        try {
            LData param = null;
            String progStatCd = "";
            LMultiData cmptSalesOrdList = new LMultiData();
            if(multi != null && multi.getDataCount() > 0) {
                for(int i=0; i < multi.getDataCount(); i++) {
                    progStatCd = multi.getString("col23", i);
                    param = new LData();

                    param.setString("expOrdNo"      , multi.getString("custOrdNo", i));
                    param.setString("custOrdLineNo" , multi.getString("custOrdLineNo", i));
                    param.setString("progStatCd"    , progStatCd);
                    param.setString("mdfrId"        , OmConstants.COMMON_USER);

                    if(progStatCd.equals("5") || progStatCd.equals("6") ){

                        if(progStatCd.equals("5")) {
                            if(OmConstants.CUST_CO_CD_HP.equals(inputData.getString("custCd")) ) {
                                param.setString("ordReasonCd", OmConstants.ORD_REASON_CD_38);
                            }
                            else if( "Y".equals(ART_YN) && OmConstants.CUST_CO_CD_AT.equals(inputData.getString("custCd")) ) {
                                param.setString("ordReasonCd", OmConstants.ORD_REASON_CD_38);
                            } else {
                                param.setString("ordReasonCd", OmConstants.ORD_REASON_CD_72);
                            }
                        } else if(progStatCd.equals("6")) {
                            if(OmConstants.CUST_CO_CD_HP.equals(inputData.getString("custCd")) ) {
                                param.setString("ordReasonCd", OmConstants.ORD_REASON_CD_37);
                            } else if( "Y".equals(ART_YN) && OmConstants.CUST_CO_CD_AT.equals(inputData.getString("custCd")) ) {
                                    param.setString("ordReasonCd", OmConstants.ORD_REASON_CD_38);
                            } else {
                                param.setString("ordReasonCd", OmConstants.ORD_REASON_CD_71);
                            }
                        }

                        iDao.add("cud/om/tb_om02002/updateExpOrdCmpt", param);

                        iDao.executeUpdate();
                    }

                    //고객오더번호와 고객오더라인번호로 완료처리할 S/O목록 조회
                    LMultiData salesOrdList = iDao.executeQuery("select/om/om02/salesOrd/retrieveExpOrdSalesOrdNo", param);
                    LData salesOrd = null;
                    boolean flag = false;
                    if(salesOrdList != null && salesOrdList.getDataCount() > 0) {
                        for(int x=0; x < salesOrdList.getDataCount(); x++) {
                            salesOrd = salesOrdList.getLData(x);
                            if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0) {
                                for(int z=0; z < cmptSalesOrdList.getDataCount(); z++) {
                                    if(salesOrd.getString("salesOrdNo").equals(cmptSalesOrdList.getString("salesOrdNo", z)) ) {
                                        flag = true;
                                        break;
                                    }
                                }
                                if(!flag) {
                                    cmptSalesOrdList.addLData(salesOrd);
                                    flag = false;
                                }
                            } else {
                                cmptSalesOrdList.addLData(salesOrd);
                            }
                        }
                    }
                }

            }
LLog.debug.println("cmptSalesOrdList===>\n" + cmptSalesOrdList);
            if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0) {
                LData salesOrd = null;
                for(int x=0; x < cmptSalesOrdList.getDataCount(); x++) {
                    salesOrd = cmptSalesOrdList.getLData(x);
                    salesOrd.setString("regrId", OmConstants.COMMON_USER);
                    salesOrd.setString("mdfrId", OmConstants.COMMON_USER);

                    salesOrd.set("LCompoundDao", iDao);
                    processSalesOrdCustCmpt(salesOrd);
                }
            }


            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            LMultiData workRouteList = new LMultiData();
            LData temp = null;
            for(int i = 0; i < multi.getDataCount(); i++){
                progStatCd = multi.getString("col23", i);

                if(progStatCd.equals("5") || progStatCd.equals("6") ){
                    param = new LData();
                    param.setString("expOrdNo"      , multi.getString("custOrdNo", i));
                    param.setString("custOrdLineNo" , multi.getString("custOrdLineNo", i));

                    LMultiData itemList = iDao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemExpOrdCmpt", param);
                    LData item = null;
                    if(itemList != null && itemList.getDataCount() > 0) {
                        for(int x=0; x < itemList.getDataCount(); x++) {
                            item = itemList.getLData(x);
                            LMultiData result = iDao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", item);
                            boolean flag = false;
                            if(result != null && result.getDataCount() > 0) {
                                for(int j = 0; j < result.getDataCount(); j++) {
                                    temp = result.getLData(j);
                                    if(workRouteList != null && workRouteList.getDataCount() > 0) {
                                        for(int z=0; z < workRouteList.getDataCount(); z++) {
                                            if(workRouteList != null
                                            && workRouteList.getString("salesOrdNo", z) != null && workRouteList.getString("salesOrdNo", z).equals(temp.getString("salesOrdNo"))
                                            && workRouteList.getString("workRouteSeq", z) != null && workRouteList.getString("workRouteSeq", z).equals(temp.getString("workRouteSeq"))
                                            && workRouteList.getString("lineNo", z) != null && workRouteList.getString("lineNo", z).equals(temp.getString("lineNo"))
                                            ) {
                                                flag = true;
                                                break;
                                            }
                                        }

                                        if(!flag) {
                                            workRouteList.addLData(temp);
                                            flag = false;
                                        }
                                    } else {
                                        workRouteList.addLData(temp);
                                    }
                                }
                            }
                        }
                    }
                }

            }

            LLog.debug.println("workRouteList========>\n" + workRouteList);
            if(workRouteList != null && workRouteList.getDataCount() > 0) {
                for(int j = 0; j < workRouteList.getDataCount(); j++) {
                    LData divData = new LData();
                    divData.set("LCompoundDao", iDao);
                    divData.setString("salesOrdNo"  , workRouteList.getString("salesOrdNo", j));
                    divData.setString("workRouteSeq", workRouteList.getString("workRouteSeq", j));
                    divData.setString("lineNo"      , workRouteList.getString("lineNo", j));
                    divData.setString("regrId"      , OmConstants.COMMON_USER);
                    divData.setString("mdfrId"      , OmConstants.COMMON_USER);
                    pbc.divideEoPartial(divData);
                }
            }

            if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0) {
                LData salesOrd = null;
                for(int x=0; x < cmptSalesOrdList.getDataCount(); x++) {
                    salesOrd = cmptSalesOrdList.getLData(x);
                    salesOrd.setString("regrId", OmConstants.COMMON_USER);
                    salesOrd.setString("mdfrId", OmConstants.COMMON_USER);

                    salesOrd.set("LCompoundDao", iDao);
                    setSalesOrdHistory(salesOrd);
                }
            }
/*
                for(int i=0; i<multi.getDataCount(); i++){

                    param = new LData();
                    param.setString("salesOrdNo"    , salesOrd.getString("salesOrdNo"));
                    param.setString("custOrdLineNo" , multi.getString("custOrdLineNo", i));

                    LData item = iDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdItemFromCustOrd", param);

                    param.setString("lineNo"        , item.getString("lineNo"));
                    LMultiData result = iDao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", param);

                    for(int j=0; result != null && j<result.getDataCount(); j++) {
                        LData divData = new LData();
                        divData.set("LCompoundDao", iDao);
                        divData.setString("salesOrdNo"  , param.getString("salesOrdNo"));
                        divData.setString("workRouteSeq", result.getString("workRouteSeq", j));
                        divData.setString("lineNo"      , param.getString("lineNo"));
                        divData.setString("regrId"      , OmConstants.COMMON_USER);
                        divData.setString("mdfrId"      , OmConstants.COMMON_USER);
                        pbc.divideEoPartial(divData);
                    }
                }           */

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "processHansolpaperExpOrdCmpt()" + "=>" + be.getMessage());

            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "processHansolpaperExpOrdCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
        return retVal;
    }

    /** 오더완료처리 하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LData processOrdCmpt(LData inputData, LMultiData multi) throws LException {
        LData retVal = new LData();
        retVal.setString("result", "S");
        retVal.setString("message", "작업이 성공적으로 수행되었습니다.");

        laf.application.dao.LCompoundDao iDao = CompDaoUtil.getTransaction(inputData);
        try {
            LData param = null;
            String progStatCd = "";
            LMultiData cmptSalesOrdList = new LMultiData();
            if(multi != null && multi.getDataCount() > 0) {
                for(int i=0; i < multi.getDataCount(); i++) {
                    progStatCd = multi.getString("col23", i);
                    param = new LData();

                    param.setString("custOrdNo"     , multi.getString("custOrdNo", i));
                    param.setString("custOrdLineNo" , multi.getString("custOrdLineNo", i));
                    param.setString("progStatCd"    , progStatCd);
                    param.setString("mdfrId"        , OmConstants.COMMON_USER);

                    param.setString("ordReasonCd", OmConstants.ORD_REASON_CD_NSC1);

                    iDao.add("cud/om/tb_om02002/updateOrdCmpt", param);

                    iDao.executeUpdate();

                    //고객오더번호와 고객오더라인번호로 완료처리할 S/O목록 조회
                    LMultiData salesOrdList = iDao.executeQuery("select/om/om02/salesOrd/retrieveMstrOrdSalesOrdNo", param);
                    LData salesOrd = null;
                    boolean flag = false;
                    if(salesOrdList != null && salesOrdList.getDataCount() > 0) {
                        for(int x=0; x < salesOrdList.getDataCount(); x++) {
                            salesOrd = salesOrdList.getLData(x);
                            if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0) {
                                for(int z=0; z < cmptSalesOrdList.getDataCount(); z++) {
                                    if(salesOrd.getString("salesOrdNo").equals(cmptSalesOrdList.getString("salesOrdNo", z)) ) {
                                        flag = true;
                                        break;
                                    }
                                }
                                if(!flag) {
                                    cmptSalesOrdList.addLData(salesOrd);
                                    flag = false;
                                }
                            } else {
                                cmptSalesOrdList.addLData(salesOrd);
                            }
                        }
                    }
                }
            }
LLog.debug.println("cmptSalesOrdList===>\n" + cmptSalesOrdList);
            if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0) {
                LData salesOrd = null;
                for(int x=0; x < cmptSalesOrdList.getDataCount(); x++) {
                    salesOrd = cmptSalesOrdList.getLData(x);
                    salesOrd.setString("regrId", OmConstants.COMMON_USER);
                    salesOrd.setString("mdfrId", OmConstants.COMMON_USER);

                    salesOrd.setString("rptCustCd",inputData.getString("custCd"));

                    salesOrd.set("LCompoundDao", iDao);
                    processSalesOrdCustCmpt(salesOrd);
                }
            }

            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            LMultiData workRouteList = new LMultiData();
            LData temp = null;
            for(int i = 0; i < multi.getDataCount(); i++){

                    param = new LData();
                    param.setString("custOrdNo"     , multi.getString("custOrdNo", i));
                    param.setString("custOrdLineNo" , multi.getString("custOrdLineNo", i));

                    LMultiData itemList = iDao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemOrdCmpt", param);
                    LData item = null;
                    if(itemList != null && itemList.getDataCount() > 0) {
                        for(int x=0; x < itemList.getDataCount(); x++) {
                            item = itemList.getLData(x);
                            LMultiData result = iDao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", item);
                            boolean flag = false;
                            if(result != null && result.getDataCount() > 0) {
                                for(int j = 0; j < result.getDataCount(); j++) {
                                    temp = result.getLData(j);
                                    if(workRouteList != null && workRouteList.getDataCount() > 0) {
                                        for(int z=0; z < workRouteList.getDataCount(); z++) {
                                            if(workRouteList != null
                                            && workRouteList.getString("salesOrdNo", z) != null && workRouteList.getString("salesOrdNo", z).equals(temp.getString("salesOrdNo"))
                                            && workRouteList.getString("workRouteSeq", z) != null && workRouteList.getString("workRouteSeq", z).equals(temp.getString("workRouteSeq"))
                                            && workRouteList.getString("lineNo", z) != null && workRouteList.getString("lineNo", z).equals(temp.getString("lineNo"))
                                            ) {
                                                flag = true;
                                                break;
                                            }
                                        }

                                        if(!flag) {
                                            workRouteList.addLData(temp);
                                            flag = false;
                                        }
                                    } else {
                                        workRouteList.addLData(temp);
                                    }
                                }
                            }
                        }
                    }

            }

            LLog.debug.println("workRouteList========>\n" + workRouteList);
            if(workRouteList != null && workRouteList.getDataCount() > 0) {
                for(int j = 0; j < workRouteList.getDataCount(); j++) {
                    LData divData = new LData();
                    divData.set("LCompoundDao", iDao);
                    divData.setString("salesOrdNo"  , workRouteList.getString("salesOrdNo", j));
                    divData.setString("workRouteSeq", workRouteList.getString("workRouteSeq", j));
                    divData.setString("lineNo"      , workRouteList.getString("lineNo", j));
                    divData.setString("regrId"      , OmConstants.COMMON_USER);
                    divData.setString("mdfrId"      , OmConstants.COMMON_USER);
                    pbc.divideEoPartial(divData);
                }
            }

            if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0) {
                LData salesOrd = null;
                for(int x=0; x < cmptSalesOrdList.getDataCount(); x++) {
                    salesOrd = cmptSalesOrdList.getLData(x);
                    salesOrd.setString("regrId", OmConstants.COMMON_USER);
                    salesOrd.setString("mdfrId", OmConstants.COMMON_USER);

                    salesOrd.set("LCompoundDao", iDao);
                    setSalesOrdHistory(salesOrd);
                }
            }

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "processHansolpaperExpOrdCmpt()" + "=>" + be.getMessage());

            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "processHansolpaperExpOrdCmpt()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
        return retVal;
    }

    public LMultiData createSalesOrdMulti(LMultiData inputData, LMultiData multi) throws LException{
        LMultiData result = new LMultiData();
        LData salesData = null;
        LMultiData salesItemData = null;
        laf.application.dao.LCompoundDao compoundDao = CompDaoUtil.getTransaction(inputData);
        try{
            for(int i=0;i<inputData.getDataCount();i++){
                salesData = inputData.getLData(i);
                String custOrdNo = salesData.getString("custOrdNo");
                String custCd = salesData.getString("custCd");
                salesItemData = new LMultiData();
                for(int j=0;j<multi.getDataCount();j++){
                    if(custOrdNo.equals(multi.getString("custOrdNo", j)) && custCd.equals(multi.getString("custCd", j)))
                        salesItemData.addLData(multi.getLData(j));
                }
                try{
                    salesData.set("LCompoundDao",compoundDao);
                    LData retVal = createSalesOrd(salesData,salesItemData);
                    LData tmp = new LData();
                    tmp.setString("custCd", custCd);
                    tmp.setString("custOrdNo", custOrdNo);
                    tmp.setString("salesOrdNo", retVal.getString("salesOrdNo"));
                    tmp.setString("backOrdYn", retVal.getString("backOrdYn"));
                    tmp.setString("message", "");
                    tmp.setString("result", "S");
                    result.addLData(tmp);

                }catch(LBizException be){
                    LData tmp = new LData();
                    tmp.setString("custCd", custCd);
                    tmp.setString("custOrdNo", custOrdNo);
                    tmp.setString("salesOrdNo", "");
                    tmp.setString("backOrdYn", "");
                    tmp.setString("message", be.getMessage());
                    tmp.setString("result", "E");
                    result.addLData(tmp);
                }
            }

            return result;
        }  catch (Exception se) {
            se.printStackTrace();
            LLog.err.println(  this.getClass().getName() + "." + "createSalesOrdMulti()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }


    /**
     * 수정-내수 분배취소 메소드
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *  실행오더번호
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public void deleteWorkRouteDomSalesOrd(LMultiData inputData) throws LException {
        LMultiData ordData  = (LMultiData)inputData.get("IN_DS1", 0);
        LData input         = (LData)inputData.get("INPUT", 0);
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        try {
            IWorkRouteMngt pbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
            pbc.deleteWorkRoute(inputData);

            LData data = null;
            if(ordData != null && ordData.getDataCount() > 0) {
                for(int i=0; i < ordData.getDataCount() ; i++) {
                    data = ordData.getLData(i);
                    data.setString("backOrdYn", "Y");
                    data.setString("mdfrId", input.getString("mdfrId"));

                    dao.add("cud/om/tb_om02001/changeBackOrdStat", data);
                    dao.executeUpdate();

                }
            }
        }  catch (Exception se) {
            se.printStackTrace();
            LLog.err.println(  this.getClass().getName() + "." + "deleteWorkRouteDomSalesOrd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

    }
    /** [수량 중량 환산]판매오더의 수량 중량을 환산
     *  @param 고객오더, 고객오더아이템리스트
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData changeQtyWgt(LData inputData, LMultiData soMulti)throws LException {
        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);

        //LLog.debug.println("####################leepj1#######################");
        try {
            IConvUnitUtil utilPbc = (IConvUnitUtil)  PbcUtil.getPbc(IConvUnitUtil.class);
            IChecker checker = (IChecker)PbcUtil.getPbc(IChecker.class, 6);
            double orgOrdQty = 0.0;
            double orgOrdWgt = 0.0;
            

            if(soMulti != null && soMulti.getDataCount() > 0) {
                for(int i=0; i < soMulti.getDataCount() ; i++) {
                    soMulti.addString("workFlag", "S");
                    soMulti.addString("workMessage", "");
                    double ordQty = soMulti.getDouble("ordQty", i);
                    double ordWgt = soMulti.getDouble("ordWgt", i);
                    double admt   = soMulti.getDouble("admt", i);
                    
                    orgOrdQty=ordQty;
                    orgOrdWgt=ordWgt;

                    String basisUnitCd = soMulti.getString("basisUnitCd", i);
                    boolean bQtyUnit = false;
                    boolean bWgtUnit = false;
                    boolean bWgtUnit2 = false;

                    LData tempData = new LData();

                    tempData.setString("ptnCd", inputData.getString("rptCustCd"));
                    tempData.setString("itemCd", soMulti.getString("itemCd", i));
                    LData itemMasterData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfoSalesOrd", tempData);
                    //String qtyMUnitCd = itemMasterData.getString("qtyUnitCd");
                    //String wgtMUnitCd = itemMasterData.getString("wgtUnitCd");
                    //기준단위조회
                    LData commCode = new LData();
                    commCode.put("kind", "BASIC_UNIT_CD");
                    commCode.put("code", basisUnitCd);
                    LData basisUnit = dao.executeQueryForSingle("select/pbf/comm/srch/retrievePopupCodeSet", commCode);
                    String basisUnitKind = basisUnit.getString("fltrConts1") == null ? "" : basisUnit.getString("fltrConts1");

                    if(basisUnitKind.equals("")){
                        soMulti.modify("workFlag", i,  "E");
                        soMulti.modify("workMessage", i,  "아이템 마스터 기본단위코드 오류");
                        continue;
                    }

                    if(soMulti.getString("qtyUnitCd", i) == null || soMulti.getString("qtyUnitCd", i).equals("")) {
                        soMulti.modify("qtyUnitCd", i, itemMasterData.getString("qtyUnitCd"));
                    }

                    String qtyUnitCd = soMulti.getString("qtyUnitCd", i);
                    String wgtUnitCd = soMulti.getString("wgtUnitCd", i);

                    //수입인 경우 수량0 중량0 admt 0 경우 작업불가 나머지 처리안함(정상)
                    if(inputData.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_INCOME)){
                        if(ordQty==0 && ordWgt==0 && admt==0){
                            soMulti.modify("workFlag", i,  "E");
                            soMulti.modify("workMessage", i,  "수량중량ADMT 0");
                            continue;
                        }else{
                            continue;
                        }
                    }

                    if(ordQty<0 || ordWgt<0){
                        soMulti.modify("workFlag", i,  "E");
                        soMulti.modify("workMessage", i,  "수량중량 음수값");
                        continue;
                    }else if(ordQty==0 && ordWgt==0
                            && !(inputData.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_EXPORT)
                                 && (inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                                     || ("Y".equals(ART_YN) && inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)))
                                     ) ){
                        soMulti.modify("workFlag",i,  "E");
                        soMulti.modify("workMessage",i,  "수량중량 0");
                        continue;
                    }else if(ordQty==0 && ordWgt==0
                            && inputData.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_EXPORT)
                            &&  (inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                                 || ("Y".equals(ART_YN) && inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)))
                    ){

                        continue;
                    }

                    double netWgt = 0;
                    double pckgQty = 0;
                    if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PG)){
                        netWgt = 0;
                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NS)
                            || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_DF)
                            || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_MX)){//농심, 프론티어, 망고식스일 경우
                        if(itemMasterData.getString("specUnitCd")!= null && qtyUnitCd.equals(itemMasterData.getString("specUnitCd"))){ // 수량단위코드 = spec_unit_cd => gross_wgt
                            netWgt = Double.parseDouble(itemMasterData.getString("grossWgt"));
                        }else{//수량단위코드 <> spec_unit_cd => net_wgt
                            netWgt = Double.parseDouble(itemMasterData.getString("netWgt"));
                        }

                        if(itemMasterData.getString("basisUnitCd")!= null && !qtyUnitCd.equals(itemMasterData.getString("basisUnitCd"))){ // 수량단위코드 <> basis_unit_cd => ord_qty * pack_qty
                            //netWgt = Double.parseDouble(itemMasterData.getString("grossWgt"));
                            pckgQty = ordQty * Double.parseDouble(itemMasterData.getString("pckgQty"));
                        }else{
                            pckgQty = ordQty;
                        }

                        LLog.debug.println("************** pckgQty : "+pckgQty);
                        soMulti.modifyDouble("pckgQty",i,  pckgQty);

                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)){//커피빈 경우
                        pckgQty = ordQty;
                        LLog.debug.println("************** pckgQty : "+pckgQty);

                        soMulti.modifyDouble("pckgQty",i,  pckgQty);
                        netWgt = Double.parseDouble(itemMasterData.getString("netWgt"));
                        
                    }else if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IR) 
                    		|| inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_FF)){//이룸, 바닐라코 경우                        
                    	if(itemMasterData.getString("specUnitCd")!= null && qtyUnitCd.equals(itemMasterData.getString("specUnitCd"))){ // 수량단위코드 = spec_unit_cd
                    		pckgQty = ordQty * Double.parseDouble(itemMasterData.getString("pckgQty"));
                    	}else{
                    		//pckgQty = ordQty;
                    		pckgQty = Double.parseDouble(itemMasterData.getString("pckgQty"));
                    		pckgQty = new BigDecimal(ordQty+"").divide(new BigDecimal(pckgQty+""), 1, BigDecimal.ROUND_HALF_UP).doubleValue();
                    	}
                    	soMulti.modifyDouble("pckgQty",i,  pckgQty);
                    	netWgt = Double.parseDouble(itemMasterData.getString("netWgt"));
                    }else{
                        netWgt = Double.parseDouble(itemMasterData.getString("netWgt"));
                    }

                    if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SC)){
                        continue;
                    }
                    
                    if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HW)){
                        continue;
                    }

                    // (제지 or 전주페이퍼) and (not(수입)) and (기본단위코드==수량) and (newWgt == null or netWgt == 0) 이면 접수오류
                    if(OmConstants.CUST_CO_CD_HP.equals(inputData.getString("rptCustCd")) || OmConstants.CUST_CO_CD_NC.equals(inputData.getString("rptCustCd"))
                        || ("Y".equals(ART_YN) && OmConstants.CUST_CO_CD_AT.equals(inputData.getString("rptCustCd")))
                    ) {
                        if(!OmConstants.EXP_IMP_INCOME.equals(inputData.getString("expImpDomSctnCd"))) {
                            if(itemMasterData != null && itemMasterData.getString("basisUnitCd") != null && !itemMasterData.getString("basisUnitCd").equals("")) {
                                if(OmConstants.BASIC_ATTR_QTY.equals(basisUnitKind)) {

                                    if(itemMasterData != null && itemMasterData.getString("netWgt") == null || Double.parseDouble(itemMasterData.getString("netWgt")) == 0) {
                                        soMulti.modify("workFlag",i,  "E");
                                        soMulti.modify("workMessage",i,  "순중량이 존재하지 않는 아이템코드");
                                        continue;
                                    }
                                }
                            }
                        }
                    }

                    if(OmConstants.CUST_CO_CD_CB.equals(inputData.getString("rptCustCd"))) {
                        if(itemMasterData != null && itemMasterData.getString("netWgt") == null || Double.parseDouble(itemMasterData.getString("netWgt")) == 0) {
                            soMulti.modify("workFlag",i,  "E");
                            soMulti.modify("workMessage",i,  "순중량이 존재하지 않는 아이템코드");
                            continue;
                        }
                    }

                    //LLog.debug.println("###################leepj2########################");

                    //재단물은 수량중량 확산 안한다...2013-01-31
                    /**
                    if( "Y".equals(OmConstants.HPL_USE_YN)
                        && ( inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IL) || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PS))
                        &&  "ZC1".equals(inputData.getString("custOrdTypeCd"))
                        &&  soMulti.getString("col14", i) != null && "Y".equals(soMulti.getString("col14", i))
                      ){
                        LLog.debug.println("###############leepj3############################");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("재단은 계산안한다...");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("###########################################");
                    }
                    else {
                        LLog.debug.println("##################leepj3#########################");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("재단이 아닌경우 계산");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("###########################################");
                        LLog.debug.println("###########################################");
                    **/
                        //홈데코 수량물일 경우
                        if(inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
                            && basisUnitKind.equals("QTY_UNIT_CD")  ){
                        	
                        	
                        	//LLog.debug.println("#######################leepj####################"+OmConstants.CUST_CO_CD_HH);
                        	
                            if(ordQty==0){
                                soMulti.modify("workFlag",i,  "E");
                                soMulti.modify("workMessage",i,  "홈데코수량물 수량 0");
                                continue;
                            }
                            tempData.setString("clasCd", "QTY_UNIT_CD");
                            tempData.setString("comnCd", qtyUnitCd);
                            if(!checker.isExist(tempData)){
                                soMulti.modify("workFlag",i,  "E");
                                soMulti.modify("workMessage",i,  "홈데코수량물 수량단위안맞음");
                                continue;
                            }
                            tempData.setString("input"       , soMulti.getString("ordQty", i));
                            tempData.setString("col"         , "ordQty");
                            LMultiData convData = utilPbc.convUnit(tempData);
                            
                            //LLog.debug.println("#######################leepj####convData################"+convData);
                            
                            
                            if(convData.getDouble("ordCbm", 0) > 0){
                                soMulti.modify("ordWgt", i, convData.get("ordWgt", 0));
                                soMulti.modify("ordCbm", i, convData.get("ordCbm", 0));
                                soMulti.modify("wgtUnitCd", i, convData.get("wgtUnitCd", 0));
                                continue;
                            }else{
                                soMulti.modify("workFlag", i, "E");
                                soMulti.modify("workMessage",i,  "환산에러");
                                continue;
                            }
                        }

                        if(netWgt>0){  //순중량 >0
                            tempData.setString("expImpDomSctnCd", inputData.getString("expImpDomSctnCd"));

                            if(ordQty>0 && ordWgt>0){

                                //단위일치여부
                                tempData.setString("clasCd", "WGT_UNIT_CD");
                                tempData.setString("comnCd", wgtUnitCd);
                                if(checker.isExist(tempData)) bWgtUnit = true;
                                tempData.setString("clasCd", "QTY_UNIT_CD");
                                tempData.setString("comnCd", qtyUnitCd);
                                if(checker.isExist(tempData)) bQtyUnit = true;
                                if(!bQtyUnit){
                                    tempData.setString("clasCd", "WGT_UNIT_CD");
                                    tempData.setString("comnCd", qtyUnitCd);
                                    if(checker.isExist(tempData)) bWgtUnit2 = true;
                                }

                                if(bWgtUnit && bQtyUnit){
                                    //수치환산
                                    if(basisUnitKind.equals("QTY_UNIT_CD")){
                                        tempData.setString("input"       , soMulti.getString("ordQty", i));
                                        tempData.setString("col"         , "ordQty");
                                        LMultiData convData = utilPbc.convUnit(tempData);
                                        if(convData.getDouble("ordWgt", 0) == ordWgt){
                                            continue;
                                        }else{

                                            //재단싸이즈에 대한 환산시 오더중량이 아닌 환산 중량으로 함.
                                            if((inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IL)
                                            || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PS)
                                            && "ZC1".equals(inputData.getString("custOrdTypeCd")))){
                                                soMulti.modify("ordWgt", i, convData.get("ordWgt", 0));
                                            }
                                            else if( inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_BM)
                                                    || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CN)) {
                                            	//2015-11-20 범창및 CNP 유통의 경우 수량, 중량이 모두 있는 경우 중량은 환산중량이 아닌 접수중량으로 처리한다.
                                            	soMulti.modify("ordWgt", i, soMulti.get("ordWgt", i));
                                            }else if( inputData.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_EXPORT) 
                                            		  && (inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP) || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                                            		 ) {
                                            //2016-02-23 제지, 아트원이면서 수출오더인 경우 중량환산 문제가 있는 경우 제지중량으로 처리함. 제지 요청
                                            	soMulti.modify("ordWgt", i, soMulti.get("ordWgt", i));
                                            }else{

                                                soMulti.modify("workFlag", i, "E");
                                                soMulti.modify("workMessage",i,  "환산에러");
                                                LLog.debug.println("111111111111");
                                            }
                                        }
                                    }else{
                                        tempData.setString("input"       , soMulti.getString("ordWgt", i));
                                        tempData.setString("col"         , "ordWgt");
                                        LMultiData convData = utilPbc.convUnit(tempData);
                                        if(convData.getDouble("ordQty", 0) == ordQty){
                                            continue;
                                        }else{
                                            soMulti.modify("workFlag", i, "E");
                                            soMulti.modify("workMessage",i,  "환산에러");
                                            LLog.debug.println("22222222222222");
                                        }
                                    }
                                }else if(bWgtUnit && !bQtyUnit && bWgtUnit2){ //둘다 중량
                                    ordQty = WeightUtil.convertWeight(ordQty, qtyUnitCd, wgtUnitCd);

                                    //수치같은지 체크
                                    if(ordQty == ordWgt ){
                                        tempData.setString("input"       , soMulti.getString("ordWgt", i));
                                        tempData.setString("col"         , "ordWgt");
                                        LMultiData convData = utilPbc.convUnit(tempData);
                                        if(convData.getDouble("ordQty", 0) > 0){
                                            soMulti.modify("ordQty", i, convData.get("ordQty", 0));
                                            soMulti.modify("ordCbm", i, convData.get("ordCbm", 0));
                                            soMulti.modify("qtyUnitCd", i, convData.get("qtyUnitCd", 0));
                                        }else{
                                            soMulti.modify("workFlag", i, "E");
                                            soMulti.modify("workMessage",i,  "환산에러");
                                            LLog.debug.println("3333333333333333");
                                        }
                                    }else{
                                        soMulti.modify("workFlag", i, "E");
                                        soMulti.modify("workMessage",i,  "작업불가:수량중량단위에러");
                                    }
                                }else{ //둘다 수량
                                    soMulti.modify("workFlag", i, "E");
                                    soMulti.modify("workMessage",i,  "작업불가:둘다수량");
                                }

                            }else if(ordQty>0){
                                //단위일치여부
                                tempData.setString("clasCd", "QTY_UNIT_CD");
                                tempData.setString("comnCd", qtyUnitCd);
                                if(checker.isExist(tempData)){
                                    tempData.setString("input"       , soMulti.getString("ordQty", i));
                                    tempData.setString("col"         , "ordQty");
                                    LMultiData convData = utilPbc.convUnit(tempData);
                                    if(convData.getDouble("ordWgt", 0) > 0){
                                        soMulti.modify("ordWgt", i, convData.get("ordWgt", 0));
                                        soMulti.modify("ordCbm", i, convData.get("ordCbm", 0));
                                        soMulti.modify("wgtUnitCd", i, convData.get("wgtUnitCd", 0));
                                    }else{
                                        soMulti.modify("workFlag", i, "E");
                                        soMulti.modify("workMessage",i,  "환산에러");
                                        LLog.debug.println("4444444444444444");
                                    }
                                }else{
                                    soMulti.modify("workFlag", i, "E");
                                    soMulti.modify("workMessage",i,  "작업불가:수량단위에러");
                                }

                            }else if(ordWgt>0){
                                //단위일치여부
                                tempData.setString("clasCd", "WGT_UNIT_CD");
                                tempData.setString("comnCd", wgtUnitCd);
                                if(checker.isExist(tempData)){
                                    tempData.setString("input"       , soMulti.getString("ordWgt", i));
                                    tempData.setString("col"         , "ordWgt");
                                    LMultiData convData = utilPbc.convUnit(tempData);
                                    if(convData.getDouble("ordQty", 0) > ordQty){
                                        soMulti.modify("ordQty", i, convData.get("ordQty"   , 0));
                                        soMulti.modify("ordCbm", i, convData.get("ordCbm", 0));
                                        soMulti.modify("qtyUnitCd", i, convData.get("qtyUnitCd", 0));
                                    }else{
                                        soMulti.modify("workFlag", i, "E");
                                        soMulti.modify("workMessage",i,  "환산에러");
                                        LLog.debug.println("55555555555555555");
                                    }
                                }else{
                                    soMulti.modify("workFlag", i, "E");
                                    soMulti.modify("workMessage",i,  "작업불가:중량단위에러");
                                }
                            }
                        }else{//순중량<=0
                            if(ordQty>0 && ordWgt>0){
                                //단위일치여부
                                tempData.setString("clasCd", "WGT_UNIT_CD");
                                tempData.setString("comnCd", wgtUnitCd);
                                if(checker.isExist(tempData)) bWgtUnit = true;
                                tempData.setString("clasCd", "QTY_UNIT_CD");
                                tempData.setString("comnCd", qtyUnitCd);

                                LLog.debug.println("*************************\n");
                                LLog.debug.println("*************** tempData \n"+tempData);
                                LLog.debug.println("*************************\n");


                                if(checker.isExist(tempData)) bQtyUnit = true;
                                if((bWgtUnit && bQtyUnit) || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PG)){
    //                          if((bWgtUnit && bQtyUnit) ){
                                    continue;
                                }else if(bWgtUnit){
                                    tempData.setString("clasCd", "WGT_UNIT_CD");
                                    tempData.setString("comnCd", qtyUnitCd);
                                    if(checker.isExist(tempData)) bWgtUnit2 = true;
                                    if(bWgtUnit2){
                                        //수치같은지 체크
                                        ordQty = WeightUtil.convertWeight(ordQty, qtyUnitCd, wgtUnitCd);
                                        if(ordQty == ordWgt ){
                                            soMulti.modifyDouble("ordQty", i, 1.0);
                                            if(itemMasterData.getString("qtyUnitCd") == null || "".equals(itemMasterData.getString("qtyUnitCd"))){
                                                soMulti.modify("qtyUnitCd", i, "EA");
                                            } else {
                                                soMulti.modify("qtyUnitCd", i, itemMasterData.getString("qtyUnitCd"));
                                            }
                                        }else{
                                            soMulti.modify("workFlag", i, "E");
                                            soMulti.modify("workMessage",i,  "작업불가:수량중량환산에러");
                                        }
                                    }else{
                                        soMulti.modify("workFlag", i, "E");
                                        soMulti.modify("workMessage",i,  "작업불가:수량중량단위에러");
                                    }
                                }else{
                                    soMulti.modify("workFlag", i, "E");
                                    soMulti.modify("workMessage",i,  "작업불가:수량중량단위에러");
                                }
                            }else if(ordQty==0 && ordWgt>0){
                                //단위일치여부
                                tempData.setString("clasCd", "WGT_UNIT_CD");
                                tempData.setString("comnCd", wgtUnitCd);
                                if(checker.isExist(tempData)) bWgtUnit = true;
                                tempData.setString("clasCd", "QTY_UNIT_CD");
                                tempData.setString("comnCd", qtyUnitCd);
                                if(checker.isExist(tempData)) bQtyUnit = true;
                                if(bWgtUnit && bQtyUnit){
                                    if(basisUnitKind.equals("QTY_UNIT_CD")){
                                        soMulti.modify("workFlag", i, "E");
                                        soMulti.modify("workMessage",i,  "작업불가:수량에러");
                                    }else{
                                        soMulti.modifyDouble("ordQty", i, 1.0);
                                    }
                                }else{
                                    soMulti.modify("workFlag", i, "E");
                                    soMulti.modify("workMessage",i,  "작업불가:수량중량단위에러");
                                }
                            }else if(ordQty>0
                                    && (inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_EV)
                                    || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_SS)		
                                    || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)
                                    || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_LI)
                                    || inputData.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_PG)
                                    )){
                             // 이브자리는 수량값만 전송되고 중량값은 존재하지 않음..    ++ LIG인 경우는 마스터에서 표준중량(순중량)을 1로 처리함.
                            }else{
                                soMulti.modify("workFlag", i, "E");
                                soMulti.modify("workMessage",i,  "작업불가:수량중량값존재하지않음");
                            }
                        } //순중량<=0
                    //}재단품오더 체크로직 다시 제거 2013-02-04
                        
                        
                        if(OmConstants.CUST_CO_CD_HW.equals(inputData.getString("rptCustCd"))) {
                        	soMulti.modifyDouble("ordQty", i, orgOrdQty);
                        	soMulti.modifyDouble("ordWgt", i, orgOrdWgt);
                        }
                }  //for
            }else{
                throw new LBizException("수량중량환산 대상없음");
            }

            for(int i=0; i < soMulti.getDataCount(); i++) {
                if(soMulti.getString("workFlag", i) != null && soMulti.getString("workFlag", i).equals("S")) {
                    double qty = soMulti.getDouble("ordQty", i);
                    LData tempData = new LData();

                    tempData.setString("ptnCd", inputData.getString("rptCustCd"));
                    tempData.setString("itemCd", soMulti.getString("itemCd", i));
                    LData itemMasterData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfoSalesOrd", tempData);

                    //내수이고 Sheet지 이면 소수점2자리까지 인정
                    if(inputData.getString("expImpDomSctnCd") != null && inputData.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_DOMESTIC)) {
                        if(itemMasterData != null && itemMasterData.getString("itemLvl2Cd")!= null && itemMasterData.getString("itemLvl2Cd").equals(OmConstants.PTN_GDS_SCTN_CD_SHEET)) {
                            LLog.debug.println("qty====>" + qty);
                            LLog.debug.println("(qty*100)%1====>" + (float)(qty*100)%1);
                            if((float)(qty*100)%1 > 0) {
                                double convQty = new BigDecimal(qty+"").setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
                                //지류유통인 경우 수량 소수점 3자리 2013-03-15
                                if( OmConstants.HPL_USE_YN.equals("Y")
                                   && ( OmConstants.CUST_CO_CD_IL.equals(inputData.getString("rptCustCd")) || OmConstants.CUST_CO_CD_PS.equals(inputData.getString("rptCustCd")))
                                   ) {
                                    convQty = new BigDecimal(qty+"").setScale(3, BigDecimal.ROUND_DOWN).doubleValue();
                                }
                                LLog.debug.println("convQty====>" + convQty);
                                soMulti.modifyDouble("ordQty", i, convQty);
                            }

                            // 아트원 일경우는 sheet지 일경우 소수2자리 5의 배수 체크제외 + 범창,일진,PNS지류유통 고객사도 제외시킴
                            if( OmConstants.HPL_USE_YN.equals("Y") ) {
                                if(!OmConstants.CUST_CO_CD_AT.equals(inputData.getString("rptCustCd"))
    //                              && !OmConstants.CUST_CO_CD_BM.equals(inputData.getString("rptCustCd"))
                                    && !OmConstants.CUST_CO_CD_IL.equals(inputData.getString("rptCustCd"))
                                    && !OmConstants.CUST_CO_CD_PS.equals(inputData.getString("rptCustCd"))
                                    && !OmConstants.CUST_CO_CD_HP.equals(inputData.getString("rptCustCd"))
                                        && ("ZA".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZB".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZP".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZQ".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZT".equals(inputData.getString("custOrdTypeCd")) // ZT조건 추가요청 2012-12-11(아트원 브랜드통합)
                                                || "ZO".equals(inputData.getString("custOrdTypeCd")) // ZO조건 추가요청 2013-09-27(컨버팅밀입고)
                                            )
                                        //)
                                    ) {
                                    //소수2자리가 5의 배수가 아니면 에러
                                    if(!OmConstants.CUST_CO_CD_IL.equals(inputData.getString("rptCustCd"))
                                        &&  !OmConstants.CUST_CO_CD_PS.equals(inputData.getString("rptCustCd"))){
                                        qty = soMulti.getDouble("ordQty", i);
                                        float fQty = (float)(qty * 10) % 1;
                                        LLog.debug.println("fQty =====>" + fQty);
                                        LLog.debug.println("(float)(fQty * 10) % 5  =====>" + (float)(fQty * 10) % 5 );

                                        if((float)(fQty * 10) % 5 > 0) {
                                            soMulti.modify("workFlag", i, "E");
                                            soMulti.modify("workMessage",i,  "작업불가:수량값 소수점 허용 불일치");
                                        }
                                    }
                                }
                            }
                            else {
                                if(!OmConstants.CUST_CO_CD_AT.equals(inputData.getString("rptCustCd"))
    //                              && !OmConstants.CUST_CO_CD_BM.equals(inputData.getString("rptCustCd"))
    //                              && !OmConstants.CUST_CO_CD_IL.equals(inputData.getString("rptCustCd"))
    //                              && !OmConstants.CUST_CO_CD_PS.equals(inputData.getString("rptCustCd"))
                                    && !OmConstants.CUST_CO_CD_HP.equals(inputData.getString("rptCustCd"))
                                        && ("ZA".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZB".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZP".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZQ".equals(inputData.getString("custOrdTypeCd"))
                                                || "ZT".equals(inputData.getString("custOrdTypeCd")) // ZT조건 추가요청 2012-12-11(아트원 브랜드통합)
                                            )
                                        //)
                                    ) {
                                    //소수2자리가 5의 배수가 아니면 에러
                                    if(!OmConstants.CUST_CO_CD_IL.equals(inputData.getString("rptCustCd"))
                                            &&  !OmConstants.CUST_CO_CD_PS.equals(inputData.getString("rptCustCd"))){
                                        qty = soMulti.getDouble("ordQty", i);
                                        float fQty = (float)(qty * 10) % 1;
                                        LLog.debug.println("fQty =====>" + fQty);
                                        LLog.debug.println("(float)(fQty * 10) % 5  =====>" + (float)(fQty * 10) % 5 );

                                        if((float)(fQty * 10) % 5 > 0) {
                                            soMulti.modify("workFlag", i, "E");
                                            soMulti.modify("workMessage",i,  "작업불가:수량값 소수점 허용 불일치");
                                        }
                                    }
                                }
                            }
                        } else {
                            //sheet지가 아니면 소수점 사용불가
                            LLog.debug.println("qty%1====>" + qty%1);
                            if(qty%1 > 0) {
                                soMulti.modify("workFlag", i, "E");
                                soMulti.modify("workMessage",i,  "작업불가:수량값소수점사용불가");
                            }
                        }

                        /**
                        if( soMulti.getString("workFlag", i).equals("E") ) {
                            if( OmConstants.CUST_CO_CD_HP.equals(inputData.getString("rptCustCd"))
                                && "DOPO".equals(inputData.getString("custOrdTypeCd")) ) {
                                soMulti.modify("workFlag", i, "Y");
                                soMulti.modify("workMessage",i,  "");
                            }
                        }**/
                    }
 
                }

            }

            //LLog.debug.println("soMulti===>"+soMulti);
            return soMulti;
        } catch (LBizException be) {
            throw be;
        }  catch (Exception se) {
            se.printStackTrace();
            LLog.err.println(  this.getClass().getName() + "." + "changeQtyWgt()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

    }
    /** [판매오더생성잔여작업]
     *  @param 판매오더, 판매오더아이템리스트
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LData createSalesOrdRest(LData salesOrd, LMultiData salesOrdItem) throws LException {
        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(salesOrd);
        //LMultiData dataHolder = new LMultiData();
        try {
            LData tempData = new LData();

            LData ordTypeData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdTypeSalesOrd", salesOrd);
            tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));

            LData ptnMasterData             = dao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnInfoDtlSalesOrd", tempData);
            String availStockConfYn         = ordTypeData.getString("availStockConfYn"); //가용재고확인여부
            String masterAvailStockConfYn   = ptnMasterData.getString("availStockConfYn") == null ? "N" : ptnMasterData.getString("availStockConfYn");//가용재고확인여부 파트너마스터
            String logisSvcSctnCd           = ordTypeData.getString("logisSvcSctnCd");//물류서비스구분
            String expImpDomSctnCd          = ordTypeData.getString("expImpDomSctnCd");//수출입내수구분
            String ordKindCd                = ordTypeData.getString("ordKindCd"); //오더종류코드
            salesOrd.setString("expImpDomSctnCd", expImpDomSctnCd);

            String logisArCd = ordTypeData.getString("logisArCd"); //물류지역구분
            salesOrd.setString("backOrdYn","N");

            /* 13. 가용재고확인 (가용재고확인여부가 'Y'인 경우에만 실행함.)
                아이템단위로 개별로 가용재고를 확인 (아이템마스터의 기본단위로 비교함)
                창고코드 - 출고작업장코드, 고객코드 - 계약고객코드, 아이템코드, 배치번호, 단위코드(아이템마스터에 있는 기본단위), 아이템등급코드
                기본단위가 수량단위(기본단위의 필터1)이면 오더수량과 비교, 중량이면 중량과 비교, 부피단위이면 CBM과 비교
                가용재고가 부족한 라인아이템이 하나라도 있으면 대기오더여부를 'Y'로 세팅.
             */

            //납기보류코드가 'ZZ'이 아닌경우 대기오더여부 'Y'
            String aptdDlyCd = salesOrd.getString("aptdDlyCd");
            if(!aptdDlyCd.equals("ZZ") && !aptdDlyCd.trim().equals(""))
                salesOrd.setString("backOrdYn","Y");

            //제지 고객오더유형이 DOGC인 경우  분배된 경우는 기존처럼 처리하고 미분배된 경우 분배대기상태로 처리한다.
            if( (OmConstants.CUST_CO_CD_HP.equals(salesOrd.getString("rptCustCd"))
                    || ("Y".equals(ART_YN) && salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
            ) &&
               OmConstants.CUST_ORD_TYPE_DOGC.equals(salesOrd.getString("custOrdTypeCd"))) {
                LData workRoute             = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteList", salesOrd);
                // 작업경로가 생성되지 않은 경우 (신규나 분배대기인 경우)
                if(workRoute.getString("salesOrdNo") == null || "".equals(workRoute.getString("salesOrdNo"))) {
                    salesOrd.setString("backOrdYn","Y");
                }
            }

            int cbnAvailCnt1 = 0; // 정상건수(커피빈)
            int cbnAvailCnt2 = 0; // 가용부족건수(커피빈)
            for(int i = 0;i<salesOrdItem.getDataCount();i++){
                cbnAvailCnt1 = cbnAvailCnt1 + 1;

                if((availStockConfYn.equals("Y") && masterAvailStockConfYn.equals("Y"))
                    || (salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH) &&
                            (salesOrd.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_2041)
                                    || salesOrd.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_2043)
                        ))){

                    double ordQty = 0;
                    double ordWgt = 0;
                    double ordCbm = 0;
                    boolean itemCdCheck  = false;
                    boolean batNoCheck   = false;
                    boolean pculCdCheck  = false;
                    boolean mnCdCheck    = false;
                    boolean dptArCdCheck = false;
                    boolean plantCdCheck = false;
                    String itemCdOld    = "";
                    String batNoOld     = "";
                    String pculCdOld    = "";
                    String mnCdOld      = "";
                    String dptArCdOld   = "";
                    String plantCdOld   = "";

                    if(salesOrdItem.containsKey("itemCdOld")) {
                        itemCdOld = salesOrdItem.getString("itemCdOld", i);
                        if(itemCdOld.equals(salesOrdItem.getString("itemCd", i))) {
                            itemCdCheck = true;
                        } else {
                            itemCdCheck = false;
                        }
                    } else {
                        itemCdCheck = true;
                    }
                    if(salesOrdItem.containsKey("batNoOld")) {
                        batNoOld = salesOrdItem.getString("batNoOld", i);
                        if(batNoOld.equals(salesOrdItem.getString("batNo", i))) {
                            batNoCheck = true;
                        } else {
                            batNoCheck = false;
                        }
                    } else {
                        batNoCheck = true;
                    }

                    if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                        if(salesOrdItem.containsKey("pculCdOld")) {
                            pculCdOld = salesOrdItem.getString("pculCdOld", i);
                            if(pculCdOld.equals(salesOrdItem.getString("pculCd", i))) {
                                pculCdCheck = true;
                            } else {
                                pculCdCheck = false;
                            }
                        } else {
                            pculCdCheck = true;
                        }
                        if(salesOrdItem.containsKey("mnCdOld")) {
                            mnCdOld = salesOrdItem.getString("mnCdOld", i);
                            if(mnCdOld.equals(salesOrdItem.getString("mnCd", i))) {
                                mnCdCheck = true;
                            } else {
                                mnCdCheck = false;
                            }
                        } else {
                            mnCdCheck = true;
                        }
                    } else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                        if(salesOrdItem.containsKey("plantCdOld")) {
                            plantCdOld = salesOrdItem.getString("plantCdOld", i);
                            if(plantCdOld.equals(salesOrdItem.getString("plantCd", i))) {
                                plantCdCheck = true;
                            } else {
                                plantCdCheck = false;
                            }
                        } else {
                            plantCdCheck = true;
                        }
                    }
                    if(salesOrdItem.containsKey("dptArCdOld")) {
                        dptArCdOld = salesOrdItem.getString("dptArCdOld", i);
                        if(dptArCdOld.equals(salesOrdItem.getString("dptArCd", i))) {
                            dptArCdCheck = true;
                        } else {
                            dptArCdCheck = false;
                        }
                    } else {
                        dptArCdCheck = true;
                    }

                    if(salesOrdItem.containsKey("ordQtyOld")){
                        if(itemCdCheck && batNoCheck && dptArCdCheck) {//아이템코드와 배치번호가 변경된것이 없으면
                            if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                                if(pculCdCheck && mnCdCheck) {//노스케 특성/호기가 변경된것이 없으면
                                    ordQty = salesOrdItem.getDouble("ordQty",i) - salesOrdItem.getDouble("ordQtyOld",i);
                                    ordWgt = salesOrdItem.getDouble("ordWgt",i) - salesOrdItem.getDouble("ordWgtOld",i);
                                    ordCbm = salesOrdItem.getDouble("ordCbm",i) - salesOrdItem.getDouble("ordCbmOld",i);
                                } else {
                                    ordQty = salesOrdItem.getDouble("ordQty",i);
                                    ordWgt = salesOrdItem.getDouble("ordWgt",i);
                                    ordCbm = salesOrdItem.getDouble("ordCbm",i);
                                }
                            } else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                                if(plantCdCheck) {//라파즈 생산처코드가 변경되지 않았으면
                                    ordQty = salesOrdItem.getDouble("ordQty",i) - salesOrdItem.getDouble("ordQtyOld",i);
                                    ordWgt = salesOrdItem.getDouble("ordWgt",i) - salesOrdItem.getDouble("ordWgtOld",i);
                                    ordCbm = salesOrdItem.getDouble("ordCbm",i) - salesOrdItem.getDouble("ordCbmOld",i);
                                } else {
                                    ordQty = salesOrdItem.getDouble("ordQty",i);
                                    ordWgt = salesOrdItem.getDouble("ordWgt",i);
                                    ordCbm = salesOrdItem.getDouble("ordCbm",i);
                                }
                            } else {
                                ordQty = salesOrdItem.getDouble("ordQty",i) -
                                         salesOrdItem.getDouble("ordQtyOld",i);
                                ordWgt = salesOrdItem.getDouble("ordWgt",i) - salesOrdItem.getDouble("ordWgtOld",i);
                                ordCbm = salesOrdItem.getDouble("ordCbm",i) - salesOrdItem.getDouble("ordCbmOld",i);
                            }
                        } else {
                            ordQty = salesOrdItem.getDouble("ordQty",i);
                            ordWgt = salesOrdItem.getDouble("ordWgt",i);
                            ordCbm = salesOrdItem.getDouble("ordCbm",i);
                        }
                    }else{
                        ordQty = salesOrdItem.getDouble("ordQty",i);
                        ordWgt = salesOrdItem.getDouble("ordWgt",i);
                        ordCbm = salesOrdItem.getDouble("ordCbm",i);
                    }
//
                    if(itemCdCheck && batNoCheck && dptArCdCheck) {
                        if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                            if(pculCdCheck && mnCdCheck) {
                                if(!(ordQty>0 || ordWgt>0 || ordCbm>0)) continue;
                            }
                        } else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                            if(plantCdCheck) {
                                if(!(ordQty>0 || ordWgt>0 || ordCbm>0)) continue;
                            }
                        } else {
                            if(!(ordQty>0 || ordWgt>0 || ordCbm>0)) continue;
                        }
                    }

                    tempData.setString("workPlCd", salesOrd.getString("dptArCd"));
                    tempData.setString("custCd", salesOrdItem.getString("custCd", i));
                    tempData.setString("itemCd", salesOrdItem.getString("basisItemCd", i));
//                  if(salesOrdItem.containsKey("batNo")) {
//                      if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_HP)) {//한솔제지인 경우 BAT_CD를 안넘긴다.
//                          tempData.setString("batCd", "");
//                      } else {
//                          tempData.setString("batCd", salesOrdItem.getString("batNo", i));
//                      }
//                  }
                    tempData.setString("batCd", salesOrdItem.getString("batNo", i));

                    //tempData.setString("qtyUnitCd", salesOrdItem.getString("basisUnitCd", i));
                    if(salesOrdItem.containsKey("itemGradeCd"))
                        tempData.setString("itemGradeCd", salesOrdItem.getString("itemGradeCd", i));

                    if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                        tempData.setString("pculCd" , salesOrdItem.getString("pculCd", i));
                        tempData.setString("mnCd"   , salesOrdItem.getString("mnCd", i));
                    }else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                        tempData.setString("plantCd", salesOrdItem.getString("plantCd", i));
                    }else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_CB)) {
                        String col03 = salesOrdItem.getString("col03",i)==null?"":salesOrdItem.getString("col03",i);
                        tempData.setString("itemGradeCd", col03);
                        String col01 = salesOrdItem.getString("col01",i)==null?"":salesOrdItem.getString("col01",i);
                        tempData.setString("col01", col01);
                    }else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_SD)) {
                        tempData.setString("lotNo"  , salesOrdItem.getString("lotNo", i));
                    }else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_MR)) {
                        String custMoveTypeCd = salesOrd.getString("custMoveTypeCd")==null?"":salesOrd.getString("custMoveTypeCd");
                        String lotable5 = "";
                        if("GR_VMI".equals(custMoveTypeCd)){
                            lotable5 = "VMI";
                        }else if ("GR_STOCK".equals(custMoveTypeCd)){
                            lotable5 = "STOCK";
                        }else{
                            lotable5 = "TR";
                        }
                        tempData.setString("lotable5"   , lotable5);
                    }

                    // 적용 고객오더유형 : DOOR , DLOR => 가용재고 +1KG : 고객오더유형코드를 넘겨줌
                    tempData.setString("custOrdTypeCd", salesOrd.getString("custOrdTypeCd"));

                    /**
                    LLog.debug.println("#######################################");
                    LLog.debug.println("###############LEEPJ########################");
                    LLog.debug.println("#######################################");
                    LLog.debug.println("########################"+salesOrdItem);
                    LLog.debug.println("#######################################");
                    LLog.debug.println("#######################################");
                    LLog.debug.println("#######################################");
                    **/

                    // 이브자리 오더유형  301, 305 가용재고 체크 안함 => 다시 가용재고 체크하기로 함(305) : 09.15
                    if((salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_EV) || salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_SS))
                        && ("3".equals(salesOrd.getString("custOrdTypeCd")))
                        && ("01".equals(salesOrd.getString("custMoveTypeCd")))
//                          || "05".equals(salesOrd.getString("custMoveTypeCd")))
                        ) {

                        salesOrd.setString("backOrdYn","N");

                    // 가용재고 체크 skip - Cross-docking 오더번호
                    } else  if( ("N".equals(OmConstants.INH_YN) && salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_AT))
                        && salesOrd.getString("col11")!=null && !"".equals(salesOrd.getString("col11"))
                        && "Y".equals(salesOrd.getString("col11"))){
                            salesOrd.setString("backOrdYn","N");

                    // 가용재고 체크 skip - 제지 생산입고 받아서 바로 출고하는 자동출고오더.
                    } else  if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_HP)
                        && ("DOBQ".equals(salesOrd.getString("custOrdTypeCd"))
                            || "EDOM".equals(salesOrd.getString("custOrdTypeCd"))
                            || "DOZO".equals(salesOrd.getString("custOrdTypeCd")))
                            ) {
                            salesOrd.setString("backOrdYn","N");
                    //아트원 roll-out 직납프로세스
                    } else  if( "Y".equals(OmConstants.INH_YN) && salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_HP)
                            && "DOPX".equals(salesOrd.getString("custOrdTypeCd"))
                                ) {
                                salesOrd.setString("backOrdYn","N");

                    } else  if( ("Y".equals(ART_YN) && salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_AT))
                            && ("DOBQ".equals(salesOrd.getString("custOrdTypeCd"))
                                || "EDOM".equals(salesOrd.getString("custOrdTypeCd"))
                                || "DOZO".equals(salesOrd.getString("custOrdTypeCd"))
                                || "DOPX".equals(salesOrd.getString("custOrdTypeCd")) //교차직납 오더 추가 2013-11-07
                                )
                                ) {
                                salesOrd.setString("backOrdYn","N");

                    // 가용재고 체크 skip - 지류유통 재단오더인 경우 가용재고 체크안함. ZDS, ZTD2 2012-12-05 ZC2 2012-12-28
                    // 지류유통 재단오더인 경우 가용재고 체크함. ZDS, ZTD2 2012-01-09
                    } else if( "Y".equals(OmConstants.HPL_USE_YN )
                        && ( salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_IL ) || salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_PS ) )
                        //&& "ZC2".equals(salesOrd.getString("custOrdTypeCd") )
                        && ( //"ZDS".equals(salesOrd.getString("custOrdTypeCd"))
                             //|| "ZTD2".equals(salesOrd.getString("custOrdTypeCd"))
                             //"ZC2".equals(salesOrd.getString("custOrdTypeCd")) ||
                             ( "ZC1".equals(salesOrd.getString("custOrdTypeCd")) && salesOrdItem.getString("col14", i) != null && "Y".equals(salesOrdItem.getString("col14", i)) )
                           )
                        ) {
                        salesOrd.setString("backOrdYn","N");
                        // 2014-08-18  pwo 추가 papertec
                    } else if (salesOrdItem.getString("custCd", i).equals("P1927"))
                    {
                    	salesOrd.setString("backOrdYn","N");

                    	//여신체크 초과 시 에는 이부분에 backOrdYn 을 Y로 변경해준다. 20140905  pwo
                    	if( salesOrd.getString("col18").equals("Y"))
                    	{
                    		salesOrd.setString("backOrdYn","Y");
                    	}
                    } else if (salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_HH) 
                    		   && "ZE01".equals(salesOrd.getString("custOrdTypeCd")) ) {
                    	//홈데코 'ZE01' 가용재고 체크 안함. 2015-03-26
                    	salesOrd.setString("backOrdYn","N");
                    }else{
                    	LMultiData availStockData = retrieveAvailStock(tempData);
                        LLog.debug.println("availStockData **************############### :"+availStockData);

                        if(availStockData.getString("basisUnitAttr",0)==null || availStockData.getString("basisUnitAttr",0).equals("")){
                            //salesOrd.setString("backOrdYn","Y");
                            if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_CB)){
                                cbnAvailCnt2 = cbnAvailCnt2 + 1;
                                salesOrdItem.modify("ordReasonCd", i, "04");//재고부족
                                dao.add("cud/om/tb_om02002/updateOrdReasonCd", salesOrdItem.getLData(i));
                                dao.executeUpdate();
                            }else{
                                salesOrd.setString("backOrdYn","Y");
                            }

                            //LLog.debug.println("availStockData ******가용재고 체크 커피빈salesOrdItem***############### :"+salesOrdItem.getLData(i));

                        }else if(availStockData.getString("basisUnitAttr",0).equals("QTY_UNIT_CD")){
                            if(availStockData.getDouble("availStock", 0)< ordQty){
                                //salesOrd.setString("backOrdYn","Y");
                                LLog.debug.println("availStockData ******가용재고 체크 커피빈***############### :");

                                if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_CB)){
                                    cbnAvailCnt2 = cbnAvailCnt2 + 1;
                                    salesOrdItem.modify("ordReasonCd", i, "04");//재고부족

                                    dao.add("cud/om/tb_om02002/updateOrdReasonCd", salesOrdItem.getLData(i));
                                    dao.executeUpdate();
                                }else{
                                    salesOrd.setString("backOrdYn","Y");
                                }
                                //LLog.debug.println("availStockData ******가용재고 체크 커피빈salesOrdItem***############### :"+salesOrdItem.getLData(i));
                            }
                        }else if(availStockData.getString("basisUnitAttr",0).equals("WGT_UNIT_CD")){
                            // 허용규칙 : 고객오더량이 가용재고량 보다 1KG이내로 많을 경우에도 오더를 자동분배
                            // 적용 고객오더유형 : DOOR , DLOR
    //                      if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_HP)
    //                          && ("DOORRRR".equals(salesOrd.getString("custOrdTypeCd")) || "DLORRRR".equals(salesOrd.getString("custOrdTypeCd"))) ){
    //
    //                          double availStockTemp = availStockData.getDouble("availStock", 0);
    //                          if(availStockTemp > 0){
    //                              availStockTemp = availStockTemp + 1;
    //                          }
    //
    //                          if(availStockTemp < ordWgt) salesOrd.setString("backOrdYn","Y");
    //
    //                      }else{
    //                          if(availStockData.getDouble("availStock", 0)< ordWgt)
    //                              salesOrd.setString("backOrdYn","Y");
    //                      }

                            if(availStockData.getDouble("availStock", 0)< ordWgt)
                                salesOrd.setString("backOrdYn","Y");

                        }else if(availStockData.getString("basisUnitAttr",0).equals("VOL_UNIT_CD")){
                            if(availStockData.getDouble("availStock", 0)< ordCbm)
                                salesOrd.setString("backOrdYn","Y");
                        }
                    }
                }
            }

            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)){
                if(cbnAvailCnt2 > 0 ){ // 가용재고부족이 하나이상 부족인 경우
                    if( cbnAvailCnt1 != cbnAvailCnt2){ // 중간 아이템이 부족인게 있으면 대기오더 아님
                        salesOrd.setString("backOrdYn","N");
                    }else salesOrd.setString("backOrdYn","Y"); // 모든 아이템이  부족이면 대기오더
                }
            }
            
            //작업경로 삭제
            LData paramData = new LData();
            paramData.setString("salesOrdNo", salesOrd.getString("salesOrdNo"));
            paramData.setString("regrId"    , salesOrd.getString("regrId"));
            paramData.setString("mdfrId"    , salesOrd.getString("mdfrId"));

            LMultiData itemData = dao.executeQuery("select/om/om03/workRouteMngt/retrieveDivWorkRouetList", paramData);
/*
            if((salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)) &&
                    (itemData == null || itemData.getDataCount() == 0)){
                throw new LBizException("확정이후 수정할 수 없습니다");
            }
*/
            LData workRouteCnt = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteByDomCount", paramData);
            if(workRouteCnt != null && workRouteCnt.getInt("cnt") > 0) {
                //리턴 취소불가메세지
                throw new LBizException("확정이후 수정할 수 없습니다 : [" + paramData.getString("salesOrdNo")+"]");
            }

            if(itemData != null && itemData.getDataCount() > 0) {
                LMultiData params = new LMultiData();
                params.add("IN_DS1" , itemData);
                params.add("INPUT"  , paramData);
                IWorkRouteMngt workPbc = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
                CompDaoUtil.deliverLCompoundDao(salesOrd, params);
                workPbc.deleteWorkRoute(params);

                //작업경로 삭제시 컨테이너 확정정보도 취소처리 한다.(수출오더를 배닝으로 분배한  경우 삭제 되지 않는 문제해결을 위해)
                LData itemParam = null;
                for(int x=0; x < itemData.getDataCount(); x++) {
                    itemParam = itemData.getLData(x);
                    itemParam.setString("dcsnYn", "N");
                    itemParam.setString("mdfrId", salesOrd.getString("mdfrId"));

                    dao.add("cud/om/tb_om02016/deleteCntrDcsnYn", itemParam);
                }
                dao.executeUpdate();
            }

            if(salesOrdItem.getDataCount() == 0) return tempData;

            LLog.debug.println("salesOrd **************############### :"+salesOrd);
            LLog.debug.println("logisSvcSctnCd **************############### :"+logisSvcSctnCd);
            //분배허용 여부
            String createWorkRouteYn = "Y";
            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HP)
                    || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_NC)
                    || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
                    || salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT)){
                //물류서비스구분이 입고/운송입고 이고 이동유형이 상품입고/외주가공입고 인경우 or 오더종류가 반품인 경우
                //2014-11-13 홈데코는 상품입고, 외주가공입고는 파렛트 체크안함. CHG0026767 홈데코는 반품종류일 때만 체크
                if(!salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH) && logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT )
                    &&  ( (salesOrd.getString("moveTypeCd").equals(OmConstants.MOVE_TYPE_CD_PROD_IN)
                            || salesOrd.getString("moveTypeCd").equals(OmConstants.MOVE_TYPE_CD_1302)
                            || salesOrd.getString("moveTypeCd").equals(OmConstants.MOVE_TYPE_CD_1303) )
                            || ordKindCd.equals("02") )
                    &&  !"1033".equals(salesOrd.getString("ordTypeCd")) // 반품운송입고아닌경우
                    ){
                    createWorkRouteYn = "T";
                    for(int i = 0;i<salesOrdItem.getDataCount("salesOrdNo");i++){
                        if(salesOrdItem.getDouble("palletQty", i)<1){
                            tempData.setString("ptnCd", salesOrdItem.getString("custCd", i));
                            tempData.setString("itemCd", salesOrdItem.getString("itemCd", i));
                            LData itemMasterData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfoSalesOrd", tempData);
                            LLog.debug.println("itemMasterData **************############### :"+itemMasterData);
                            if(itemMasterData != null && !itemMasterData.isEmpty()){
                                String itemLvl2Cd = itemMasterData.getString("itemLvl2Cd");
                                if(!itemLvl2Cd.equals(OmConstants.PTN_GDS_SCTN_CD_ROLL)) createWorkRouteYn = "N";
                            }
                        }
	                }
                }
                //2014-11-13 홈데코는 상품입고, 외주가공입고는 파렛트 체크안함. CHG0026767 홈데코는 반품종류일 때만 체크
                else if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH) && logisSvcSctnCd.equals(OmConstants.LOGIS_SVC_SCTN_CD_INPUT )
                    &&  ordKindCd.equals("02")
                    &&  !("1033".equals(salesOrd.getString("ordTypeCd"))|| "1029".equals(salesOrd.getString("ordTypeCd"))) // 반품운송입고아닌경우 , 반품입고인경우 추가(2015-02-03)
                    ){
                    createWorkRouteYn = "T";
                    for(int i = 0;i<salesOrdItem.getDataCount("salesOrdNo");i++){
                        if(salesOrdItem.getDouble("palletQty", i)<1){
                            tempData.setString("ptnCd", salesOrdItem.getString("custCd", i));
                            tempData.setString("itemCd", salesOrdItem.getString("itemCd", i));
                            LData itemMasterData = dao.executeQueryForSingle("select/ma/ma01/itemInfoMngt/retrieveItemInfoSalesOrd", tempData);
                            LLog.debug.println("itemMasterData **************############### :"+itemMasterData);
                            if(itemMasterData != null && !itemMasterData.isEmpty()){
                                String itemLvl2Cd = itemMasterData.getString("itemLvl2Cd");
                                if(!itemLvl2Cd.equals(OmConstants.PTN_GDS_SCTN_CD_ROLL)) createWorkRouteYn = "N";
                            }
                        }
	                }
                }
            }
            
            LLog.debug.println("createWorkRouteYn **************############### :"+createWorkRouteYn);
            LLog.debug.println("backOrdYn **************############### :"+salesOrd.getString("backOrdYn"));
            
            for(int i = 0;i<salesOrdItem.getDataCount("salesOrdNo");i++){
                salesOrdItem.addString("saveData", "N");
            }

                /* 19. 작업경로생성 오퍼레이션 호출
                    수출입내수구분이 '03'이고 대기오더여부가 'Y'가 아니면 작업경로 생성함.
                    예외)한솔홈데코이면서 2043(국내수출판매정상출고운송)이면 경로생성함.
                    작업정보관리유형이 '01'이면 헤더의 모든 아이템을 하나의 작업경로로 생성함. 헤더 정보 사용.

                    작업정보관리유형이 '02'이면
                    작업경로에 들어갈 정보가 같은 아이템별로 grouping하여 그룹별로 하나 씩 작업경로를 생성함.
                 */
            if(createWorkRouteYn.equals("Y") || createWorkRouteYn.equals("T")){
                if((salesOrd.getString("expImpDomSctnCd").equals(OmConstants.EXP_IMP_DOMESTIC)
                        && !salesOrd.getString("backOrdYn").equals("Y"))
                || ( salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
                        && logisArCd.equals("2")
                        && !salesOrd.getString("backOrdYn").equals("Y")  )  
                || ( salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HW)
                        && "GZ".equals(salesOrd.getString("custOrdTypeCd"))
                        && !salesOrd.getString("backOrdYn").equals("Y")  )        
                        ){
                    IWorkRouteMngt pbc2     = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);

                    if( createWorkRouteYn.equals("T")){
                        //아이템 개별 작업경로 생성
                        LMultiData saveWorkRoute = new LMultiData();
                        for(int i = 0;i<salesOrdItem.getDataCount();i++){
                            saveWorkRoute = new LMultiData();

                            LData header = salesOrdItem.getLData(i);
                            header.set("LCompoundDao", dao);
                            saveWorkRoute.addLData(header);

                            pbc2.createBasisWorkRoute(header, saveWorkRoute);
                        }//
                    }else if(salesOrd.getString("workInfoMngtTypeCd").equals("01")){
            //          작업경로 생성.
                        salesOrd.set("LCompoundDao", dao);
                        pbc2.createBasisWorkRoute(salesOrd, salesOrdItem);
                    }else{
                        if(salesOrdItem.getDataCount()<=1){
                            LData header = salesOrdItem.getLData(0);
                            header.set("LCompoundDao", dao);
                            pbc2.createBasisWorkRoute(header, salesOrdItem);
                        }else{

                            //아이템 그룹별 작업경로 생성
                            LMultiData saveWorkRoute = new LMultiData();
                            for(int i = 0;i<salesOrdItem.getDataCount();i++){
                                //saveWorkRoute.clear();
                                saveWorkRoute = new LMultiData();
                                if(salesOrdItem.getString("saveData", i).equals("N")){
                                    saveWorkRoute.addLData(salesOrdItem.getLData(i));
                                    salesOrdItem.modify("saveData", i, "Y");
                                }else continue;
                                for(int j = i+1;j<salesOrdItem.getDataCount();j++){
                                    if(salesOrdItem.getString("saveData", j).equals("N")){
                                    	//홈데코 ZE01은 납기예정일자로 체크하지 않음. 2015-04-06
                                    	if( salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH)
                                    	    && "ZE01".equals(salesOrd.getString("custOrdTypeCd")) ) {
	                                    	if(StringUtil.isNull(salesOrdItem.getString("dptArCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArCd", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("dptArZipCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArZipCd", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("dptArZipAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArZipAddr", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("dptArDtlAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArDtlAddr", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("arvArCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArCd", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("arvArZipCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArZipCd", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("arvArZipAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArZipAddr", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("arvArDtlAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArDtlAddr", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("strtReqYmd", i)).equals(StringUtil.isNull(salesOrdItem.getString("strtReqYmd", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("strtReqHm", i)).equals(StringUtil.isNull(salesOrdItem.getString("strtReqHm", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("clsExprYn", i)).equals(StringUtil.isNull(salesOrdItem.getString("clsExprYn", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("leadTimeExprYn", i)).equals(StringUtil.isNull(salesOrdItem.getString("leadTimeExprYn", j)))
	                                          && StringUtil.isNull(salesOrdItem.getString("ltrmOrdYn", i)).equals(StringUtil.isNull(salesOrdItem.getString("ltrmOrdYn", j)))
	                                        ){
	                                            saveWorkRoute.addLData(salesOrdItem.getLData(j));
	                                            salesOrdItem.modify("saveData", j, "Y");
	                                        }
                                       }
                                       else {
                                    	   if(StringUtil.isNull(salesOrdItem.getString("dptArCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArCd", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("dptArZipCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArZipCd", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("dptArZipAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArZipAddr", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("dptArDtlAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("dptArDtlAddr", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("arvArCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArCd", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("arvArZipCd", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArZipCd", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("arvArZipAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArZipAddr", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("arvArDtlAddr", i)).equals(StringUtil.isNull(salesOrdItem.getString("arvArDtlAddr", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("strtReqYmd", i)).equals(StringUtil.isNull(salesOrdItem.getString("strtReqYmd", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("strtReqHm", i)).equals(StringUtil.isNull(salesOrdItem.getString("strtReqHm", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("aptdReqYmd", i)).equals(StringUtil.isNull(salesOrdItem.getString("aptdReqYmd", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("aptdReqHm", i)).equals(StringUtil.isNull(salesOrdItem.getString("aptdReqHm", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("clsExprYn", i)).equals(StringUtil.isNull(salesOrdItem.getString("clsExprYn", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("leadTimeExprYn", i)).equals(StringUtil.isNull(salesOrdItem.getString("leadTimeExprYn", j)))
 	                                          && StringUtil.isNull(salesOrdItem.getString("ltrmOrdYn", i)).equals(StringUtil.isNull(salesOrdItem.getString("ltrmOrdYn", j)))
 	                                        ){
 	                                            saveWorkRoute.addLData(salesOrdItem.getLData(j));
 	                                            salesOrdItem.modify("saveData", j, "Y");
 	                                        }
                                       }
                                    }
                                }
                                LData header = salesOrdItem.getLData(i);
                                header.set("LCompoundDao", dao);

                                pbc2.createBasisWorkRoute(header, saveWorkRoute);
                            }
                        }
                    }
                }
            }
            dao.add("cud/om/tb_om02001/updateBackOrdYn", salesOrd);
            dao.executeUpdate();
            
            tempData.setString("backOrdYn",salesOrd.getString("backOrdYn"));

            // 대기오더인 경우 SMS를 전송한다.
            if("Y".equals(salesOrd.getString("backOrdYn"))) {
            	//2015-11-16 R2443(이롬) 대기오더 SMS 처리 추가
            	if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_IR)) { 
                	LData smsData = new LData();
                    smsData.set("LCompoundDao"              , dao);
                    smsData.setString("salesOrdNo"          , salesOrd.getString("salesOrdNo"));
                    smsData.setString("statSctnCd"          , "E1");
                    sendCustOrdStatSms(smsData);
                }	
                else {
	            	LData smsData = new LData();
	                smsData.set("LCompoundDao"              , dao);
	                smsData.setString("salesOrdNo"          , salesOrd.getString("salesOrdNo"));
	                smsData.setString("statSctnCd"          , "04");
	                sendCustOrdStatSms(smsData);
                }
            }
            
            
            //if(true) throw new LBizException("LEEPJ 강제오류>>>>>" +salesOrd.getString("backOrdYn"));

            return tempData;

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "createSalesOrdRest()" + "=>" + be.getMessage());
            throw be;

        }  catch (Exception se) {
            se.printStackTrace();
            LLog.err.println(  this.getClass().getName() + "." + "createSalesOrdRest()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 해상수입판매오더 포워딩 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveOceanImpPtnFwdOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();
        LMultiData retValue = new LMultiData();
        LData returnValue = new LData();
        String msg = "";

        try{
            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao(
                    "select/om/om02/salesOrd/retrievePtnExistYn",
                    inputData);
            LMultiData chkData  = commonDao.executeQuery();

            if(chkData.getDataCount() == 0) {
                msg = "The Customer never exist. [Customer = "+inputData.getString("ctrtCustCd")+"]";
                returnValue.setString("key", "E");
                returnValue.setString("message", msg);
                returnValue.setString("ptnNm", "");
                retValue.addLData(returnValue);

                dataHolder.add("IN_DS4", retValue);
                return dataHolder;
            }

            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpPtnFwdOrd", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpPtnFwdOrdItemList", inputData));
            dataHolder.add("IN_DS3", dao.executeQuery("select/om/om03/workRouteMngt/retrieveTplPtnFwdOrdDivHist", inputData));

            returnValue.setString("key", "S");
            returnValue.setString("message", msg);
            returnValue.setString("ptnNm", chkData.getString("ptnNm", 0));
            retValue.addLData(returnValue);
            dataHolder.add("IN_DS4", retValue);

            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveOceanImpPtnFwdOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 해상수입판매오더 포워딩 정보를 조회하는 메소드 신규.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveOceanImpPtnFwdOrdInit(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();
        LMultiData retValue = new LMultiData();
        LData returnValue = new LData();
        String msg = "";

        try{
            laf.application.dao.LCommonDao commonDao = new laf.application.dao.LCommonDao(
                    "select/om/om02/salesOrd/retrievePtnExistYn",
                    inputData);
            LMultiData chkData  = commonDao.executeQuery();
            if(chkData.getDataCount() == 0) {
                msg = "존재하지 않는 고객입니다. [Customer = "+inputData.getString("ctrtCustCd")+"]";
                returnValue.setString("key", "E");
                returnValue.setString("message", msg);
                retValue.addLData(returnValue);

                dataHolder.add("IN_DS2", retValue);
                return dataHolder;
            }

            dataHolder.add("IN_DS1", dao.executeQuery("select/sm/sm04/ctrtMngt/retrieveCustOrdTypeEachCtrtTPL", inputData));

            returnValue.setString("key", "S");
            returnValue.setString("message", msg);
            retValue.addLData(returnValue);
            dataHolder.add("IN_DS2", retValue);

            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveOceanImpPtnFwdOrdInit()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 수입출고오더분배 헤더 조회하는 메소드.
     *
     * @param inputData    Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException  메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveOceanImpGiOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try {
            return dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpGiOrd", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveOceanImpGiOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 수입출고 아이템 분배내역을 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveImpGiItemDiv(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{
            if("Y".equals(OmConstants.INH_YN)){
                inputData.setString("workPlCd", "");
            }
            if(( inputData.getString("ctrtCustCd").equals(OmConstants.CUST_CO_CD_HW) 
               && "Z37".equals(inputData.getString("custMoveTypeCd")))){ 
            	dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveAvailBlListHw", inputData));
            }else{
            	dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveAvailBlList", inputData));
            }
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpGiDivHist", inputData));
            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveImpGiItemDiv()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 상차지연실적번호를 수정하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void updateLoadDlyRsltNo(LMultiData inputData) throws LException {
        //laf.application.dao.LCompoundDao dao  = CompDaoUtil.getTransaction(inputData, false);
        lafx.bridge.gauce.dao.LCompoundDao dao = new lafx.bridge.gauce.dao.LCompoundDao();

        try{
            dao.setUpdateQuery ("cud/om/tb_om02001/updateLoadDlyRsltNo");
            dao.addWithJobType(inputData);
            dao.executeUpdate();

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "updateLoadDlyRsltNo()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "updateLoadDlyRsltNo()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 가용재고확인여부를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveAvailStockConfYn(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        LMultiData retValue = new LMultiData();
        LData returnValue = new LData();

        try{
            LData byOrdType = dao.executeQueryForSingle("select/ma/ma01/ordTypeMngt/retrieveOrdTypeSingle", inputData);
            LData byPtn     = dao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnInfoDtl", inputData);

            String availStockConfYn  = "";
            String availStockConfYn1 = "";
            String availStockConfYn2 = "";
            if((byOrdType != null && !byOrdType.isEmpty()) || (byPtn != null && !byPtn.isEmpty())){

                availStockConfYn1 = byOrdType.getString("availStockConfYn");
                availStockConfYn2 = byPtn.getString("availStockConfYn");

                if("Y".equals(availStockConfYn1) && "Y".equals(availStockConfYn2))
                    availStockConfYn = "Y";
                else
                    availStockConfYn = "N";
            }else{
                availStockConfYn     = "N";
            }

            returnValue.setString("availStockConfYn", availStockConfYn);
            retValue.addLData(returnValue);

            return retValue;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveavailStockConfYn()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * Booking No 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveBookingNo(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBookingNoList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBookingNo()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 오더 SMS 전송.
     *
     * @param inputData
     *
     * @return void.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void sendCustOrdStatSms(LData inputData) throws LException {

        try{

            // 01:접수, 02:오류, 03:완료, 04:대기오더
            if(inputData.getString("statSctnCd") == null || "".equals(inputData.getString("statSctnCd"))) {
                throw new LBizException("상태구분은 필수 항목입니다.");
            }

            String statSctnCd = inputData.getString("statSctnCd");
            //LLog.debug.println("\n ++++ sendCustOrdStatSms +++++++++ " + inputData);

            if("01".equals(statSctnCd) || "02".equals(statSctnCd)) {
                if(inputData.getString("custCd") == null || "".equals(inputData.getString("custCd" ))){
                    return;
                }

                if(inputData.getString("custOrdNo") == null || "".equals(inputData.getString("custOrdNo" ))){
                    return;
                }
            } else {
                if(inputData.getString("salesOrdNo") == null || "".equals(inputData.getString("salesOrdNo" ))){
                    return;
                }
            }

            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);
            LData sData  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveCustOrdStat", inputData);
            //LLog.debug.println("\n ++++ retrieveCustOrdStat +++++++++ " + sData);

            if(sData.getString("custOrdNo") == null || "".equals(sData.getString("custOrdNo")) ||
               sData.getString("ofcrTelNo") == null || "".equals(sData.getString("ofcrTelNo")) ) {
                return;
            }

            LData eventData = new LData();
            if("01".equals(statSctnCd)) {
                if(sData.getString("backOrdYn") != null && "Y".equals(sData.getString("backOrdYn"))) {
                    return;
                }

                eventData.setString("eventNo"   , "OM01_01");
                eventData.setString("smsConts"  , sData.getString("custOrdNo") + "가 정상적으로 접수되었습니다.");
                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");
                eventData.setString("addedList" , sData.getString("ofcrTelNo"));

                //LLog.debug.println("\n statSctnCd : 01 ++++ eventData +++++++++ " + eventData);

            } else if("02".equals(statSctnCd)) {

                if(OmConstants.CUST_CO_CD_NC.equals(sData.getString("rptCustCd"))){

                    LLog.debug.println("\n inputData : ++++ inputData +++++++++ " + inputData);

                    StringBuffer sb = new StringBuffer();
                    if(inputData.getString("expImpDomSctnCd").equals("03")){
                        sb.append("내수오더:");
                    }else if(inputData.getString("expImpDomSctnCd").equals("01")){
                        sb.append("수출오더:");
                    }

                    sb.append(sData.getString("custOrdNo")+" ");
                    sb.append("오류일시:");
                    sb.append(sData.getString("recpYmd"));
                    sb.append("[");
                    sb.append(sData.getString("recpHms"));
                    sb.append("] ");
                    sb.append("비정상 접수됨 ");

                    eventData.setString("smsConts"  , sb.toString());
                    eventData.setString("eventNo"   , "OM01_06");

                }else{
                    eventData.setString("eventNo"   , "OM01_02");
                    eventData.setString("smsConts"  , sData.getString("custOrdNo") + "가 비정상 접수되었습니다.");
                    eventData.setString("addedList" , sData.getString("ofcrTelNo"));
                }

                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");


            } else if("03".equals(statSctnCd)) {

                // 노스케 이면서 반품이고 제품품질이 'A'나 'D'인 경우 상세 메시지를 보냄
                if(OmConstants.CUST_CO_CD_NC.equals(sData.getString("rptCustCd")) &&
                   ("D".equals(sData.getString("custOrdTypeCd")) ||
                    "E".equals(sData.getString("custOrdTypeCd")) ||
                    "F".equals(sData.getString("custOrdTypeCd"))) &&
                   ("A".equals(sData.getString("grade")) ||
                    "D".equals(sData.getString("grade"))) ) {

                    StringBuffer sb = new StringBuffer();
                    sb.append(sData.getString("custOfCustNm"));
                    sb.append(" 중량:");
                    sb.append(sData.getString("ordWgt"));
                    sb.append(" 반품접수일시:");
                    sb.append(sData.getString("recpYmd"));
                    sb.append("[");
                    sb.append(sData.getString("recpHms"));
                    sb.append("]");
                    sb.append(" 반품완료일:");
                    sb.append(sData.getString("cmptYmd"));

                    eventData.setString("eventNo"   , "OM01_05");
                    eventData.setString("smsConts"  , sb.toString());
                    eventData.setString("instSendYn", "Y");
                    eventData.setString("smsYn"     , "Y");

                } else {

                    eventData.setString("eventNo"   , "OM01_03");
                    eventData.setString("smsConts"  , sData.getString("custOrdNo") + "가 정상적으로 완료되었습니다.");
                    eventData.setString("instSendYn", "Y");
                    eventData.setString("smsYn"     , "Y");
                    eventData.setString("addedList" , sData.getString("ofcrTelNo"));
                }

            } else if("04".equals(statSctnCd)) {

                eventData.setString("eventNo"   , "OM01_04");
                eventData.setString("smsConts"  , sData.getString("custOrdNo") + "가 대기상태로 등록되었습니다.");
                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");
                eventData.setString("addedList" , sData.getString("ofcrTelNo"));
            } 
            //2015-11-16 R2443(이롬) 문자메세지 전송 추가
            else if("E1".equals(statSctnCd)) {

                eventData.setString("eventNo"   , "OMERR_01");
                eventData.setString("smsConts"  , sData.getString("custOrdNo") + "가 대기상태로 등록되었습니다.");
                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");
                eventData.setString("addedList" , sData.getString("ofcrTelNo"));
            } else if("E2".equals(statSctnCd)) {

                eventData.setString("eventNo"   , "OMERR_02");
                eventData.setString("smsConts"  , sData.getString("custOrdNo") + "가 확정된 내역이 존재하여 오더 취소가 불가합니다.");
                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");
                eventData.setString("addedList" , sData.getString("ofcrTelNo"));
            }

            StringBuffer template = new StringBuffer();
            template.append("url=");
            template.append(sData.getString("rptCustCd"));
            template.append(".");
            template.append(sData.getString("custOrdNo"));
            eventData.setString("tempValue", template.toString());

            //LLog.debug.println("\n ========== eventData ========== \n " + eventData);
            //if(true) throw new LBizException("LEEPJ 강제오류>>>>>" +eventData);
            EventMsgUtil.sendMsg(eventData);

        } catch (Exception se) {
            se.printStackTrace(LLog.debug);
            LLog.err.println(  this.getClass().getName() + "." + "sendCustOrdStatSms()" + "=>" + se.getMessage());
            //throw new LSysException(se.getMessage(), se);
        }
    }


    /**
     * 지류유통 담당자 SMS 발송(오더생성 시)
     * @param inputData
     * @throws LException
     */
    public void sendHplCustOrdStatSms(LData inputData) throws LException {

        try{

            // 01:접수, 02:오류, 03:완료, 04:대기오더
            if(inputData.getString("statSctnCd") == null || "".equals(inputData.getString("statSctnCd"))) {
                throw new LBizException("상태구분은 필수 항목입니다.");
            }

            String statSctnCd = inputData.getString("statSctnCd");
            //LLog.debug.println("\n ++++ sendCustOrdStatSms +++++++++ " + inputData);

            if("01".equals(statSctnCd) || "02".equals(statSctnCd)) {
                if(inputData.getString("custCd") == null || "".equals(inputData.getString("custCd" ))){
                    return;
                }

                if(inputData.getString("custOrdNo") == null || "".equals(inputData.getString("custOrdNo" ))){
                    return;
                }
            } else {
                if(inputData.getString("salesOrdNo") == null || "".equals(inputData.getString("salesOrdNo" ))){
                    return;
                }
            }

            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);
            LData sData  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveHplSms", inputData);
            //LLog.debug.println("\n ++++ retrieveCustOrdStat +++++++++ " + sData);

            if(sData.getString("custOrdNo") == null || "".equals(sData.getString("custOrdNo")) ||
               sData.getString("ofcrTelNo") == null || "".equals(sData.getString("ofcrTelNo")) ) {
                return;
            }

            LData eventData = new LData();
            //if(sData.getString("backOrdYn") != null && "Y".equals(sData.getString("backOrdYn"))) {
            //  return;
            //}

            eventData.setString("eventNo"   , "OM01_01");
            eventData.setString("smsConts"  , sData.getString("custOrdNo") + "가 정상적으로 접수되었습니다. 오더상태는 ["+sData.getString("salesOrdStatNm")+"] 상태입니다.");
            eventData.setString("instSendYn", "Y");
            eventData.setString("smsYn"     , "Y");
            eventData.setString("addedList" , sData.getString("ofcrTelNo"));

            //LLog.debug.println("\n statSctnCd : 01 ++++ eventData +++++++++ " + eventData);

            StringBuffer template = new StringBuffer();
            template.append("url=");
            template.append(sData.getString("rptCustCd"));
            template.append(".");
            template.append(sData.getString("custOrdNo"));
            eventData.setString("tempValue", template.toString());

            LLog.debug.println("\n ========== eventData ========== \n " + eventData);
            EventMsgUtil.sendMsg(eventData);

        } catch (Exception se) {
            se.printStackTrace(LLog.debug);
            LLog.err.println(  this.getClass().getName() + "." + "sendHplCustOrdStatSms()" + "=>" + se.getMessage());
            //throw new LSysException(se.getMessage(), se);
        }
    }


    /**
     * 국제TPL SMS 전송.
     *
     * @param inputData
     *
     * @return void.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void sendTplTranSms(LData inputData) throws LException {

        try{

            if(true) return;

            // 01:해상수입출고, 02:해상수입항만
            if(inputData.getString("sctnCd") == null || "".equals(inputData.getString("sctnCd"))) {
                throw new LBizException("구분은 필수 항목입니다.");
            }

            String sctnCd = inputData.getString("sctnCd");

            laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(inputData);

            LData sData  = new LData();

            LData eventData = new LData();
            if("01".equals(sctnCd)) {

                sData  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExpTplTran", inputData);

                if(sData.getString("salesOrdNo") == null || "".equals(sData.getString("salesOrdNo"))) {
                    return;
                }

                StringBuffer sb = new StringBuffer();
                sb.append(sData.getString("expImpDomSctnNm"));
                sb.append("/");
                sb.append(sData.getString("custNm"));
                sb.append("/");
                sb.append(sData.getString("cyClsYmd"));
                sb.append("/");
                if(sData.getInt("cntrQty1") > 0) {
                    sb.append(sData.getString("cntrKindCd1"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty1"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty2") > 0) {
                    sb.append(sData.getString("cntrKindCd2"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty2"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty3") > 0) {
                    sb.append(sData.getString("cntrKindCd3"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty3"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty4") > 0) {
                    sb.append(sData.getString("cntrKindCd4"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty4"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty5") > 0) {
                    sb.append(sData.getString("cntrKindCd5"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty5"));
                    sb.append("/");
                }
                sb.append(sData.getString("salesOrdNo"));
                sb.append("/");
                sb.append(sData.getString("bookingNo"));

                eventData.setString("eventNo"   , "OM02_01");
                eventData.setString("smsConts"  , sb.toString());
                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");


            } else if("02".equals(sctnCd)) {

                sData  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpTplTran", inputData);

                if(sData.getString("salesOrdNo") == null || "".equals(sData.getString("salesOrdNo"))) {
                    return;
                }

                StringBuffer sb = new StringBuffer();
                sb.append(sData.getString("expImpDomSctnNm"));
                sb.append("/");
                sb.append(sData.getString("custNm"));
                sb.append("/");
                sb.append(sData.getString("aptdReqYmd"));
                sb.append("/");
                sb.append(sData.getString("cntrKindCd"));
                sb.append("*");
                sb.append(sData.getInt("ordQty"));
                sb.append("/");
                sb.append(sData.getString("salesOrdNo"));
                sb.append("/");
                sb.append(sData.getString("blNo"));

                eventData.setString("eventNo"   , "OM02_02");
                eventData.setString("smsConts"  , sb.toString());
                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");

            } else if("03".equals(sctnCd)) {

                sData  = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveImpTplTranForwarding", inputData);

                if(sData.getString("salesOrdNo") == null || "".equals(sData.getString("salesOrdNo"))) {
                    return;
                }

                StringBuffer sb = new StringBuffer();
                sb.append(sData.getString("expImpDomSctnNm"));
                sb.append("/");
                sb.append(sData.getString("custNm"));
                sb.append("/");
                sb.append(sData.getString("aptdReqYmd"));
                sb.append("/");
                if(sData.getInt("cntrQty1") > 0) {
                    sb.append(sData.getString("cntrKindCd1"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty1"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty2") > 0) {
                    sb.append(sData.getString("cntrKindCd2"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty2"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty3") > 0) {
                    sb.append(sData.getString("cntrKindCd3"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty3"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty4") > 0) {
                    sb.append(sData.getString("cntrKindCd4"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty4"));
                    sb.append("/");
                }
                if(sData.getInt("cntrQty5") > 0) {
                    sb.append(sData.getString("cntrKindCd5"));
                    sb.append("*");
                    sb.append(sData.getInt("cntrQty5"));
                    sb.append("/");
                }
                sb.append(sData.getString("salesOrdNo"));
                sb.append("/");
                sb.append(sData.getString("blNo"));

                eventData.setString("eventNo"   , "OM02_02");
                eventData.setString("smsConts"  , sb.toString());
                eventData.setString("instSendYn", "Y");
                eventData.setString("smsYn"     , "Y");
            }

            StringBuffer template = new StringBuffer();
            template.append("url=");
            template.append(sData.getString("rptCustCd"));
            template.append(".");
            template.append(sData.getString("salesOrdNo"));
            eventData.setString("tempValue", template.toString());

            LLog.debug.println("\n ========== eventData ========== \n " + eventData);
            EventMsgUtil.sendMsg(eventData);

        } catch (Exception se) {
            se.printStackTrace(LLog.debug);
            LLog.err.println(  this.getClass().getName() + "." + "sendTplTranSms()" + "=>" + se.getMessage());
            //throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 오더접근권한 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void retrieveOrdAccessAuth(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        try{
            if(inputData.getString("userId") == null || "".equals(inputData.getString("userId"))){
                if(inputData.getString("regrId") == null || "".equals(inputData.getString("regrId"))){
                    throw new LBizException("사용자ID는 필수 항목입니다.");
                } else {
                    inputData.setString("userId", inputData.getString("regrId"));
                }
            }

            if((inputData.getString("custOrdNo")  == null || "".equals(inputData.getString("custOrdNo"))) &&
               (inputData.getString("salesOrdNo") == null || "".equals(inputData.getString("salesOrdNo"))) &&
               (inputData.getString("custRefNo")  == null || "".equals(inputData.getString("custRefNo"))) &&
               (inputData.getString("shipmentNo") == null || "".equals(inputData.getString("shipmentNo")))  ){
                throw new LBizException("고객오더번호 , 판매오더번호 또는 Shipment 번호는  필수 항목입니다.");
            }

            //LLog.debug.println("inputData  =========="+inputData);

            LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdAccessAuth", inputData);

            if(lData.getString("salesOrdNo") == null) {
                throw new LBizException("해당 오더가 존재하지 않습니다.");
            }

            if("N".equals(lData.getString("authYn"))) {
                throw new LBizException("해당 오더에 대한 접근권한이 없습니다.");
            }

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveOrdAccessAuth()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 수출오더접근권한 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void retrieveExpOrdAccessAuth(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        try{
            if(inputData.getString("userId") == null || "".equals(inputData.getString("userId"))){
                if(inputData.getString("regrId") == null || "".equals(inputData.getString("regrId"))){
                    throw new LBizException("사용자ID은 필수 항목입니다.");
                } else {
                    inputData.setString("userId", inputData.getString("regrId"));
                }
            }

            if((inputData.getString("custOrdNo")  == null || "".equals(inputData.getString("custOrdNo"))) &&
               (inputData.getString("salesOrdNo") == null || "".equals(inputData.getString("salesOrdNo")))  ){
                throw new LBizException("고객오더번호 또는 판매오더번호는  필수 항목입니다.");
            }

            LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExpOrdAccessAuth", inputData);

            if(lData.getString("salesOrdNo") == null) {
                throw new LBizException("해당 오더가 존재하지 않습니다.");
            }

            if("N".equals(lData.getString("authYn"))) {
                throw new LBizException("해당 오더에 대한 접근권한이 없습니다.");
            }

        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveExpOrdAccessAuth()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 적송오더접근권한 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LData retrieveIndirDelivOrdAccessAuth(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

        LData rtnData = new LData();

        try{

            if(inputData.getString("userId") == null || "".equals(inputData.getString("userId"))){
                if(inputData.getString("regrId") == null || "".equals(inputData.getString("regrId"))){
                    throw new LBizException("사용자ID은 필수 항목입니다.");
                } else {
                    inputData.setString("userId", inputData.getString("regrId"));
                }
            }

            if(inputData.getString("dptArCd") == null || "".equals(inputData.getString("dptArCd")) ||
               inputData.getString("arvArCd") == null || "".equals(inputData.getString("arvArCd"))  ){
                rtnData.setString("indirDelivYn", "N");
                return rtnData;
            }

            LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveIndirDelivOrdAccessAuth", inputData);

            if(lData == null || lData.getString("authYn") == null || "".equals(lData.getString("authYn")) || "N".equals(lData.getString("authYn"))) {
                rtnData.setString("indirDelivYn", "N");
                return rtnData;
            }

            rtnData.setString("indirDelivYn", "Y");

            return rtnData;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveIndirDelivOrdAccessAuth()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 항구재고오더를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrievePortStockOrd(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{
            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrievePortStockOrdBooking", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrievePortStockOrdList", inputData));
            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrievePortStockOrd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }


    /**
     * 항구재고오더 분배하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void dividePortStockOrd(LMultiData dataHolder) throws LException {

        LMultiData bookingList      = (LMultiData)dataHolder.get("IN_DS1",0);
        LMultiData ordList  = (LMultiData)dataHolder.get("IN_DS2",0);

        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        IWorkRouteMngt workRouteMngt    = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
        try{
            LData bookingData = (LData)bookingList.getLData(0);
            LLog.debug.println("bookingData========>\n" + bookingData);
            LData chkData = null;
            LMultiData workRouteItem = null;

            if(ordList != null && ordList.getDataCount() > 0) {
                for(int i=0; i<ordList.getDataCount(); i++){
                    LData workRouteData = (LData)ordList.getLData(i);

                    bookingData.setString("salesOrdNo", workRouteData.getString("salesOrdNo"));

                    chkData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveBookingNoCheck", bookingData);

                    if(chkData != null && chkData.getString("bookingNo") != null && chkData.getString("bookingNo").length() > 0){

                    }else{
                        dao.add("cud/om/tb_om02019/createBooking", bookingData);
                        dao.executeUpdate();
                    }

                    workRouteItem = dao.executeQuery("select/om/om02/salesOrd/retrievePortStockOrdItem", workRouteData);

                    workRouteData.set("LCompoundDao", dao);
                    workRouteMngt.createBasisWorkRoute(workRouteData, workRouteItem);

                    LMultiData openData = dao.executeQuery("select/om/om02/salesOrd/retrieveChungwonPortData", workRouteData);
                    if(openData != null && openData.getDataCount() > 0) {
                        for(int j = 0; j < openData.getDataCount(); j++) {
                            LData data = openData.getLData(j);
                            dao.add("cud/om/ztlex018/updateNorskeskogGiRslt", data);
                        }
                        dao.executeUpdate();
                    }

                }
            }

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "devidePortStockOrd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "devidePortStockOrd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 항구재고오더 분배취소하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void cancelPortStockOrdDiv(LMultiData ordList) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        IWorkRouteMngt workRouteMngt    = (IWorkRouteMngt) PbcUtil.getPbc(IWorkRouteMngt.class);
        try{

            if(ordList != null && ordList.getDataCount() > 0) {
                for(int i=0; i<ordList.getDataCount(); i++){
                    LData workRouteData = (LData)ordList.getLData(i);

                    LMultiData ordData = new LMultiData();
                    ordData.addLData(workRouteData);
                    LData param = new LData();
                    param.setString("salesOrdNo", workRouteData.getString("salesOrdNo"));
                    param.setString("regrId"    , workRouteData.getString("regrId"));
                    param.setString("mdfrId"    , workRouteData.getString("mdfrId"));

                    LMultiData params = new LMultiData();
                    params.add("IN_DS1" , ordData);
                    params.add("INPUT"  , param);
                    params.add("LCompoundDao", dao );
                    workRouteMngt.deleteWorkRoute(params);

                    LMultiData openData = dao.executeQuery("select/om/om02/salesOrd/retrieveChungwonPortData", workRouteData);
                    if(openData != null && openData.getDataCount() > 0) {
                        for(int j = 0; j < openData.getDataCount(); j++) {
                            LData data = openData.getLData(j);
                            dao.add("cud/om/ztlex018/updateNorskeskogGiRslt", data);
                        }
                        dao.executeUpdate();
                    }

                    dao.add("cud/om/tb_om02019/deleteBooking", workRouteData);
                    dao.executeUpdate();
                }
            }

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelPortStockOrdDiv()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "cancelPortStockOrdDiv()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 계열해상수출포워딩 고객정산담당자 변경 메소드
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void saveCustExcaOfcrNm(LMultiData inputData) throws LException {
        LCompoundDao dao = new LCompoundDao();
        try {
            if(inputData != null && inputData.getDataCount() > 0) {
                for(int i =0; i < inputData.getDataCount(); i++) {
                    dao.add("cud/om/tb_om02001/updateCustExcaOfcrNm", inputData.getLData(i));
                }
                dao.executeUpdate();
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "saveCustExcaOfcrNm()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveCustExcaOfcrNm()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

    }

    /**
     * 계열해상수출포워딩 화물형태 변경 메소드
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void saveCargoFormCd(LMultiData inputData) throws LException {
        laf.application.dao.LCompoundDao comDao = new laf.application.dao.LCompoundDao();
        try {
            LData input = null;
            if(inputData != null && inputData.getDataCount() > 0) {
                for(int i =0; i < inputData.getDataCount(); i++) {
                    input = inputData.getLData(i);
                    LLog.debug.println("input=======>\n" + input);

                    LData newSalesOrd       = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo", input);
                    LMultiData workRoute    = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteBookingNo", input);
                    LMultiData bookingRslt  = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveBookingRslt", input);
//                  LMultiData bookingData  = comDao.executeQuery("select/om/om02/salesOrd/retrieveBranchOceanExpSalesOrdBookingList", input);

                    if(newSalesOrd != null) {
                        newSalesOrd.setString("cargoFormCd", input.getString("cargoFormCd"));
                    }
                    LLog.debug.println("newSalesOrd========>\n" + newSalesOrd);

                    boolean dcsnYn = false;

                    if(workRoute != null && workRoute.getDataCount() > 0) {
                        for(int j=0; j < workRoute.getDataCount(); j++) {
                            if(workRoute.getInt("cnt", j) > 0) {
                                dcsnYn = true;
                            }
                        }
                    }

                    if(bookingRslt != null && bookingRslt.getDataCount() > 0) {
                        for(int j=0; j < bookingRslt.getDataCount(); j++) {
                            if(bookingRslt.getInt("cnt", j) > 0) {
                                dcsnYn = true;
                            }
                        }
                    }

                    if(dcsnYn) {
                        throw new LBizException("hsni.om.err.cannotsave?판매오더번호:" + input.getString("salesOrdNo"));
                    }

                    LData param = null;
                    IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);

                    newSalesOrd.setString("mdfrId", input.getString("mdfrId"));
                    comDao.add("cud/om/tb_om02001/updateSalesOrd", newSalesOrd);
                    comDao.executeUpdate();

                    input.set("LCompoundDao", comDao);
                    setSalesOrdHistory(input);

                    if(workRoute != null && workRoute.getDataCount() > 0) {
                        for(int n=0; n < workRoute.getDataCount(); n++) {
                            param = workRoute.getLData(n);
                            param.setString("salesOrdNo", input.getString("salesOrdNo"));
                            param.setString("workProgStatCd", OmConstants.WORK_PROG_STAT_CD_01);
                            param.setString("regrId"    , input.getString("regrId"));
                            param.setString("mdfrId"    , input.getString("mdfrId"));
                            param.set("LCompoundDao"    , comDao);

                            pbc.cancelEo(param);

                            pbc.divideEo(param);
                        }
                    }

                    if(bookingRslt != null && bookingRslt.getDataCount() > 0) {
                        for(int a=0; a < bookingRslt.getDataCount(); a++) {
                            param = bookingRslt.getLData(a);
                            param.setString("salesOrdNo", input.getString("salesOrdNo"));
                            param.setString("regrId"    , input.getString("regrId"));
                            param.setString("mdfrId"    , input.getString("mdfrId"));
                            param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                            param.set("LCompoundDao"    , comDao);

                            pbc.divideFwdEo(param);

                            param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_CREATE);

                            pbc.divideFwdEo(param);
                        }
                    }

                }
            }
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "saveCargoFormCd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveCargoFormCd()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }

    }

    /**
     * 전주페이퍼수출반품오더 조회
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveCancelGiExport(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();
        laf.application.dao.LCommonDao cDao = new laf.application.dao.LCommonDao();
        try{
            if(inputData != null && inputData.getString("centerType") != null && inputData.getString("centerType").equals("J")) {
                LMultiData header = dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportHeaderJeonju", inputData);
                LLog.debug.println("header===>" + header);
                if(header != null && header.getDataCount() > 0) {
                    LMultiData tmpHeader = (LMultiData)header.get("OBJECT_TO_GDRs", 0);
                    LLog.debug.println("tmpHeader===>" + tmpHeader);

//                  if(tmpHeader != null && tmpHeader.getDataCount() > 0) {
//                      if(tmpHeader.getString("cargoFormCd", 0) != null
//                          && tmpHeader.getString("cargoFormCd", 0).equals(OmConstants.CARGO_FORM_CONTAINER)) {
//                          throw new LBizException("전주센터 컨테이너 오더는 반품대상이 아닙니다.");
//                      }
//                  }

                }
                dataHolder.add("IN_DS1", header);
                dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportItemJeonju", inputData));

            } else if(inputData != null && inputData.getString("centerType") != null && inputData.getString("centerType").equals("C")) {

                LMultiData header = dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportHeaderChungwon", inputData);
                LMultiData item = new LMultiData();


                LLog.debug.println("header===>" + header);
                if(header != null && header.getDataCount() > 0) {
                    LMultiData tmpHeader = (LMultiData)header.get("OBJECT_TO_GDRs", 0);
                    LLog.debug.println("tmpHeader===>" + tmpHeader);

                    if(tmpHeader != null && tmpHeader.getDataCount() > 0) {
                        if(tmpHeader.getString("cargoFormCd", 0) != null && tmpHeader.getString("cargoFormCd", 0).equals(OmConstants.CARGO_FORM_CONTAINER)
                            && tmpHeader.getString("returnGoodsCustOrdNo",0) != null && !tmpHeader.getString("returnGoodsCustOrdNo", 0).equals("")
                            && tmpHeader.getString("returnGoodsCustVdspNo",0) != null && !tmpHeader.getString("returnGoodsCustVdspNo", 0).equals("")) {
                            LData existData = cDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveReturnGoodsExist", tmpHeader.getLData(0));
                            if(existData != null && existData.getInt("cnt") > 0) {
                                throw new LBizException("이미  반품처리된 오더입니다.");
                            }

                            item = dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportItemChungwonCntr", inputData);

                        } else {

                            item = dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportItemChungwonBulkNew", inputData);

                            LMultiData tmpItem = (LMultiData)item.get("OBJECT_TO_GDRs", 0);

                            if(tmpItem == null || tmpItem.getDataCount() <= 0) {
                                item = dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportItemChungwonBulk", inputData);
                            }
                        }
                    }
                }
//              LLog.debug.println("item.getDataCount()===>" + item.getDataCount());
                dataHolder.add("IN_DS1", header);
                dataHolder.add("IN_DS2", item);

            }else if(inputData != null && inputData.getString("centerType") != null && inputData.getString("centerType").equals("JC")) {
                LMultiData header = dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportHeaderJeonjuChungWon", inputData);
                LLog.debug.println("header===>" + header);
                if(header != null && header.getDataCount() > 0) {
                    LMultiData tmpHeader = (LMultiData)header.get("OBJECT_TO_GDRs", 0);
                    LLog.debug.println("tmpHeader===>" + tmpHeader);

//                  if(tmpHeader != null && tmpHeader.getDataCount() > 0) {
//                      if(tmpHeader.getString("cargoFormCd", 0) != null
//                          && tmpHeader.getString("cargoFormCd", 0).equals(OmConstants.CARGO_FORM_CONTAINER)) {
//                          throw new LBizException("컨테이너 오더는 반품대상이 아닙니다.");
//                      }
//                  }

                }
                dataHolder.add("IN_DS1", header);
                dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiExportItemJeonjuChungwon", inputData));
            }

            return dataHolder;
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCancelGiExport()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCancelGiExport()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    private LData getReturnGoodsHeader(LMultiData header) throws LException {
        LData headerData = new LData();
        try {
            laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

            LData input  = new LData();
            LData result = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewSalesOrdNo", input);

            if(result != null && result.getString("salesOrdNo") != null && !result.getString("salesOrdNo").equals("")) {
                headerData.setString("salesOrdNo",  result.getString("salesOrdNo"));
            }
            headerData.setString("corpCd"           ,  OmConstants.COMMON_CORP_CD);
            headerData.setString("rptCustCd"        ,  header.getString("rptCustCd", 0));
            headerData.setString("ordTypeCd"        ,  header.getString("ordTypeCd", 0));
            headerData.setString("addSvcTypeCd"     ,  "");
            headerData.setString("expImpDomSctnCd"  ,  header.getString("expImpDomSctnCd", 0));
            headerData.setString("cargoFormCd"      ,  header.getString("cargoFormCd", 0));

            LData paramData = new LData();
            paramData.setString("dptArCd"           , header.getString("dptArCd"        , 0));
            paramData.setString("dptArTypeCd"       , header.getString("dptArTypeCd"    , 0));
            paramData.setString("arvArCd"           , header.getString("arvArCd"        , 0));
            paramData.setString("arvArTypeCd"       , header.getString("arvArTypeCd"    , 0));
            paramData.setString("rptCustCd"         , header.getString("rptCustCd"  , 0));
            paramData.setString("ordTypeCd"         , header.getString("ordTypeCd"  , 0));
            paramData.setString("expImpDomSctnCd"   , header.getString("expImpDomSctnCd"    , 0));

            LData exceDept = setOrdMngtExceDeptCd(paramData);
            if(exceDept == null || exceDept.getString("result").equals("E") ){
                throw new LBizException("배차센터 세팅오류");
            } else {
                headerData.setString("ordMngtExceDeptCd",  exceDept.getString("ordMngtExceDeptCd"));
                headerData.setString("tranPlanCntrCd",  exceDept.getString("tranPlanCntrCd"));
            }

            headerData.setString("ordMngtFwdDeptCd",  "");

            /* 10. 오더관리실행담당자ID 세팅(TB_OM05006)
               계약고객코드, 오더관리실행부서코드, 수출입내수구분코드로 오더관리담당자 기준정보에서 main 담당자 조회
               조건에 맞는 담당자가 없으면 세팅 안함.
               조회조건: 부서코드, 대표고객코드, 수출입내수구분코드, 주요담당자여부 = 'Y'인 사람 조회
             */
            LData tempData = new LData();
            tempData.setString("ordChrgDeptCd"  , headerData.getString("ordMngtExceDeptCd"));
            tempData.setString("custCd"         , headerData.getString("rptCustCd"));
            tempData.setString("expImpDomSctnCd", headerData.getString("expImpDomSctnCd"));
            LData ofcrIdData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdMngtExceOfcrId", tempData);

            if(ofcrIdData.getString("userId")!=null && !ofcrIdData.getString("userId").equals("")) {
                headerData.setString("ordMngtExceOfcrId", ofcrIdData.getString("userId"));
            }

            headerData.setString("ordMngtFwdOfcrId" ,  "");
            headerData.setString("salesOrdStatCd"   ,  OmConstants.SALES_ORD_STAT_CD_02);
            headerData.setString("custOrdNo"        ,  "");
            headerData.setString("custCd"           ,  "");
            headerData.setString("custOrdTypeCd"    ,  "");
            headerData.setString("custMoveTypeCd"   ,  "");
            headerData.setString("custOrdRecpDate"  ,  "");
            headerData.setString("custOrdRecpChnCd" ,  "");
            headerData.setString("ctrtCustCd"       ,  header.getString("ctrtCustCd", 0));
            headerData.setString("ctrtNo"           ,  header.getString("ctrtNo", 0));
            headerData.setString("ordReqCustCd"     ,  header.getString("ordReqCustCd", 0));

            LData move = new LData();
            move.setString("dptArCd"            , header.getString("dptArCd"            , 0));
            move.setString("dptArTypeCd"        , header.getString("dptArTypeCd"        , 0));
            move.setString("arvArCd"            , header.getString("arvArCd"            , 0));
            move.setString("arvArTypeCd"        , header.getString("arvArTypeCd"        , 0));
            move.setString("expImpDomSctnCd"    , header.getString("expImpDomSctnCd"    , 0));
            move.setString("custOrdTypeCd"      , "");
            move.setString("custMoveTypeCd"     , "");
            move.setString("ordTypeCd"          , header.getString("ordTypeCd"      , 0));
            move.setString("rptCustCd"          , header.getString("rptCustCd"      , 0));
            move.setString("custOfCustCd"       , "");
            move.setString("selfGdsCd"          , "");

            String moveType = retrieveMoveType(move);

            paramData.setString("corpCd", headerData.getString("corpCd"));
            paramData.setString("moveTypeCd", moveType);

            headerData.setString("moveTypeCd", moveType);

 /**
            LData bilgCustInfo = getBilgCustInfo(paramData);
            if(bilgCustInfo != null) {
                headerData.setString("bilgCustCd",  bilgCustInfo.getString("bilgCustCd"));
                headerData.setString("sellDeptCd",  bilgCustInfo.getString("sellDeptCd"));
            }
**/
            //신규 계약번호, 청구고객, 매출부서 매핑. leepj 2013-12-28 --------------------------------------------------
            LData ctrtCustInfo = getBilgCustInfoInh(paramData);

            if( ctrtCustInfo != null ) {
            	headerData.setString("ctrtNo",      ctrtCustInfo.getString("ctrtNo"));
            	headerData.setString("bilgCustCd",  ctrtCustInfo.getString("bilgCustCd"));
            	headerData.setString("sellDeptCd",  ctrtCustInfo.getString("sellDeptCd"));
            	headerData.setString("salesOfcrId", ctrtCustInfo.getString("salesOfcrId"));
            }                

            headerData.setString("custOfcrNm"   ,  "");
            headerData.setString("custOfcrTelNo",  "");
            headerData.setString("custOfCustCd" ,  "");
            headerData.setString("supPlCd"      ,  "");
            headerData.setString("plantCd"      ,  "");
            headerData.setString("custRefNo"    ,  "");
            headerData.setString("dptArCd"      ,  header.getString("dptArCd", 0));
            headerData.setString("dptArTypeCd"  ,  header.getString("dptArTypeCd", 0));
            headerData.setString("dptArZipCd"   ,  header.getString("dptArZipCd", 0));
            headerData.setString("dptArZipAddr" ,  header.getString("dptArZipAddr", 0));
            headerData.setString("dptArDtlAddr" ,  header.getString("dptArDtlAddr", 0));
            headerData.setString("dptArOfcrNm"  ,  "");
            headerData.setString("dptArOfcrTelNo",  "");

            headerData.setString("arvArCd"      ,  header.getString("arvArCd", 0));
            headerData.setString("arvArTypeCd"  ,  header.getString("arvArTypeCd", 0));
            headerData.setString("arvArZipCd"   ,  header.getString("arvArZipCd", 0));
            headerData.setString("arvArZipAddr" ,  header.getString("arvArZipAddr", 0));
            headerData.setString("arvArDtlAddr" ,  header.getString("arvArDtlAddr", 0));
            headerData.setString("arvArOfcrNm"  ,  "");
            headerData.setString("arvArOfcrTelNo",  "");
            headerData.setString("workPlCd"     ,  "");
            headerData.setString("strtReqYmd"   ,  "");
            headerData.setString("strtReqHm"    ,  "");
            headerData.setString("aptdReqYmd"   ,  header.getString("aptdReqYmd", 0));
            headerData.setString("aptdReqHm"    ,  header.getString("aptdReqHm", 0));
            headerData.setString("salesOfcrId"  ,  header.getString("salesOfcrId", 0));
            headerData.setString("sellDcsnSctnCd",  "");
            headerData.setString("custExprYn"   ,  OmConstants.COMMON_N);
            headerData.setString("clsExprYn"    ,  OmConstants.COMMON_N);
            headerData.setString("leadTimeExprYn",  OmConstants.COMMON_N);
            headerData.setString("dtodYn"       ,  OmConstants.COMMON_N);
            headerData.setString("rmk"          ,  header.getString("rmk", 0));
            headerData.setString("loadDlyYn"    ,  OmConstants.COMMON_N);
            headerData.setString("loadDlyRltdSalesOrdNo",  "");
            headerData.setString("backOrdYn"    ,  OmConstants.COMMON_N);
            headerData.setString("aftOrdYn"     ,  OmConstants.COMMON_N);
            headerData.setString("chgAptdYmd"   ,  "");
            headerData.setString("chgAptdHm"    ,  "");

            headerData.setString("salesOrdCnclYn",  OmConstants.COMMON_N);

            headerData.setString("salesOrdCnclReason",  "");
            headerData.setString("salesOrdCmptSctnCd",  "");

            headerData.setString("ordReasonCd"  ,  "");
            headerData.setString("rltdGiOrdNo"  ,  "");

            headerData.setString("workInfoMngtTypeCd",  OmConstants.WORK_INFO_MNGT_TYPE_CD_HEADER);

            headerData.setString("ifId"         ,  "");
            headerData.setString("tranEoNo"     ,  "");
            headerData.setString("ltrmOrdYn"    ,  OmConstants.COMMON_N);
            headerData.setString("rltdGiEoNo"   ,  "");
            headerData.setString("ordDivDgrCnt" ,  "");
            headerData.setString("lineSctnCd"   ,  OmConstants.LINE_SCTN_CD_ITEM);
            headerData.setString("dcnctOrdYn"   ,  OmConstants.COMMON_N);
            headerData.setString("payCondCd"    ,  "");
            headerData.setString("tranCondCd"   ,  "");

            headerData.setString("giCnclReasonCd",  "");

            headerData.setString("aptdDlyCd"    ,  "");
            headerData.setString("selfTranYn"   ,  OmConstants.COMMON_N);
            headerData.setString("ordVerifyYn"  ,  OmConstants.COMMON_Y);

            headerData.setString("custExcaOfcrNm",  "");
            headerData.setString("returnGoodsCustOrdNo" ,  header.getString("returnGoodsCustOrdNo", 0));
            headerData.setString("returnGoodsCustVdspNo",  header.getString("returnGoodsCustVdspNo", 0));

            headerData.setString("regrId",  header.getString("regrId", 0));
            headerData.setString("mdfrId",  header.getString("mdfrId", 0));
        } catch(Exception se) {
            headerData = null;
        }
        return headerData;
    }

    private LMultiData getReturnGoodsItem(LData header, LMultiData item) throws LException {
        LMultiData itemData = new LMultiData();
        try {
            LData tItem = null;
            if(item != null && item.getDataCount() > 0) {
                for(int i=0; i < item.getDataCount(); i++) {
                    tItem = new LData();
                    tItem.setString("salesOrdNo"    ,  header.getString("salesOrdNo"));
                    tItem.setString("lineNo"        ,  Integer.toString((i*10) + 10));
                    tItem.setString("custCd"        ,  item.getString("custCd", i));
                    tItem.setString("itemCd"        ,  item.getString("itemCd", i));
                    tItem.setString("basisItemCd"   ,  item.getString("basisItemCd", i));
                    tItem.setString("custOrdLineNo" ,  "");
                    tItem.setString("itemGradeCd"   ,  "");
                    tItem.setString("ordQty"        ,  item.getString("ordQty", i));
                    tItem.setString("qtyUnitCd"     ,  item.getString("qtyUnitCd", i));
                    tItem.setString("ordWgt"        ,  item.getString("ordWgt", i));
                    tItem.setString("wgtUnitCd"     ,  item.getString("wgtUnitCd", i));
                    tItem.setString("admt"          ,  "0");
                    tItem.setString("ordCbm"        ,  "0");
                    tItem.setString("basisUnitCd"   ,  item.getString("basisUnitCd", i));
                    tItem.setString("batNo"         ,  item.getString("batNo", i));
                    tItem.setString("custBatNo"     ,  "");
                    tItem.setString("mnfNo"         ,  "");
                    tItem.setString("lotNo"         ,  "");
                    tItem.setString("prdtReqNo"     ,  item.getString("prdtReqNo", i));
                    tItem.setString("prdtPrarYmd"   ,  "");
                    tItem.setString("plantCd"       ,  item.getString("plantCd", i));
                    tItem.setString("salesUprice"   ,  "");
                    tItem.setString("custRefNo"     ,  "");
                    tItem.setString("feSctnCd"      ,  "");
                    tItem.setString("cntrSizeCd"    ,  "");
                    tItem.setString("cntrNo"        ,  "");
                    tItem.setString("dangerSctnCd"  ,  "");
                    tItem.setString("sealNo1"       ,  "");
                    tItem.setString("sealNo2"       ,  "");
                    tItem.setString("pckgUnitCd"    ,  "");
                    tItem.setString("pckgQty"       ,  "0");
                    tItem.setString("maxTmpt"       ,  "");
                    tItem.setString("minTmpt"       ,  "");

                    tItem.setString("dptArCd"       ,  header.getString("dptArCd"));
                    tItem.setString("dptArTypeCd"   ,  header.getString("dptArTypeCd"));
                    tItem.setString("dptArZipCd"    ,  header.getString("dptArZipCd"));
                    tItem.setString("dptArZipAddr"  ,  header.getString("dptArZipAddr"));
                    tItem.setString("dptArDtlAddr"  ,  header.getString("dptArDtlAddr"));
                    tItem.setString("dptArOfcrNm"   ,  "");
                    tItem.setString("dptArOfcrTelNo",  "");

                    tItem.setString("arvArCd"       ,  header.getString("arvArCd"));
                    tItem.setString("arvArTypeCd"   ,  header.getString("arvArTypeCd"));
                    tItem.setString("arvArZipCd"    ,  header.getString("arvArZipCd"));
                    tItem.setString("arvArZipAddr"  ,  header.getString("arvArZipAddr"));
                    tItem.setString("arvArDtlAddr"  ,  header.getString("arvArDtlAddr"));
                    tItem.setString("arvArOfcrNm"   ,  "");
                    tItem.setString("arvArOfcrTelNo",  "");

                    tItem.setString("strtReqYmd"    ,  "");
                    tItem.setString("strtReqHm"     ,  "");
                    tItem.setString("aptdReqYmd"    ,  header.getString("aptdReqYmd"));
                    tItem.setString("aptdReqHm"     ,  header.getString("aptdReqHm"));
                    tItem.setString("ordReasonCd"   ,  "");
                    tItem.setString("bookingNo"     ,  "");
                    tItem.setString("progStatCd"    ,  "");
                    tItem.setString("vanningGrpId"  ,  "");
                    tItem.setString("prdtYmd"       ,  "");
                    tItem.setString("polCd"         ,  "");
                    tItem.setString("schdNo"        ,  "");
                    tItem.setString("sctnCd"        ,  "");
                    tItem.setString("rptItemNm"     ,  "");
                    tItem.setString("clsExprYn"     ,  OmConstants.COMMON_N);
                    tItem.setString("leadTimeExprYn",  OmConstants.COMMON_N);
                    tItem.setString("ltrmOrdYn"     ,  OmConstants.COMMON_N);
                    tItem.setString("rmk"           ,  "");
                    tItem.setString("expOrdNo"      ,  "");
                    tItem.setString("dptPortPrarYmd",  "");
                    tItem.setString("arvPortPrarYmd",  "");
                    tItem.setString("giReqYmd"      ,  "");
                    tItem.setString("stdWgt"        ,  "");
                    tItem.setString("palletQty"     ,  "0");
                    tItem.setString("morePmsr"      ,  "0");
                    tItem.setString("lessPmsr"      ,  "0");
                    tItem.setString("cntrDcsnOfcrId",  "");
                    tItem.setString("cntrDcsnDate"  ,  "");
                    tItem.setString("pculCd"        ,  item.getString("pculCd", i));
                    tItem.setString("mnCd"          ,  item.getString("mnCd", i));
                    tItem.setString("dcsnYn"        ,  OmConstants.COMMON_N);
                    tItem.setString("workCntrCd"    ,  "");
                    tItem.setString("delivDlyYn"    ,  "");
                    tItem.setString("cmptYmd"       ,  "");
                    tItem.setString("ordVerifyYn"   ,  OmConstants.COMMON_Y);
                    tItem.setString("returnGoodsCustLineNo" ,  item.getString("returnGoodsCustLineNo", i));
                    tItem.setString("returnGoodsCustMnfNo"  ,  item.getString("returnGoodsCustMnfNo", i));
                    tItem.setString("delYn"         ,  OmConstants.COMMON_N);
                    tItem.setString("regrId"        ,  item.getString("regrId", i));
                    tItem.setString("mdfrId"        ,  item.getString("mdfrId", i));

                    itemData.addLData(tItem);
                }
            }

        } catch(Exception se) {
            itemData = null;
        }
        return itemData;
    }

    /**
     * 전주페이퍼수출반품오더 등록
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveCancelGiExport(LMultiData inputData) throws LException {
        LMultiData header   = (LMultiData)inputData.get("IN_DS1", 0);
        LMultiData item     = (LMultiData)inputData.get("IN_DS2", 0);
        LCommonDao lDao = new LCommonDao();
        try {
            laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
            LData checkData = null;
            if(header != null && header.getDataCount() > 0) {
                checkData = header.getLData(0);
                if(checkData != null) {
//                  if( checkData.getString("arvArCd") != null && checkData.getString("arvArCd").equals("1000")
//                          && checkData.getString("cargoFormCd") != null && checkData.getString("cargoFormCd").equals(OmConstants.CARGO_FORM_CONTAINER)) {
//                      throw new LBizException("전주센터 컨테이너 오더는 반품대상이 아닙니다.");
//                  }

                    if( checkData.getString("cargoFormCd") != null && checkData.getString("cargoFormCd").equals(OmConstants.CARGO_FORM_CONTAINER)) {
                        throw new LBizException("컨테이너 오더는 반품대상이 아닙니다.");
                    }


                    LData check = null;
                    if(checkData.getString("cargoFormCd") != null && checkData.getString("cargoFormCd").equals(OmConstants.CARGO_FORM_BULK)) {
//                      if(checkData.getString("arvArCd") != null && checkData.getString("arvArCd").equals("1000")) {
//                          check = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveCancelGiExportJeonjuBulk", checkData);
//                      } else {
//                          check = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveCancelGiExportChungwonBulk", checkData);
//                      }

                        // 전주센터로만 처리
                        check = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveCancelGiExportJeonjuBulk", checkData);

                        if(check != null) {
                            if( (Double.parseDouble(checkData.getString("ordQtySum")) != Double.parseDouble(check.getString("ordQtySum")))
                                    || (Double.parseDouble(checkData.getString("ordWgtSum")) != Double.parseDouble(check.getString("ordWgtSum"))) ) {
                                throw new LBizException("이미 반품처리 되었습니다.");
                            }
                        }
                    }
                }
            }
            LData headerData = getReturnGoodsHeader(header);
            LMultiData itemData = null;
            LData expData = null;
            if(headerData != null && headerData.getString("salesOrdNo") != null && !headerData.getString("salesOrdNo").equals("")) {
                itemData = getReturnGoodsItem(headerData, item);
                expData = new LData();
                expData.setString("salesOrdNo", headerData.getString("salesOrdNo"));
                expData.setString("regrId", headerData.getString("regrId"));
                expData.setString("mdfrId", headerData.getString("mdfrId"));

                dao.add("cud/om/tb_om02001/createTbOm02001Return", headerData);
                dao.add("cud/om/tb_om02002/createTbOm02002Return", itemData);
                dao.add("cud/om/tb_om02003/createTplOceanExpSalesOrdFwd", expData);

                dao.executeUpdate();

                LData param = new LData();
                param.setString("salesOrdNo"    , headerData.getString("salesOrdNo"));
                param.setString("mdfDlySctnCd"  , "");
                param.setString("regrId"        , headerData.getString("regrId"));
                param.setString("mdfrId"        , headerData.getString("mdfrId"));
                param.set("LCompoundDao"        , dao);
                setSalesOrdHistory(param);

                IWorkRouteMngt pbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);

                LData workRoute = new LData();
                workRoute.setString("salesOrdNo",   headerData.getString("salesOrdNo"));
                workRoute.setString("dptArCd",      headerData.getString("dptArCd"));
                workRoute.setString("dptArTypeCd",  headerData.getString("dptArTypeCd"));
                workRoute.setString("dptArZipCd",   headerData.getString("dptArZipCd"));
                workRoute.setString("dptArZipAddr", headerData.getString("dptArZipAddr"));
                workRoute.setString("dptArDtlAddr", headerData.getString("dptArDtlAddr"));
                workRoute.setString("arvArCd",      headerData.getString("arvArCd"));
                workRoute.setString("arvArTypeCd",  headerData.getString("arvArTypeCd"));
                workRoute.setString("arvArZipCd",   headerData.getString("arvArZipCd"));
                workRoute.setString("arvArZipAddr", headerData.getString("arvArZipAddr"));
                workRoute.setString("arvArDtlAddr", headerData.getString("arvArDtlAddr"));
                workRoute.setString("strtReqYmd",   headerData.getString("strtReqYmd"));
                workRoute.setString("strtReqHm",    headerData.getString("strtReqHm"));
                workRoute.setString("aptdReqYmd",   headerData.getString("aptdReqYmd"));
                workRoute.setString("aptdReqHm",    headerData.getString("aptdReqHm"));
                workRoute.setString("loadDlyYn",    headerData.getString("loadDlyYn"));
                workRoute.setString("loadDlyRltdSalesOrdNo",    headerData.getString("loadDlyRltdSalesOrdNo"));
                workRoute.setString("regrId",       headerData.getString("regrId"));
                workRoute.setString("mdfrId",       headerData.getString("mdfrId"));
                workRoute.set("LCompoundDao", dao);


                pbc.createBasisWorkRoute(workRoute, itemData);//기본작업경로 생성

            } else {
                throw new LBizException("반품오더 생성시 오류가 발생했습니다.");
            }
            LMultiData retData = new LMultiData();
            retData = lDao.executeQuery("select/om/om02/salesOrd/retrieveIsdBasisCopyTgtOrd", headerData);
            return retData;
        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "saveCancelGiExport()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveCancelGiExport()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }

    }

    /**
     * 출고취소오더 조회
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveGiCnclOrdList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try {
            return dao.executeQuery("select/om/om02/salesOrd/retrieveGiCnclOrdList", inputData);
        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveGiCnclOrdList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 출고취소오더 조회
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return void
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveGiCnclOrdItemList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();
        try {
            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveGiCnclSalesOrdItemList", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveGiCnclOrdItemList", inputData));

            return dataHolder;
        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveGiCnclOrdList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }


    /**
     * 수입B/L 가용재고 생성 프로시져 호출 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LData createImpBlAvailStock(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData retData  = new LMultiData();
        LMultiData realData = new LMultiData();
        try{

            return (LData)dao.executeUpdateProcedure("cud/om/tb_om03021_bl/createImpBlAvailStock", inputData);

        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createImpBlAvailStock()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 수입출고 아이템 분배내역을 조회하는 메소드.(개선:가용재고생성로직적용)
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveImpGiImprvItemDiv(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        LMultiData dataHolder = new LMultiData();

        try{
            dataHolder.add("IN_DS1", dao.executeQuery("select/om/om02/salesOrd/retrieveAvailBlListImprv", inputData));
            dataHolder.add("IN_DS2", dao.executeQuery("select/om/om02/salesOrd/retrieveOceanImpGiDivHist", inputData));
            return dataHolder;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveImpGiItemDiv()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /** 판매오더별 가용재고 체크
     *  @param 판매오더
     *
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LData checkAvailStock(LData salesOrd) throws LException {
        laf.application.dao.LCompoundDao dao = CompDaoUtil.getTransaction(salesOrd);
        //LMultiData dataHolder = new LMultiData();
        try {
            LData tempData = new LData();

            LData ordTypeData = dao.executeQueryForSingle("select/om/om02/salesOrd/retrieveOrdTypeSalesOrd", salesOrd);
            tempData.setString("ptnCd", salesOrd.getString("ctrtCustCd"));
            tempData.setString("inhYn", OmConstants.INH_YN);

            LMultiData salesOrdItem = dao.executeQuery("select/om/om02/salesOrd/retrieveBackOrderItemList2", salesOrd);;

            LData ptnMasterData             = dao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrievePtnInfoDtlSalesOrd", tempData);
            String availStockConfYn         = ordTypeData.getString("availStockConfYn"); //가용재고확인여부
            String masterAvailStockConfYn   = ptnMasterData.getString("availStockConfYn") == null ? "N" : ptnMasterData.getString("availStockConfYn");//가용재고확인여부 파트너마스터
            String logisSvcSctnCd           = ordTypeData.getString("logisSvcSctnCd");//물류서비스구분
            String expImpDomSctnCd          = ordTypeData.getString("expImpDomSctnCd");//수출입내수구분
            String ordKindCd                = ordTypeData.getString("ordKindCd"); //오더종류코드
            salesOrd.setString("expImpDomSctnCd", expImpDomSctnCd);

            String logisArCd = ordTypeData.getString("logisArCd"); //물류지역구분
            salesOrd.setString("backOrdYn","N");

            /* 13. 가용재고확인 (가용재고확인여부가 'Y'인 경우에만 실행함.)
                아이템단위로 개별로 가용재고를 확인 (아이템마스터의 기본단위로 비교함)
                창고코드 - 출고작업장코드, 고객코드 - 계약고객코드, 아이템코드, 배치번호, 단위코드(아이템마스터에 있는 기본단위), 아이템등급코드
                기본단위가 수량단위(기본단위의 필터1)이면 오더수량과 비교, 중량이면 중량과 비교, 부피단위이면 CBM과 비교
                가용재고가 부족한 라인아이템이 하나라도 있으면 대기오더여부를 'Y'로 세팅.
             */

            //납기보류코드가 'ZZ'이 아닌경우 대기오더여부 'Y'
            String aptdDlyCd = salesOrd.getString("aptdDlyCd");
            if(!aptdDlyCd.equals("ZZ") && !aptdDlyCd.trim().equals(""))
                salesOrd.setString("backOrdYn","Y");

            //제지 고객오더유형이 DOGC인 경우  분배된 경우는 기존처럼 처리하고 미분배된 경우 분배대기상태로 처리한다.
            if((OmConstants.CUST_CO_CD_HP.equals(salesOrd.getString("rptCustCd"))
                    || ("Y".equals(ART_YN) && salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_AT))
                ) &&
               OmConstants.CUST_ORD_TYPE_DOGC.equals(salesOrd.getString("custOrdTypeCd"))) {
                LData workRoute             = dao.executeQueryForSingle("select/om/om03/workRouteMngt/retrieveWorkRouteList", salesOrd);
                // 작업경로가 생성되지 않은 경우 (신규나 분배대기인 경우)
                if(workRoute.getString("salesOrdNo") == null || "".equals(workRoute.getString("salesOrdNo"))) {
                    salesOrd.setString("backOrdYn","Y");
                }
            }

            int cbnAvailCnt1 = 0; // 정상건수(커피빈)
            int cbnAvailCnt2 = 0; // 가용부족건수(커피빈)
            for(int i = 0;i<salesOrdItem.getDataCount();i++){
                cbnAvailCnt1 = cbnAvailCnt1 + 1;

                if((availStockConfYn.equals("Y") && masterAvailStockConfYn.equals("Y"))
                    || (salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_HH) &&
                            (salesOrd.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_2041)
                                    || salesOrd.getString("ordTypeCd").equals(OmConstants.ORD_TYPE_CD_2043)
                        ))){

                    double ordQty = 0;
                    double ordWgt = 0;
                    double ordCbm = 0;
                    boolean itemCdCheck  = false;
                    boolean batNoCheck   = false;
                    boolean pculCdCheck  = false;
                    boolean mnCdCheck    = false;
                    boolean dptArCdCheck = false;
                    boolean plantCdCheck = false;
                    String itemCdOld    = "";
                    String batNoOld     = "";
                    String pculCdOld    = "";
                    String mnCdOld      = "";
                    String dptArCdOld   = "";
                    String plantCdOld   = "";

                    if(salesOrdItem.containsKey("itemCdOld")) {
                        itemCdOld = salesOrdItem.getString("itemCdOld", i);
                        if(itemCdOld.equals(salesOrdItem.getString("itemCd", i))) {
                            itemCdCheck = true;
                        } else {
                            itemCdCheck = false;
                        }
                    } else {
                        itemCdCheck = true;
                    }
                    if(salesOrdItem.containsKey("batNoOld")) {
                        batNoOld = salesOrdItem.getString("batNoOld", i);
                        if(batNoOld.equals(salesOrdItem.getString("batNo", i))) {
                            batNoCheck = true;
                        } else {
                            batNoCheck = false;
                        }
                    } else {
                        batNoCheck = true;
                    }

                    if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                        if(salesOrdItem.containsKey("pculCdOld")) {
                            pculCdOld = salesOrdItem.getString("pculCdOld", i);
                            if(pculCdOld.equals(salesOrdItem.getString("pculCd", i))) {
                                pculCdCheck = true;
                            } else {
                                pculCdCheck = false;
                            }
                        } else {
                            pculCdCheck = true;
                        }
                        if(salesOrdItem.containsKey("mnCdOld")) {
                            mnCdOld = salesOrdItem.getString("mnCdOld", i);
                            if(mnCdOld.equals(salesOrdItem.getString("mnCd", i))) {
                                mnCdCheck = true;
                            } else {
                                mnCdCheck = false;
                            }
                        } else {
                            mnCdCheck = true;
                        }
                    } else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                        if(salesOrdItem.containsKey("plantCdOld")) {
                            plantCdOld = salesOrdItem.getString("plantCdOld", i);
                            if(plantCdOld.equals(salesOrdItem.getString("plantCd", i))) {
                                plantCdCheck = true;
                            } else {
                                plantCdCheck = false;
                            }
                        } else {
                            plantCdCheck = true;
                        }
                    }
                    if(salesOrdItem.containsKey("dptArCdOld")) {
                        dptArCdOld = salesOrdItem.getString("dptArCdOld", i);
                        if(dptArCdOld.equals(salesOrdItem.getString("dptArCd", i))) {
                            dptArCdCheck = true;
                        } else {
                            dptArCdCheck = false;
                        }
                    } else {
                        dptArCdCheck = true;
                    }

                    if(salesOrdItem.containsKey("ordQtyOld")){

                        if(itemCdCheck && batNoCheck && dptArCdCheck) {//아이템코드와 배치번호가 변경된것이 없으면
                            if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                                if(pculCdCheck && mnCdCheck) {//노스케 특성/호기가 변경된것이 없으면
                                    ordQty = Double.parseDouble(salesOrdItem.getString("ordQty",i)) - Double.parseDouble(salesOrdItem.getString("ordQtyOld",i));
                                    ordWgt = Double.parseDouble(salesOrdItem.getString("ordWgt",i)) - Double.parseDouble(salesOrdItem.getString("ordWgtOld",i));
                                    ordCbm = Double.parseDouble(salesOrdItem.getString("ordCbm",i)) - Double.parseDouble(salesOrdItem.getString("ordCbmOld",i));
                                } else {
                                    ordQty = Double.parseDouble(salesOrdItem.getString("ordQty",i));
                                    ordWgt = Double.parseDouble(salesOrdItem.getString("ordWgt",i));
                                    ordCbm = Double.parseDouble(salesOrdItem.getString("ordCbm",i));
                                }
                            } else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                                if(plantCdCheck) {//라파즈 생산처코드가 변경되지 않았으면
                                    ordQty = Double.parseDouble(salesOrdItem.getString("ordQty",i)) - Double.parseDouble(salesOrdItem.getString("ordQtyOld",i));
                                    ordWgt = Double.parseDouble(salesOrdItem.getString("ordWgt",i)) - Double.parseDouble(salesOrdItem.getString("ordWgtOld",i));
                                    ordCbm = Double.parseDouble(salesOrdItem.getString("ordCbm",i)) - Double.parseDouble(salesOrdItem.getString("ordCbmOld",i));
                                } else {
                                    ordQty = Double.parseDouble(salesOrdItem.getString("ordQty",i));
                                    ordWgt = Double.parseDouble(salesOrdItem.getString("ordWgt",i));
                                    ordCbm = Double.parseDouble(salesOrdItem.getString("ordCbm",i));
                                }
                            } else {
                                ordQty = Double.parseDouble(salesOrdItem.getString("ordQty",i)) - Double.parseDouble(salesOrdItem.getString("ordQtyOld",i));
                                ordWgt = Double.parseDouble(salesOrdItem.getString("ordWgt",i)) - Double.parseDouble(salesOrdItem.getString("ordWgtOld",i));
                                ordCbm = Double.parseDouble(salesOrdItem.getString("ordCbm",i)) - Double.parseDouble(salesOrdItem.getString("ordCbmOld",i));
                            }
                        } else {
                            ordQty = Double.parseDouble(salesOrdItem.getString("ordQty",i));
                            ordWgt = Double.parseDouble(salesOrdItem.getString("ordWgt",i));
                            ordCbm = Double.parseDouble(salesOrdItem.getString("ordCbm",i));
                        }
                    }else{
                        ordQty = Double.parseDouble(salesOrdItem.getString("ordQty",i));
                        ordWgt = Double.parseDouble(salesOrdItem.getString("ordWgt",i));
                        ordCbm = salesOrdItem.getString("ordCbm",i)==null?0:Double.parseDouble(salesOrdItem.getString("ordCbm",i));
                        //ordCbm = Double.parseDouble(salesOrdItem.getString("ordCbm",i));
                    }
                    if(itemCdCheck && batNoCheck && dptArCdCheck) {
                        if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                            if(pculCdCheck && mnCdCheck) {
                                if(!(ordQty>0 || ordWgt>0 || ordCbm>0)) continue;
                            }
                        } else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                            if(plantCdCheck) {
                                if(!(ordQty>0 || ordWgt>0 || ordCbm>0)) continue;
                            }
                        } else {
                            if(!(ordQty>0 || ordWgt>0 || ordCbm>0)) continue;
                        }
                    }

                    tempData.setString("workPlCd", salesOrd.getString("dptArCd"));
                    tempData.setString("custCd", salesOrdItem.getString("custCd", i));
                    tempData.setString("itemCd", salesOrdItem.getString("basisItemCd", i));

                    tempData.setString("batCd", salesOrdItem.getString("batNo", i));

                    //tempData.setString("qtyUnitCd", salesOrdItem.getString("basisUnitCd", i));
                    if(salesOrdItem.containsKey("itemGradeCd"))
                        tempData.setString("itemGradeCd", salesOrdItem.getString("itemGradeCd", i));

                    if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_NC)) {
                        tempData.setString("pculCd" , salesOrdItem.getString("pculCd", i));
                        tempData.setString("mnCd"   , salesOrdItem.getString("mnCd", i));
                    }else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_RP)) {
                        tempData.setString("plantCd", salesOrdItem.getString("plantCd", i));
                    }else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_CB)) {
                        String col03 = salesOrdItem.getString("col03",i)==null?"":salesOrdItem.getString("col03",i);
                        tempData.setString("itemGradeCd", col03);
                        String col01 = salesOrdItem.getString("col01",i)==null?"":salesOrdItem.getString("col01",i);
                        tempData.setString("col01", col01);
                    }else if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_MR)) {
                        String custMoveTypeCd = salesOrd.getString("custMoveTypeCd")==null?"":salesOrd.getString("custMoveTypeCd");
                        String lotable5 = "";
                        if("GR_VMI".equals(custMoveTypeCd)){
                            lotable5 = "VMI";
                        }else if ("GR_STOCK".equals(custMoveTypeCd)){
                            lotable5 = "STOCK";
                        }else{
                            lotable5 = "TR";
                        }
                        tempData.setString("lotable5"   , lotable5);
                    }

                    tempData.setString("custOrdTypeCd", salesOrd.getString("custOrdTypeCd"));

                    // 이브자리 오더유형  301, 305 가용재고 체크 안함 => 다시 가용재고 체크하기로 함(305) : 09.15
                    //LLog.debug.println("salesOrd **************############### :"+salesOrd);
                    String eveCustMoveTypeCd = salesOrd.getString("custMoveTypeCd")==null?"":salesOrd.getString("custMoveTypeCd");
                    if( (salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_EV) ||salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_SS))
                        && ("3".equals(salesOrd.getString("custOrdTypeCd")))
                        && ("01".equals(eveCustMoveTypeCd))
//                          || "05".equals(salesOrd.getString("custMoveTypeCd")))
                        ) {
                        salesOrd.setString("backOrdYn","N");
                    // 가용재고 체크 skip - Cross-docking 오더번호
                    } else  if("N".equals(ART_YN) && salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_AT)
                        && salesOrd.getString("col11")!=null && !"".equals(salesOrd.getString("col11"))
                        && "Y".equals(salesOrd.getString("col11"))){
                            salesOrd.setString("backOrdYn","N");

                    }else{

                        LMultiData availStockData = retrieveAvailStock(tempData);
                        LLog.debug.println("availStockData **************############### :"+availStockData);

                        if(availStockData.getString("basisUnitAttr",0)==null || availStockData.getString("basisUnitAttr",0).equals("")){
                            //salesOrd.setString("backOrdYn","Y");
                            if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_CB)){
                                cbnAvailCnt2 = cbnAvailCnt2 + 1;
                                salesOrdItem.modify("ordReasonCd", i, "04");//재고부족
                                dao.add("cud/om/tb_om02002/updateOrdReasonCd", salesOrdItem.getLData(i));
                                dao.executeUpdate();
                            }else{
                                salesOrd.setString("backOrdYn","Y");
                            }

                        }else if(availStockData.getString("basisUnitAttr",0).equals("QTY_UNIT_CD")){
                            if(availStockData.getDouble("availStock", 0)< ordQty){
                                if(salesOrdItem.getString("custCd", i).equals(OmConstants.CUST_CO_CD_CB)){
                                    cbnAvailCnt2 = cbnAvailCnt2 + 1;
                                    salesOrdItem.modify("ordReasonCd", i, "04");//재고부족

                                    dao.add("cud/om/tb_om02002/updateOrdReasonCd", salesOrdItem.getLData(i));
                                    dao.executeUpdate();
                                }else{
                                    salesOrd.setString("backOrdYn","Y");
                                }
                            }
                        }else if(availStockData.getString("basisUnitAttr",0).equals("WGT_UNIT_CD")){
                            if(availStockData.getDouble("availStock", 0)< ordWgt)
                                salesOrd.setString("backOrdYn","Y");

                        }else if(availStockData.getString("basisUnitAttr",0).equals("VOL_UNIT_CD")){
                            if(availStockData.getDouble("availStock", 0)< ordCbm)
                                salesOrd.setString("backOrdYn","Y");
                        }
                    }
                }
            }

            if(salesOrd.getString("rptCustCd").equals(OmConstants.CUST_CO_CD_CB)){
                if(cbnAvailCnt2 > 0 ){ // 가용재고부족이 하나이상 부족인 경우
                    if( cbnAvailCnt1 != cbnAvailCnt2){ // 중간 아이템이 부족인게 있으면 대기오더 아님
                        salesOrd.setString("backOrdYn","N");
                    }else salesOrd.setString("backOrdYn","Y"); // 모든 아이템이  부족이면 대기오더
                }
            }

            tempData.setString("backOrdYn",salesOrd.getString("backOrdYn"));
            LLog.debug.println("*********tempData :"+tempData);
//          LMultiData mTempData = new LMultiData();
//          mTempData.addLData(tempData);
//          return mTempData;

            return tempData;
        }  catch (Exception se) {
            se.printStackTrace();
            LLog.err.println(  this.getClass().getName() + "." + "checkAvailStock()" + "=>" + se.getMessage());
            throw new LSysException(se.getMessage(), se);
        }
    }

    /**
     * 적송오더접근권한 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public String getCorpCd(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();
        String corpCd = "";

        try{
            LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/getCorpCd", inputData);

            if(lData == null || lData.getString("corpCd") == null || "".equals(lData.getString("corpCd"))) {
                lData.setString("corpCd",OmConstants.COMMON_CORP_CD);
                //throw new LBizException("법인코드미존재오류");
            }
            corpCd = lData.getString("corpCd");

            return corpCd;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "getCorpCd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    public String getCustOrdNo(LData inputData) throws LException {
        laf.application.dao.LCompoundDao dao = new laf.application.dao.LCompoundDao();

        try{
            LData lData = dao.executeQueryForSingle("select/om/om02/salesOrd/getCustOrdNo", inputData);

            if(lData == null || lData.getString("custOrdNo") == null || "".equals(lData.getString("custOrdNo"))) {
                throw new LBizException("고객오더번호채번오류");
            }

            String custOrdNo = lData.getString("custOrdNo");

            return custOrdNo;
        } catch (LBizException be) {
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "getCustOrdNo()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 포워딩관리 정보를 저장하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData saveBookingSheetFwd(LMultiData inputData) throws LException {
        LMultiData bookingData = (LMultiData)inputData.get("IN_DS1",0);
        LData paramData = (LData)inputData.get("INPUT", 0);
        LCommonDao dao = new LCommonDao();
//        LCompoundDao cDao = new LCompoundDao();
        laf.application.dao.LCompoundDao comDao = new laf.application.dao.LCompoundDao();

        try{
            LData newSalesOrd       = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveDomSalesOrdExceMngtOrdBasisInfo"    , paramData);
            LMultiData workRoute    = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveWorkRouteBookingNo", paramData);
            LMultiData bookingRslt  = comDao.executeQuery("select/om/om03/workRouteMngt/retrieveBookingRslt", paramData);

            if(paramData.containsKey("isUpdate")) {
                newSalesOrd.setString("cargoFormCd", paramData.getString("cargoFormCd"));
                newSalesOrd.setString("custExcaOfcrNm", paramData.getString("custExcaOfcrNm"));
            }
            newSalesOrd.setString("dptArOfcrNm", paramData.getString("dptArOfcrNm"));

            LLog.debug.println("newSalesOrd"+newSalesOrd);
            LLog.debug.println("paramData"+paramData);

            LData booking = null;
            if(paramData.getString("flag") != null && !paramData.getString("flag").equals("true")) {
                if(bookingData != null && bookingData.getDataCount() > 0) {
                    for(int i=0; i < bookingData.getDataCount(); i++) {
                        if(bookingData.getInt("GauceJobType", i) != GauceDataRow.TB_JOB_DELETE) {
                            booking = bookingData.getLData(i);
                            booking.setString("custCd", paramData.getString("upperPtnCd"));
                            if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_INSERT) {
                                LData existBooking = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExistBookingNo", booking);
                                if(existBooking != null && existBooking.getString("shipCoBookingNo") != null && !existBooking.getString("shipCoBookingNo").equals("")) {
                                    throw new LBizException("*이미 등록된 Booking 입니다.(Booking번호:" + existBooking.getString("shipCoBookingNo") + ") \n" + bookingData.getString("shipCoBookingNo", i) + "로 계속 진행하시겠습니까#");
                                }

                                existBooking = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveExistBookingData", booking);
                                if(existBooking != null && existBooking.getString("shipCoBookingNo") != null && !existBooking.getString("shipCoBookingNo").equals("")) {
                                    throw new LBizException("*이미 등록된 Booking 입니다.(Booking번호:" + existBooking.getString("shipCoBookingNo") + ") \n" + bookingData.getString("shipCoBookingNo", i) + "로 계속 진행하시겠습니까#");
                                }
                            }
                        }
                    }
                }
            }

            String updBookingNo = "";

            if(bookingData != null && bookingData.getDataCount() > 0) {
                for(int i=0; i < bookingData.getDataCount(); i++) {
                    boolean dcsnYn = false;

                    if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE ||  bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE ) {
                        for(int j=0; j < workRoute.getDataCount(); j++) {
                            if(bookingData.getString("bookingNo", i).equals(workRoute.getString("bookingNo", j))) {
                                if(workRoute.getInt("cnt", j) > 0) {
                                    dcsnYn = true;
                                }
                            }
                        }
                        for(int j=0; j < bookingRslt.getDataCount(); j++) {
                            if(bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                                if(bookingRslt.getInt("cnt", j) > 0) {
                                    dcsnYn = true;
                                }
                            }
                        }

                    }

                    if (dcsnYn)
                        updBookingNo = updBookingNo + bookingData.getString("shipCoBookingNo", i);
                }
                if(!updBookingNo.equals("")) {
                    updBookingNo = "Booking NO:" + updBookingNo;
                    throw new LBizException("hsni.om.err.cannotsave?" + updBookingNo);
                }
            }

            LData param = null;
            IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(IOrdDivMngt.class);
            newSalesOrd.setString("mdfrId", paramData.getString("mdfrId"));

            if(paramData.getString("isUpdate") != null && "TRUE".equals(paramData.getString("isUpdate"))){
                comDao.add("cud/om/tb_om02001/updateCustExcaOfcrNm", newSalesOrd);
                comDao.executeUpdate();
            }

            if(paramData.containsKey("isUpdate")) {
                comDao.add("cud/om/tb_om02001/updateSalesOrd", newSalesOrd);
                comDao.executeUpdate();

                paramData.set("LCompoundDao", comDao);
                setSalesOrdHistory(paramData);

                if(workRoute != null && workRoute.getDataCount() > 0) {
                    for(int i=0; i < workRoute.getDataCount(); i++) {
                        param = workRoute.getLData(i);
                        param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                        param.setString("workProgStatCd", OmConstants.WORK_PROG_STAT_CD_01);
                        param.setString("regrId", paramData.getString("regrId"));
                        param.setString("mdfrId", paramData.getString("mdfrId"));
                        param.set("LCompoundDao", comDao);

                        pbc.cancelEo(param);

                        pbc.divideEo(param);
                    }
                }

                if(bookingRslt != null && bookingRslt.getDataCount() > 0) {
                    for(int i=0; i < bookingRslt.getDataCount(); i++) {
                        param = bookingRslt.getLData(i);
                        param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                        param.setString("regrId", paramData.getString("regrId"));
                        param.setString("mdfrId", paramData.getString("mdfrId"));
                        param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                        param.set("LCompoundDao", comDao);

                        pbc.divideFwdEo(param);

                        param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_CREATE);

                        pbc.divideFwdEo(param);
                    }
                }

            }


            GauceUtil.fillColValue(bookingData, "regrId", paramData.getString("regrId"));
            GauceUtil.fillColValue(bookingData, "mdfrId", paramData.getString("mdfrId"));
            if(bookingData != null && bookingData.getDataCount() > 0) {
//              LMultiData booking = (LMultiData)bookingData.get("OBJECT_TO_GDRs", 0);

                for(int i=0; i < bookingData.getDataCount(); i++) {
                    for(int j=0; j < bookingRslt.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE
                                    && bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                            param = bookingRslt.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));

                            param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_DELETE);
                            param.set("LCompoundDao", comDao);
                            pbc.divideFwdEo(param);
                        }
                    }

                    if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_INSERT) {
                        try {
                            LData bookingNo = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewBookingNo", bookingData.getLData(i));

                            if(bookingNo != null && bookingNo.getString("bookingNo") != null && !bookingNo.getString("bookingNo").equals("")) {
                                GauceUtil.modiColValue(bookingData, "bookingNo", bookingNo.getString("bookingNo"));
                            }
                        } catch(Exception sse) {
                            GauceUtil.modiColValue(bookingData, "bookingNo", "BK001");
                        }

                        if(bookingData.getLData(i).getString("bookingYmd") == null || bookingData.getLData(i).getString("bookingYmd").equals("")) {
                            bookingData.getLData(i).setString("bookingYmd", DateUtil.getCurrentDateString());
                        }
                        comDao.add("cud/om/tb_om02019/createBookingNew", bookingData.getLData(i));
                    } else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE) {
                        if(bookingData.getLData(i).getString("bookingNo")!=null && !"".equals(bookingData.getLData(i).getString("bookingNo"))){

                        }else{
                            try {
                                LData bookingNo1 = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveNewBookingNo", bookingData.getLData(i));

                                if(bookingNo1 != null && bookingNo1.getString("bookingNo") != null && !bookingNo1.getString("bookingNo").equals("")) {
                                    GauceUtil.modiColValue(bookingData, "bookingNo", bookingNo1.getString("bookingNo"));
                                }
                            } catch(Exception sse) {
                                GauceUtil.modiColValue(bookingData, "bookingNo", "BK001");
                            }
                        }

                        if(bookingData.getLData(i).getString("bookingYmd") == null || bookingData.getLData(i).getString("bookingYmd").equals("")) {
                            //bookingData.getLData(i).setString("bookingYmd", DateUtil.getCurrentDateString());
                            GauceUtil.modiColValue(bookingData, "bookingYmd", DateUtil.getCurrentDateString());

                        }
                        //LLog.debug.println("DateUtil.getCurrentDateString()"+DateUtil.getCurrentDateString());
                        //LLog.debug.println("bookingData.getLData(i) : "+bookingData.getLData(i));

                        comDao.add("cud/om/tb_om02019/updateSalesOrdBookingNew", bookingData.getLData(i));
                    } else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE) {
                        comDao.add("cud/om/tb_om04002/deleteFisProgRslt", bookingData.getLData(i));
                        comDao.add("cud/om/tb_om02019/deleteBooking", bookingData.getLData(i));
                    }
                }
                comDao.executeUpdate();
            }
//          cDao.setInsertQuery("cud/om/tb_om02019/createBooking");
//          cDao.setUpdateQuery("cud/om/tb_om02019/updateSalesOrdBooking");
//          cDao.setDeleteQuery("cud/om/tb_om02019/deleteBooking");
//          cDao.addWithJobType(bookingData);
//          cDao.executeUpdate();

            paramData.setDouble("totWgt", Double.parseDouble(bookingData.getString("bookingWgt", 0)));
            paramData.setString("wgtUnitCd", bookingData.getString("wgtUnitCd", 0));

            comDao.add("cud/om/tb_om02001/updateSalesOrdFwd", paramData);
            comDao.add("cud/om/tb_om02003/updateShipper", paramData);
            comDao.executeUpdate();

            if(bookingData != null && bookingData.getDataCount() > 0) {
                for(int i=0; i < bookingData.getDataCount(); i++) {
                    for(int j=0; j < workRoute.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                            && bookingData.getString("bookingNo", i).equals(workRoute.getString("bookingNo", j))) {
                            param = workRoute.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("workPrgoStatCd", OmConstants.WORK_PROG_STAT_CD_01);
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));
                            param.set("LCompoundDao", comDao);

                            // 확정이후는 변경 안되도록 함
                            LData dcsnCnt = comDao.executeQueryForSingle("select/om/om03/workRouteMngt/checkDcsnCnt", param);

                            if(dcsnCnt.getInt("cnt") > 0) {  // 2009.11.10 cys.
                                // 확정이면 Skip : 분배-계열해상수출포워딩에서 Booking 분할해서 하나 더 생성할경우 이 로직을  실행오더취소를 Skip함
                            }else{
                                pbc.cancelEo(param);

                                pbc.divideEo(param);
                            }
                        }
                    }
                    for(int j=0; j < bookingRslt.getDataCount(); j++) {
                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE
                            && bookingData.getString("bookingNo", i).equals(bookingRslt.getString("bookingNo", j))) {
                            param = bookingRslt.getLData(j);
                            param.setString("salesOrdNo", paramData.getString("salesOrdNo"));
                            param.setString("regrId", paramData.getString("regrId"));
                            param.setString("mdfrId", paramData.getString("mdfrId"));

                            param.setString("trmsSctnCd", OmConstants.TRMS_SCTN_CD_UPDATE);
                            param.set("LCompoundDao", comDao);
                            pbc.divideFwdEo(param);
                        }
                    }
                }
            }

            //한솔제지 스케쥴 전송

            if( (paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_HP)
                    || ("Y".equals(ART_YN) && paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_AT)))
                    && paramData.getString("expTypeCdData") != null
                    && paramData.getString("expTypeCdData").equals(OmConstants.EXP_TYPE_CD_01)) {
                SalesOrdMngtWSC wsc = new SalesOrdMngtWSC();
                String cargoFormCd = "";

                cargoFormCd = paramData.getString("cargoFormCd");
                if(cargoFormCd == null || cargoFormCd.equals("")) {
                    cargoFormCd = "C";
                }
                GauceUtil.fillColValue(bookingData, "cargoFormCd", cargoFormCd);
                LData line = null;
                LMultiData vesselSchds = new LMultiData();
                LData vessel = null;
                if(bookingData != null && bookingData.getDataCount() > 0) {
                    for(int i=0; i < bookingData.getDataCount(); i++) {
                        line = new LData();
                        line.setString("shipCoSignCd", bookingData.getString("shipCoCd", i));
                        LData lineData = comDao.executeQueryForSingle("select/ma/ma01/ptnInfoMngt/retrieveShipCoInfo", line);

                        vessel = new LData();

                        vessel.setString("schdType"         , bookingData.getString("schdType"      , i));
                        vessel.setString("schdNo"           , bookingData.getString("schdNo"        , i));  //스케줄관리번호
                        vessel.setString("podCd"            , bookingData.getString("podCd"         , i));  // POD 코드
                        vessel.setString("polCd"            , bookingData.getString("polCd"         , i));  //POL 코드
                        vessel.setString("shipNm"           , bookingData.getString("shipNm"        , i));  //선박명
                        vessel.setString("portCnt"          , bookingData.getString("portCnt"       , i));  //항차
                        vessel.setString("inlandPortCd"     , bookingData.getString("inlandPortCd"  , i));  //내륙도착지코드
                        vessel.setString("dptPortPrarYmd"   , bookingData.getString("dptPortPrarYmd", i));  //
                        vessel.setString("arvPortPrarYmd"   , bookingData.getString("arvPortPrarYmd", i));  //
                        vessel.setString("inlandPortNm"     , bookingData.getString("inlandPortNm"  , i));  //내륙도착지명
                        vessel.setString("cyClsYmd"         , bookingData.getString("cyClsYmd"      , i));  //CY Closing 일자
                        vessel.setString("cyClsHms"         , bookingData.getString("cyClsHms"      , i));  //CY Closing 시간

                        if(lineData != null && lineData.getString("custShipCoCd") != null && !lineData.getString("custShipCoCd").equals("")) {
                            vessel.setString("shipCoCd"     , lineData.getString("custShipCoCd"));
                        } else {
                            throw new LBizException("등록되지 않은 선사코드(Liner)입니다. Booking No:" + bookingData.getString("shipCoBookingNo", i) + ", 선사코드:" + bookingData.getString("shipCoCd", i));
                        }
                        vessel.setString("cargoFormCd"      , bookingData.getString("cargoFormCd", i));


                        vesselSchds.addLData(vessel);
                    }
                }
                LMultiData resultData = wsc.transferHansolpaperVesselSchedule(vesselSchds);

                if(resultData != null && resultData.getDataCount() > 0) {
                    for(int i=0; i < resultData.getDataCount(); i++) {
                        if(resultData.getString("type", i).equals("E")) {

                            throw new LBizException("hsni.om.err.interface?"+resultData.getString("message", i));
                        }
                    }
                }
            // 전주페이퍼 부킹 등록하면 전주페이퍼 디비에 등록 처리 하도록 함
// start
            } else if(paramData.getString("upperPtnCd").equals(OmConstants.CUST_CO_CD_NC)) {
                //comDao.add("cud/om/sapd51t/updateScheduleMapping", bookingData);
                //comDao.executeUpdate();

/**
                // 전주페이퍼 오픈DB 부킹등록 로직 제거 2016-02-15  
                if(bookingData != null && bookingData.getDataCount() > 0) {
                    for(int i=0; i < bookingData.getDataCount(); i++) {

                        LData lBookingInfo = new LData();
                        lBookingInfo = bookingData.getLData(i);

                        LData lCustOrdNo = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSORejectHeaderParam", lBookingInfo);
                        lBookingInfo.setString("custOrdNo"  , lCustOrdNo.getString("custOrdNo"));      // 고객오더 번호
                        LData lFisinfo = comDao.executeQueryForSingle("select/om/om02/salesOrd/retrieveSalesOrdFISOrdInfo", lBookingInfo);
                        String fclLclSctnCd       = lFisinfo.getString("fclLclSctnCd")==null?"":lFisinfo.getString("fclLclSctnCd");
                        String cneeNm     = lFisinfo.getString("cneeNm")==null?"":lFisinfo.getString("cneeNm");
                        lBookingInfo.setString("fclLclSctnCd"   , fclLclSctnCd);       // FCL/LCL
                        lBookingInfo.setString("cneeNm" , cneeNm);                     // consignee명

                        if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_UPDATE ){
                            comDao.add("cud/om/booking_info/updateBookingInfo", lBookingInfo);
                            comDao.executeUpdate();
                        }else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_DELETE){
                            comDao.add("cud/om/booking_info/deleteBookingInfo", lBookingInfo);
                            comDao.executeUpdate();
                        }else if(bookingData.getInt("GauceJobType", i) == GauceDataRow.TB_JOB_INSERT){
                            comDao.add("cud/om/booking_info/createBookingInfo", lBookingInfo);
                            comDao.executeUpdate();
                        }
                    }
                }
**/                        
// end

            }
            LLog.debug.println(paramData);
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBranchOceanExpSalesOrdFwdOrdList", paramData);

        } catch (LBizException be) {
            LLog.err.println(  this.getClass().getName() + "." + "saveBookingSheetFwd()" + "=>" + be.getMessage());
            throw be;
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveBookingSheetFwd()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /** 포워딩관리 Booking List 조회하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    *
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LMultiData retrieveBookingSheetList(LData inputData) throws LException {
        LCommonDao dao = new LCommonDao();
        try{

            if("B".equals(inputData.getString("selGbn"))){
                return dao.executeQuery("select/om/om02/salesOrd/retrieveBookingSheetEmptyBookingList", inputData);
            }else{
                return dao.executeQuery("select/om/om02/salesOrd/retrieveBookingSheetExistBookingList", inputData);
            }

        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBookingSheetList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }

    }
    
    
    /**
     * 영업사원 정보를 조회하는 메소드.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return LMultiData 조회된 리스트 결과.
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrieveSalesOfcrInfo(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();
            return dao.executeQuery("select/om/om02/salesOrd/retrieveSalesOfcrInfo", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveSalesOfcrInfo()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /**
     * 실크로드 오더정보 등록.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LData createSalesOrdPaperProc(LData inputData) throws LException
    {
    	   try{
              // LCommonDao rdao = new LCommonDao();
               LData rslt = new LData();
           	   laf.application.dao.LCommonDao rdao = new laf.application.dao.LCommonDao();

               return rslt = (LData)rdao.executeUpdateProcedure("cud/is/tb_is01001/createSilkOrderProc", inputData);
           } catch (Exception se) {
               LLog.err.println(  this.getClass().getName() + "." + "retrieveSalesOfcrInfo()" + "=>" + se.getMessage());
               throw new LSysException("pbf.err.com.retrieve", se);
           }
       }


    /**
     * 실크로드 오더정보 등록.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void createSilkOrder(LData inputData) throws LException
    {
           try {
        	laf.application.dao.LCompoundDao comDao = new laf.application.dao.LCompoundDao();
            //IWorkRouteMngt pbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);

            comDao.add("cud/om/tb_silk_order/createSilkOrder", inputData);
            comDao.executeUpdate();

        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "createSilkOrder()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 실크로드 오더정보 수정.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void updateSilkOrder(LMultiData inputData) throws LException
    {
           try {
        	laf.application.dao.LCompoundDao comDao = new laf.application.dao.LCompoundDao();

        	for(int i=0; i < inputData.getDataCount(); i++) {

                LData lData = new LData();
                lData = inputData.getLData(i);

                comDao.add("cud/om/tb_silk_order/updateSilkOrder", lData);
                comDao.executeUpdate();
        	}

        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "updateSilkOrder()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /**
     * 실크로드 오더정보 삭제.
     *
     * @param inputData Command로 부턴 전달받은 input LDataProtocol
     *
     * @return
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void deleteSilkOrder(LData inputData) throws LException
    {
           try {
        	laf.application.dao.LCompoundDao comDao = new laf.application.dao.LCompoundDao();
            //IWorkRouteMngt pbc = (IWorkRouteMngt)PbcUtil.getPbc(IWorkRouteMngt.class);

            comDao.add("cud/om/tb_silk_order/deleteSilkOrder", inputData);
            comDao.executeUpdate();

        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "deleteSilkOrder()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }    

    public LMultiData retrieveCancelGiList(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();
            return dao.executeQuery("select/om/om02/salesOrd/retrieveCancelGiList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveCancelGiList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }

    /** 종결원복 조회하는 메소드.
     * 	@param inputData
     *   	
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public LMultiData retrievePartCmptList(LData inputData) throws LException {
        try{
            LCommonDao dao = new LCommonDao();
            return dao.executeQuery("select/om/om02/salesOrd/retrievePartCmptList", inputData);
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrievePartCmptList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }
    }
 
    /** 종결원복 저장하는 메소드.
     * 	@param inputData
     *   	
     * @exception LException 메소드 수행시 발생한 모든 에러.
     */
    public void savePartCmptList(LMultiData inputData) throws LException
    {
    	laf.application.dao.LCommonDao dao = new laf.application.dao.LCommonDao();
    	//laf.application.dao.LCommonDao dao1 = new laf.application.dao.LCommonDao();
        LMultiData retData	= new LMultiData();
        LMultiData realData = new LMultiData();
        LData lData = new LData();
		try{
			 
			LData rslt = new LData();
		    lData = (LData)inputData.getLData(0);
	
			rslt = (LData)dao.executeUpdateProcedure("cud/om/tb_partcmpt_log/partCmptRemoveProc", lData);
			realData.addLData(rslt);
			retData.add("LDATA_TO_GDC", new LData());
			retData.add("OBJECT_TO_GDRs", realData);
			
			LLog.debug.println(  this.getClass().getName() + "." + "savePartCmptList()" + "=>" + rslt);
			
			if( StringUtil.isNull(rslt.getString("result1")).equals("S"))
			    dao.executeUpdate("cud/om/tb_partcmpt_log/createPartCmptLog", lData);
			 
        } catch(Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "savePartCmptList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }

    /** 한솔제지예약오더완료처리 하는 메소드
    *
    * @param inputData Command로 부턴 전달받은 input LDataProtocol
    * 
    * @return LMultiData 조회된 리스트 결과.
    * @exception LException 메소드 수행시 발생한 모든 에러.
    */
    public LData processHppTransferOrdCmpt(LData inputData, LMultiData multi) throws LException
    {
	    LData retVal = new LData();
        retVal.setString("result", "S");
        retVal.setString("message", "작업이 성공적으로 수행되었습니다.");
        laf.application.dao.LCompoundDao iDao = CompDaoUtil.getTransaction(inputData);
	    try
	    {
	        LData param = null;
	        String progStatCd = "";
	        LMultiData cmptSalesOrdList = new LMultiData();
	        if(multi != null && multi.getDataCount() > 0)
	        {
	            for(int i = 0; i < multi.getDataCount(); i++)
	            {
	                param = new LData();
	                param.setString("custOrdNo", multi.getString("custOrdNo", i));
	                param.setString("custOrdLineNo", multi.getString("custOrdLineNo", i));
	                param.setString("progStatCd", progStatCd);
	                param.setString("mdfrId", "CSN");
	                param.setString("ordReasonCd", "36");
	                iDao.add("cud/om/tb_om02002/updateOrdCmpt", param);
	                iDao.executeUpdate();
	                LMultiData salesOrdList = iDao.executeQuery("select/om/om02/salesOrd/retrieveMstrOrdSalesOrdNo", param);
	                LData salesOrd = null;
	                boolean flag = false;
	                if(salesOrdList != null && salesOrdList.getDataCount() > 0)
	                {
	                    for(int x = 0; x < salesOrdList.getDataCount(); x++)
	                    {
	                        salesOrd = salesOrdList.getLData(x);
	                        if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0)
	                        {
	                            for(int z = 0; z < cmptSalesOrdList.getDataCount(); z++)
	                            {
	                                if(!salesOrd.getString("salesOrdNo").equals(cmptSalesOrdList.getString("salesOrdNo", z)))
	                                    continue;
	                                flag = true;
	                                break;
	                            }
	
	                            if(!flag)
	                            {
	                                cmptSalesOrdList.addLData(salesOrd);
	                                flag = false;
	                            }
	                        } else
	                        {
	                            cmptSalesOrdList.addLData(salesOrd);
	                        }
	                    }
	
	                }
	            }
	
	        }
	        LLog.debug.println("cmptSalesOrdList===>\n" + cmptSalesOrdList);
	        if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0)
	        {
	            LData salesOrd = null;
	            for(int x = 0; x < cmptSalesOrdList.getDataCount(); x++)
	            {
	                salesOrd = cmptSalesOrdList.getLData(x);
	                salesOrd.setString("regrId", "CSN");
	                salesOrd.setString("mdfrId", "CSN");
	                salesOrd.setString("rptCustCd", inputData.getString("custCd"));
	                salesOrd.set("LCompoundDao", iDao);
	                processSalesOrdCustCmpt(salesOrd);
	            }
	
	        }
	        IOrdDivMngt pbc = (IOrdDivMngt)PbcUtil.getPbc(hsni.om.om03.ordDivMngt.pbc.IOrdDivMngt.class);
	        LMultiData workRouteList = new LMultiData();
	        LData temp = null;
	        for(int i = 0; i < multi.getDataCount(); i++)
	        {
	            param = new LData();
	            param.setString("custOrdNo", multi.getString("custOrdNo", i));
	            param.setString("custOrdLineNo", multi.getString("custOrdLineNo", i));
	            LMultiData itemList = iDao.executeQuery("select/om/om02/salesOrd/retrieveSalesOrdItemOrdCmpt", param);
	            LData item = null;
	            if(itemList != null && itemList.getDataCount() > 0)
	            {
	                for(int x = 0; x < itemList.getDataCount(); x++)
	                {
	                    item = itemList.getLData(x);
	                    LMultiData result = iDao.executeQuery("select/om/om03/workRouteMngt/retrieveItemWorkRouteList", item);
	                    boolean flag = false;
	                    if(result != null && result.getDataCount() > 0)
	                    {
	                        for(int j = 0; j < result.getDataCount(); j++)
	                        { 
	                            temp = result.getLData(j);
	                            if(workRouteList != null && workRouteList.getDataCount() > 0)
	                            {
	                                for(int z = 0; z < workRouteList.getDataCount(); z++)
	                                {
	                                    if(workRouteList == null || workRouteList.getString("salesOrdNo", z) == null || !workRouteList.getString("salesOrdNo", z).equals(temp.getString("salesOrdNo")) || workRouteList.getString("workRouteSeq", z) == null || !workRouteList.getString("workRouteSeq", z).equals(temp.getString("workRouteSeq")) || workRouteList.getString("lineNo", z) == null || !workRouteList.getString("lineNo", z).equals(temp.getString("lineNo")))
	                                        continue;
	                                    flag = true;
	                                    break;
	                                }
	
	                                if(!flag)
	                                {
	                                    workRouteList.addLData(temp);
	                                    flag = false;
	                                }
	                            } else
	                            {
	                                workRouteList.addLData(temp);
	                            }
	                        }
	
	                    }
	                }
	
	            }
	        }
	
	        LLog.debug.println("workRouteList========>\n" + workRouteList);
	        if(workRouteList != null && workRouteList.getDataCount() > 0)
	        {
	            for(int j = 0; j < workRouteList.getDataCount(); j++)
	            {
	                LData divData = new LData();
	                divData.set("LCompoundDao", iDao);
	                divData.setString("salesOrdNo", workRouteList.getString("salesOrdNo", j));
	                divData.setString("workRouteSeq", workRouteList.getString("workRouteSeq", j));
	                divData.setString("lineNo", workRouteList.getString("lineNo", j));
	                divData.setString("regrId", "CSN");
	                divData.setString("mdfrId", "CSN");
	                pbc.divideEoPartial(divData);
	            }
	  
	        }
	        if(cmptSalesOrdList != null && cmptSalesOrdList.getDataCount() > 0)
	        {
	            LData salesOrd = null;
	            for(int x = 0; x < cmptSalesOrdList.getDataCount(); x++)
	            {
	                salesOrd = cmptSalesOrdList.getLData(x);
	                salesOrd.setString("regrId", "CSN");
	                salesOrd.setString("mdfrId", "CSN");
	                salesOrd.set("LCompoundDao", iDao);
	                setSalesOrdHistory(salesOrd); 
	            }
	
	        }
	    }
	    catch(LBizException be)
	    {
	        LLog.err.println(getClass().getName() + "." + "processHppTransferOrdCmpt()" + "=>" + be.getMessage());
	        throw be;
	    }
	    catch(Exception se)
	    {
	        LLog.err.println(getClass().getName() + "." + "processHppTransferOrdCmpt()" + "=>" + se.getMessage());
	        throw new LSysException("pbf.err.com.retrieve", se);
	    }
	    return retVal;
    }  
  
    /** 
     * BL 진행상황 모니터링  
     * @param inputData      
     * @throws LException   
     */
    
    public LMultiData retrieveBLStatusList(LData inputData) throws LException {
    	LCommonDao dao = new LCommonDao();
    	LLog.debug.println("input>>>>>>>"+inputData); 
        try{
            return dao.executeQuery("select/om/om02/salesOrd/retrieveBLStatusList", inputData);
            
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "retrieveBLStatusList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.retrieve", se);
        }  
    }
      
    //made by 구희성  
      
    //원본 템플릿 소스
    
    public void cudAuth(LMultiData inputData, UserData userData) throws LException{
        LCompoundDao dao = new LCompoundDao();
        try {
            // LMultiData에 userId라는 컬럼으로 row 수만큼 user id 값을 설정한다.
            GauceUtil.fillColValue(inputData, "userId", userData.getUserId());

            dao.setInsertQuery("cud/pbf/tb_az01010/createAuth");
            dao.setDeleteQuery("cud/pbf/tb_az01010/deleteAuth");
            dao.setUpdateQuery("cud/pbf/tb_az01010/updateAuth");
            dao.addWithJobType(inputData, ConstantUtil.getPBF_SYS_DBNM());

            dao.executeUpdate();

        } catch (Exception se) {
            LLog.err.println(this.getClass().getName() + "." + "cudAuth()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }
    
    // 실습
    
    public void saveBLStatusList(LMultiData inputData) throws LException {
    	LCompoundDao dao = new LCompoundDao();
    	//LLog.debug.println("input>>>>>>>"+inputData);
        try{
        	
            //dao.setInsertQuery("cud/om/salesOrd/insertBLStatusList");
            dao.setUpdateQuery("cud/om/salesOrd/updateBLStatusList");//이 기능 중심
            //dao.setDeleteQuery("cud/om/salesOrd/deleteBLStatusList");
            
            dao.addWithJobType(inputData); 
                      
            dao.executeUpdate();  
            
        System.out.println("test");         
            
        } catch (Exception se) {
            LLog.err.println(  this.getClass().getName() + "." + "saveBLStatusList()" + "=>" + se.getMessage());
            throw new LSysException("pbf.err.com.save", se);
        }
    }
    
	
}

